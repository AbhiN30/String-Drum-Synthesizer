
ECE445-V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800aba4  0800aba4  0000bba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac7c  0800ac7c  0000c08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac7c  0800ac7c  0000bc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac84  0800ac84  0000c08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac84  0800ac84  0000bc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac88  0800ac88  0000bc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800ac8c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  2000008c  0800ad18  0000c08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  0800ad18  0000ce04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016800  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb9  00000000  00000000  000228bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00026878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d02  00000000  00000000  000279b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064e9  00000000  00000000  000286b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001898f  00000000  00000000  0002eb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099e81  00000000  00000000  0004752a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e13ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  000e13f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000e61d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab8c 	.word	0x0800ab8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800ab8c 	.word	0x0800ab8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_I2S_TxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	audioBufferPtr = &audioBuffer[0];
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <HAL_I2S_TxHalfCpltCallback+0x24>)
 800057c:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000000 	.word	0x20000000
 8000594:	200001e0 	.word	0x200001e0
 8000598:	200003e0 	.word	0x200003e0

0800059c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	audioBufferPtr = &audioBuffer[BUFFER_SIZE / 2];
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <HAL_I2S_TxCpltCallback+0x20>)
 80005a6:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <HAL_I2S_TxCpltCallback+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_I2S_TxCpltCallback+0x28>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000000 	.word	0x20000000
 80005c0:	200002e0 	.word	0x200002e0
 80005c4:	200003e0 	.word	0x200003e0

080005c8 <GetNextBuffer>:

void GetNextBuffer()
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
	const uint16_t NumSamples = (BUFFER_SIZE / 2) - 1;
 80005ce:	237f      	movs	r3, #127	@ 0x7f
 80005d0:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < NumSamples; i += 2)
 80005d2:	2300      	movs	r3, #0
 80005d4:	80fb      	strh	r3, [r7, #6]
 80005d6:	e013      	b.n	8000600 <GetNextBuffer+0x38>
	{
//		const int16_t sample = (int16_t)((double)((1 << 16) - 1) * ((double)(i) / (double)(NumSamples) - 0.5));
		const uint16_t sample = 0xff;//(1 << 16) - 1;
 80005d8:	23ff      	movs	r3, #255	@ 0xff
 80005da:	807b      	strh	r3, [r7, #2]
		audioBufferPtr[i]   = sample; // left
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <GetNextBuffer+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	887a      	ldrh	r2, [r7, #2]
 80005e8:	801a      	strh	r2, [r3, #0]
		audioBufferPtr[i+1] = sample; // right
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <GetNextBuffer+0x54>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	3301      	adds	r3, #1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	887a      	ldrh	r2, [r7, #2]
 80005f8:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < NumSamples; i += 2)
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	3302      	adds	r3, #2
 80005fe:	80fb      	strh	r3, [r7, #6]
 8000600:	88fa      	ldrh	r2, [r7, #6]
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3e7      	bcc.n	80005d8 <GetNextBuffer+0x10>
	}
	dataReadyFlag = 0;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <GetNextBuffer+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	200003e0 	.word	0x200003e0

08000624 <Run>:

void Run()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audioBufferPtr, BUFFER_SIZE);
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <Run+0x70>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000632:	4619      	mov	r1, r3
 8000634:	4818      	ldr	r0, [pc, #96]	@ (8000698 <Run+0x74>)
 8000636:	f004 f905 	bl	8004844 <HAL_I2S_Transmit_DMA>
 800063a:	4603      	mov	r3, r0
 800063c:	71bb      	strb	r3, [r7, #6]
	if (status != HAL_OK) return;
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d122      	bne.n	800068a <Run+0x66>

	ApplicationTypeDef last_Appli_state = Appli_state;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <Run+0x78>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		if (dataReadyFlag)
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <Run+0x7c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <Run+0x32>
		{
			GetNextBuffer();
 8000652:	f7ff ffb9 	bl	80005c8 <GetNextBuffer>
		}
		MX_USB_HOST_Process();
 8000656:	f009 f849 	bl	80096ec <MX_USB_HOST_Process>
		if(last_Appli_state != Appli_state) {
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <Run+0x78>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	429a      	cmp	r2, r3
 8000662:	d0f2      	beq.n	800064a <Run+0x26>
		  printf("USB Application State: %d\r\n", Appli_state);
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <Run+0x78>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <Run+0x80>)
 800066c:	f009 fc70 	bl	8009f50 <iprintf>
		  last_Appli_state = Appli_state;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <Run+0x78>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	71fb      	strb	r3, [r7, #7]

		  if(Appli_state == APPLICATION_READY) {
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <Run+0x78>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d1e5      	bne.n	800064a <Run+0x26>
			start_midi();
 800067e:	f000 fa05 	bl	8000a8c <start_midi>
			printf("Midisynth Started ----------------------------\r\n");
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <Run+0x84>)
 8000684:	f009 fccc 	bl	800a020 <puts>
		if (dataReadyFlag)
 8000688:	e7df      	b.n	800064a <Run+0x26>
	if (status != HAL_OK) return;
 800068a:	bf00      	nop
		  }

		}
	}
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	200000f0 	.word	0x200000f0
 800069c:	200008d4 	.word	0x200008d4
 80006a0:	200003e0 	.word	0x200003e0
 80006a4:	0800aba4 	.word	0x0800aba4
 80006a8:	0800abc0 	.word	0x0800abc0

080006ac <__io_putchar>:
  * @brief  Redirects printf output to UART.
  * @param  ch: The character to output.
  * @retval The character written to the UART.
  */
int __io_putchar(int ch)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  // Send the character via UART
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <__io_putchar+0x20>)
 80006be:	f005 fbad 	bl	8005e1c <HAL_UART_Transmit>
  return ch;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000198 	.word	0x20000198

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fd2a 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f814 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f950 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f000 f92e 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 f902 	bl	80008ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006e8:	f000 f880 	bl	80007ec <MX_ADC1_Init>
  MX_I2S2_Init();
 80006ec:	f000 f8d0 	bl	8000890 <MX_I2S2_Init>

  HAL_Delay(100);
 80006f0:	2064      	movs	r0, #100	@ 0x64
 80006f2:	f000 fd8d 	bl	8001210 <HAL_Delay>
  MX_USB_HOST_Init();
 80006f6:	f008 ffd3 	bl	80096a0 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Run();
 80006fa:	f7ff ff93 	bl	8000624 <Run>
 80006fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000700:	4618      	mov	r0, r3
 8000702:	bd80      	pop	{r7, pc}

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 fd64 	bl	800a1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <SystemClock_Config+0xe0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a2c      	ldr	r2, [pc, #176]	@ (80007e4 <SystemClock_Config+0xe0>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <SystemClock_Config+0xe0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <SystemClock_Config+0xe4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a25      	ldr	r2, [pc, #148]	@ (80007e8 <SystemClock_Config+0xe4>)
 8000752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <SystemClock_Config+0xe4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000764:	2303      	movs	r3, #3
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2310      	movs	r3, #16
 8000774:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000776:	2302      	movs	r3, #2
 8000778:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000788:	2304      	movs	r3, #4
 800078a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fca3 	bl	80050e0 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007a0:	f000 f96e 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 ff05 	bl	80055d0 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007cc:	f000 f958 	bl	8000a80 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2000      	movs	r0, #0
 80007d6:	f004 ffe1 	bl	800579c <HAL_RCC_MCOConfig>
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	@ 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <MX_ADC1_Init+0x9c>)
 8000802:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000818:	2201      	movs	r2, #1
 800081a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <MX_ADC1_Init+0x98>)
 800082c:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_ADC1_Init+0xa0>)
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_ADC1_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_ADC1_Init+0x98>)
 800084c:	f000 fd04 	bl	8001258 <HAL_ADC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 f913 	bl	8000a80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_ADC1_Init+0x98>)
 800086c:	f000 fd38 	bl	80012e0 <HAL_ADC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000876:	f000 f903 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000a8 	.word	0x200000a8
 8000888:	40012000 	.word	0x40012000
 800088c:	0f000001 	.word	0x0f000001

08000890 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <MX_I2S2_Init+0x54>)
 8000896:	4a14      	ldr	r2, [pc, #80]	@ (80008e8 <MX_I2S2_Init+0x58>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <MX_I2S2_Init+0x54>)
 800089c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008b6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80008ba:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_I2S2_Init+0x54>)
 80008d0:	f003 fe78 	bl	80045c4 <HAL_I2S_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80008da:	f000 f8d1 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000f0 	.word	0x200000f0
 80008e8:	40003800 	.word	0x40003800

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	@ (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f005 fa2a 	bl	8005d7c <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f8a7 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000198 	.word	0x20000198
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	200f      	movs	r0, #15
 8000968:	f000 ffb3 	bl	80018d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800096c:	200f      	movs	r0, #15
 800096e:	f000 ffcc 	bl	800190a <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a35      	ldr	r2, [pc, #212]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a27      	ldr	r2, [pc, #156]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a20      	ldr	r2, [pc, #128]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_GPIO_Init+0xf4>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_Out_GPIO_Port, Audio_Out_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	481b      	ldr	r0, [pc, #108]	@ (8000a78 <MX_GPIO_Init+0xf8>)
 8000a0c:	f001 fc8c 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <MX_GPIO_Init+0xfc>)
 8000a28:	f001 fafa 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Out_Pin */
  GPIO_InitStruct.Pin = Audio_Out_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Audio_Out_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_GPIO_Init+0xf8>)
 8000a44:	f001 faec 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_GPIO_Init+0xf8>)
 8000a66:	f001 fadb 	bl	8002020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	@ 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <start_midi>:
// user code

// ======================================================================
// start the process of receiving midi info into the MIDI_RX_Buffer
void start_midi(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8000a90:	2240      	movs	r2, #64	@ 0x40
 8000a92:	4903      	ldr	r1, [pc, #12]	@ (8000aa0 <start_midi+0x14>)
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <start_midi+0x18>)
 8000a96:	f007 f817 	bl	8007ac8 <USBH_MIDI_Receive>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200003e4 	.word	0x200003e4
 8000aa4:	2000042c 	.word	0x2000042c

08000aa8 <USBH_MIDI_ReceiveCallback>:

// ======================================================================
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  // each USB midi package is 4 bytes long
  uint16_t numberOfPackets = USBH_MIDI_GetLastReceivedDataSize(&hUsbHostFS) / 4;
 8000ab0:	481d      	ldr	r0, [pc, #116]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x80>)
 8000ab2:	f006 ffed 	bl	8007a90 <USBH_MIDI_GetLastReceivedDataSize>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	81bb      	strh	r3, [r7, #12]
  //printf("midi received %d packets.\r\n", numberOfPackets);
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	81fb      	strh	r3, [r7, #14]
 8000ac0:	e024      	b.n	8000b0c <USBH_MIDI_ReceiveCallback+0x64>
    uint8_t cin_cable   = MIDI_RX_Buffer[4*i+0];
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <USBH_MIDI_ReceiveCallback+0x84>)
 8000ac8:	5cd3      	ldrb	r3, [r2, r3]
 8000aca:	72fb      	strb	r3, [r7, #11]
    uint8_t midi_cmd    = MIDI_RX_Buffer[4*i+1];
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a16      	ldr	r2, [pc, #88]	@ (8000b2c <USBH_MIDI_ReceiveCallback+0x84>)
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	72bb      	strb	r3, [r7, #10]
    uint8_t midi_param0 = MIDI_RX_Buffer[4*i+2];
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	3302      	adds	r3, #2
 8000ade:	4a13      	ldr	r2, [pc, #76]	@ (8000b2c <USBH_MIDI_ReceiveCallback+0x84>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	727b      	strb	r3, [r7, #9]
    uint8_t midi_param1 = MIDI_RX_Buffer[4*i+3];
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	3303      	adds	r3, #3
 8000aea:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <USBH_MIDI_ReceiveCallback+0x84>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	723b      	strb	r3, [r7, #8]
    if(cin_cable == 0) {
 8000af0:	7afb      	ldrb	r3, [r7, #11]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <USBH_MIDI_ReceiveCallback+0x5c>
      continue;
    }
    decode_midi(i, midi_cmd, midi_param0, midi_param1);
 8000af6:	7a3b      	ldrb	r3, [r7, #8]
 8000af8:	7a7a      	ldrb	r2, [r7, #9]
 8000afa:	7ab9      	ldrb	r1, [r7, #10]
 8000afc:	89f8      	ldrh	r0, [r7, #14]
 8000afe:	f000 f817 	bl	8000b30 <decode_midi>
 8000b02:	e000      	b.n	8000b06 <USBH_MIDI_ReceiveCallback+0x5e>
      continue;
 8000b04:	bf00      	nop
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	81fb      	strh	r3, [r7, #14]
 8000b0c:	89fa      	ldrh	r2, [r7, #14]
 8000b0e:	89bb      	ldrh	r3, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d3d6      	bcc.n	8000ac2 <USBH_MIDI_ReceiveCallback+0x1a>
  }
  // start a new reception
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8000b14:	2240      	movs	r2, #64	@ 0x40
 8000b16:	4905      	ldr	r1, [pc, #20]	@ (8000b2c <USBH_MIDI_ReceiveCallback+0x84>)
 8000b18:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x80>)
 8000b1a:	f006 ffd5 	bl	8007ac8 <USBH_MIDI_Receive>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000042c 	.word	0x2000042c
 8000b2c:	200003e4 	.word	0x200003e4

08000b30 <decode_midi>:

// ======================================================================
// decode midi input, react to note on/off commands
void decode_midi(uint16_t i, uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	4604      	mov	r4, r0
 8000b38:	4608      	mov	r0, r1
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4623      	mov	r3, r4
 8000b40:	80fb      	strh	r3, [r7, #6]
 8000b42:	4603      	mov	r3, r0
 8000b44:	717b      	strb	r3, [r7, #5]
 8000b46:	460b      	mov	r3, r1
 8000b48:	713b      	strb	r3, [r7, #4]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	70fb      	strb	r3, [r7, #3]

  switch(midi_cmd & 0xf0) {
 8000b4e:	797b      	ldrb	r3, [r7, #5]
 8000b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000b54:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b56:	d028      	beq.n	8000baa <decode_midi+0x7a>
 8000b58:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b5a:	dc33      	bgt.n	8000bc4 <decode_midi+0x94>
 8000b5c:	2be0      	cmp	r3, #224	@ 0xe0
 8000b5e:	d024      	beq.n	8000baa <decode_midi+0x7a>
 8000b60:	2be0      	cmp	r3, #224	@ 0xe0
 8000b62:	dc2f      	bgt.n	8000bc4 <decode_midi+0x94>
 8000b64:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b66:	d020      	beq.n	8000baa <decode_midi+0x7a>
 8000b68:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b6a:	dc2b      	bgt.n	8000bc4 <decode_midi+0x94>
 8000b6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8000b6e:	d01c      	beq.n	8000baa <decode_midi+0x7a>
 8000b70:	2bc0      	cmp	r3, #192	@ 0xc0
 8000b72:	dc27      	bgt.n	8000bc4 <decode_midi+0x94>
 8000b74:	2bb0      	cmp	r3, #176	@ 0xb0
 8000b76:	d018      	beq.n	8000baa <decode_midi+0x7a>
 8000b78:	2bb0      	cmp	r3, #176	@ 0xb0
 8000b7a:	dc23      	bgt.n	8000bc4 <decode_midi+0x94>
 8000b7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b7e:	d014      	beq.n	8000baa <decode_midi+0x7a>
 8000b80:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b82:	dc1f      	bgt.n	8000bc4 <decode_midi+0x94>
 8000b84:	2b80      	cmp	r3, #128	@ 0x80
 8000b86:	d002      	beq.n	8000b8e <decode_midi+0x5e>
 8000b88:	2b90      	cmp	r3, #144	@ 0x90
 8000b8a:	d007      	beq.n	8000b9c <decode_midi+0x6c>
    printf("%d: %02x %02x %02x\r\n", i, midi_cmd, midi_param0, midi_param1);
    printf("command not handled\r\n");
    break;
  }

}
 8000b8c:	e01a      	b.n	8000bc4 <decode_midi+0x94>
    note_off(midi_cmd, midi_param0, midi_param1);
 8000b8e:	78fa      	ldrb	r2, [r7, #3]
 8000b90:	7939      	ldrb	r1, [r7, #4]
 8000b92:	797b      	ldrb	r3, [r7, #5]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f9cb 	bl	8000f30 <note_off>
    break;
 8000b9a:	e013      	b.n	8000bc4 <decode_midi+0x94>
    note_on(midi_cmd, midi_param0, midi_param1);
 8000b9c:	78fa      	ldrb	r2, [r7, #3]
 8000b9e:	7939      	ldrb	r1, [r7, #4]
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f9d3 	bl	8000f4e <note_on>
    break;
 8000ba8:	e00c      	b.n	8000bc4 <decode_midi+0x94>
    printf("%d: %02x %02x %02x\r\n", i, midi_cmd, midi_param0, midi_param1);
 8000baa:	88f9      	ldrh	r1, [r7, #6]
 8000bac:	797a      	ldrb	r2, [r7, #5]
 8000bae:	7938      	ldrb	r0, [r7, #4]
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <decode_midi+0x9c>)
 8000bb8:	f009 f9ca 	bl	8009f50 <iprintf>
    printf("command not handled\r\n");
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <decode_midi+0xa0>)
 8000bbe:	f009 fa2f 	bl	800a020 <puts>
    break;
 8000bc2:	bf00      	nop
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	0800abf0 	.word	0x0800abf0
 8000bd0:	0800ac08 	.word	0x0800ac08

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c12:	2007      	movs	r0, #7
 8000c14:	f000 fe52 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_ADC_MspInit+0x7c>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d127      	bne.n	8000c96 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <HAL_ADC_MspInit+0x80>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <HAL_ADC_MspInit+0x84>)
 8000c92:	f001 f9c5 	bl	8002020 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	@ 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	@ 0x40
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a49      	ldr	r2, [pc, #292]	@ (8000e00 <HAL_I2S_MspInit+0x154>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	f040 808c 	bne.w	8000df8 <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000ce4:	2332      	movs	r3, #50	@ 0x32
 8000ce6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fef5 	bl	8005ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8000cfc:	f7ff fec0 	bl	8000a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	4a3e      	ldr	r2, [pc, #248]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d10:	4b3c      	ldr	r3, [pc, #240]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a37      	ldr	r2, [pc, #220]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2c:	4b35      	ldr	r3, [pc, #212]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b31      	ldr	r3, [pc, #196]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	4a30      	ldr	r2, [pc, #192]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d48:	4b2e      	ldr	r3, [pc, #184]	@ (8000e04 <HAL_I2S_MspInit+0x158>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d54:	2308      	movs	r3, #8
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d64:	2305      	movs	r3, #5
 8000d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4826      	ldr	r0, [pc, #152]	@ (8000e08 <HAL_I2S_MspInit+0x15c>)
 8000d70:	f001 f956 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d74:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d86:	2305      	movs	r3, #5
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481e      	ldr	r0, [pc, #120]	@ (8000e0c <HAL_I2S_MspInit+0x160>)
 8000d92:	f001 f945 	bl	8002020 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000d98:	4a1e      	ldr	r2, [pc, #120]	@ (8000e14 <HAL_I2S_MspInit+0x168>)
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000da4:	2240      	movs	r2, #64	@ 0x40
 8000da6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000db0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000db8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dbc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000dc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000dd0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000dde:	f000 fdaf 	bl	8001940 <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8000de8:	f7ff fe4a 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000df0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000df2:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_I2S_MspInit+0x164>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000df8:	bf00      	nop
 8000dfa:	3740      	adds	r7, #64	@ 0x40
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40003800 	.word	0x40003800
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	20000138 	.word	0x20000138
 8000e14:	40026070 	.word	0x40026070

08000e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	@ (8000e9c <HAL_UART_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_UART_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e72:	230c      	movs	r3, #12
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e82:	2307      	movs	r3, #7
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <HAL_UART_MspInit+0x8c>)
 8000e8e:	f001 f8c7 	bl	8002020 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004400 	.word	0x40004400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f967 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <DMA1_Stream4_IRQHandler+0x10>)
 8000f0e:	f000 fe1d 	bl	8001b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000138 	.word	0x20000138

08000f1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <OTG_FS_IRQHandler+0x10>)
 8000f22:	f001 fcfb 	bl	800291c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200008d8 	.word	0x200008d8

08000f30 <note_off>:
#include "synth.h"


// ======================================================================
void note_off(uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]

}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <note_on>:

// ======================================================================
void note_on(uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	71bb      	strb	r3, [r7, #6]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	717b      	strb	r3, [r7, #5]

}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e00a      	b.n	8000f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7e:	f3af 8000 	nop.w
 8000f82:	4601      	mov	r1, r0
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	b2ca      	uxtb	r2, r1
 8000f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbf0      	blt.n	8000f7e <_read+0x12>
  }

  return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	e009      	b.n	8000fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb73 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbf1      	blt.n	8000fb8 <_write+0x12>
  }
  return len;
 8000fd4:	687b      	ldr	r3, [r7, #4]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_close>:

int _close(int file)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b083      	sub	sp, #12
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001006:	605a      	str	r2, [r3, #4]
  return 0;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <_isatty>:

int _isatty(int file)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001050:	4a14      	ldr	r2, [pc, #80]	@ (80010a4 <_sbrk+0x5c>)
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <_sbrk+0x60>)
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d102      	bne.n	800106a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <_sbrk+0x64>)
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <_sbrk+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	429a      	cmp	r2, r3
 8001076:	d207      	bcs.n	8001088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001078:	f009 f910 	bl	800a29c <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	e009      	b.n	800109c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <_sbrk+0x64>)
 8001098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109a:	68fb      	ldr	r3, [r7, #12]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20018000 	.word	0x20018000
 80010a8:	00000400 	.word	0x00000400
 80010ac:	20000424 	.word	0x20000424
 80010b0:	20000e08 	.word	0x20000e08

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	@ (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001106:	f009 f8cf 	bl	800a2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fae1 	bl	80006d0 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800111c:	0800ac8c 	.word	0x0800ac8c
  ldr r2, =_sbss
 8001120:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001124:	20000e04 	.word	0x20000e04

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 fbb1 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fd38 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fbc9 	bl	8001926 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 fb91 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000004 	.word	0x20000004
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000428 	.word	0x20000428

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000428 	.word	0x20000428

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000000c 	.word	0x2000000c

08001258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e033      	b.n	80012d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fcd4 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d118      	bne.n	80012c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800129e:	f023 0302 	bic.w	r3, r3, #2
 80012a2:	f043 0202 	orr.w	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f93a 	bl	8001524 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f023 0303 	bic.w	r3, r3, #3
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012c6:	e001      	b.n	80012cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x1c>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e105      	b.n	8001508 <HAL_ADC_ConfigChannel+0x228>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b09      	cmp	r3, #9
 800130a:	d925      	bls.n	8001358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d9      	ldr	r1, [r3, #12]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	3b1e      	subs	r3, #30
 8001322:	2207      	movs	r2, #7
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43da      	mvns	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	400a      	ands	r2, r1
 8001330:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	4603      	mov	r3, r0
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4403      	add	r3, r0
 800134a:	3b1e      	subs	r3, #30
 800134c:	409a      	lsls	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	e022      	b.n	800139e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6919      	ldr	r1, [r3, #16]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	2207      	movs	r2, #7
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	400a      	ands	r2, r1
 800137a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6919      	ldr	r1, [r3, #16]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	4603      	mov	r3, r0
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4403      	add	r3, r0
 8001394:	409a      	lsls	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d824      	bhi.n	80013f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b05      	subs	r3, #5
 80013b8:	221f      	movs	r2, #31
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	400a      	ands	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b05      	subs	r3, #5
 80013e2:	fa00 f203 	lsl.w	r2, r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ee:	e04c      	b.n	800148a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	d824      	bhi.n	8001442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b23      	subs	r3, #35	@ 0x23
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43da      	mvns	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	400a      	ands	r2, r1
 8001418:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	3b23      	subs	r3, #35	@ 0x23
 8001434:	fa00 f203 	lsl.w	r2, r0, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001440:	e023      	b.n	800148a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3b41      	subs	r3, #65	@ 0x41
 8001454:	221f      	movs	r2, #31
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	3b41      	subs	r3, #65	@ 0x41
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <HAL_ADC_ConfigChannel+0x234>)
 800148c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <HAL_ADC_ConfigChannel+0x238>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d109      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b12      	cmp	r3, #18
 800149e:	d105      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <HAL_ADC_ConfigChannel+0x238>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d123      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x21e>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b10      	cmp	r3, #16
 80014bc:	d003      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x1e6>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b11      	cmp	r3, #17
 80014c4:	d11b      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d111      	bne.n	80014fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <HAL_ADC_ConfigChannel+0x23c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a10      	ldr	r2, [pc, #64]	@ (8001520 <HAL_ADC_ConfigChannel+0x240>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9a      	lsrs	r2, r3, #18
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f0:	e002      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40012300 	.word	0x40012300
 8001518:	40012000 	.word	0x40012000
 800151c:	20000004 	.word	0x20000004
 8001520:	431bde83 	.word	0x431bde83

08001524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800152c:	4b79      	ldr	r3, [pc, #484]	@ (8001714 <ADC_Init+0x1f0>)
 800152e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	431a      	orrs	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	021a      	lsls	r2, r3, #8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800157c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	4a58      	ldr	r2, [pc, #352]	@ (8001718 <ADC_Init+0x1f4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e00f      	b.n	8001622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001620:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0202 	bic.w	r2, r2, #2
 8001630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e1b      	ldrb	r3, [r3, #24]
 800163c:	005a      	lsls	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01b      	beq.n	8001688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800165e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800166e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	3b01      	subs	r3, #1
 800167c:	035a      	lsls	r2, r3, #13
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	e007      	b.n	8001698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	051a      	lsls	r2, r3, #20
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016da:	025a      	lsls	r2, r3, #9
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6899      	ldr	r1, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	029a      	lsls	r2, r3, #10
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40012300 	.word	0x40012300
 8001718:	0f000001 	.word	0x0f000001

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	@ (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	@ (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	@ (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	@ 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff29 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff3e 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff31 	bl	8001780 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa2 	bl	8001878 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fc54 	bl	80011f8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e099      	b.n	8001a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197c:	e00f      	b.n	800199e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197e:	f7ff fc3b 	bl	80011f8 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b05      	cmp	r3, #5
 800198a:	d908      	bls.n	800199e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e078      	b.n	8001a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e8      	bne.n	800197e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <HAL_DMA_Init+0x158>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	4313      	orrs	r3, r2
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f023 0307 	bic.w	r3, r3, #7
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d117      	bne.n	8001a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00e      	beq.n	8001a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fa6f 	bl	8001f28 <DMA_CheckFifoParam>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2240      	movs	r2, #64	@ 0x40
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e016      	b.n	8001a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fa26 	bl	8001ebc <DMA_CalcBaseAndBitshift>
 8001a70:	4603      	mov	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a78:	223f      	movs	r2, #63	@ 0x3f
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	f010803f 	.word	0xf010803f

08001a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_DMA_Start_IT+0x26>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e040      	b.n	8001b44 <HAL_DMA_Start_IT+0xa8>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d12f      	bne.n	8001b36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f9b8 	bl	8001e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	223f      	movs	r2, #63	@ 0x3f
 8001af6:	409a      	lsls	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0216 	orr.w	r2, r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0208 	orr.w	r2, r2, #8
 8001b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e005      	b.n	8001b42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b58:	4b8e      	ldr	r3, [pc, #568]	@ (8001d94 <HAL_DMA_IRQHandler+0x248>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a8e      	ldr	r2, [pc, #568]	@ (8001d98 <HAL_DMA_IRQHandler+0x24c>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b76:	2208      	movs	r2, #8
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01a      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0204 	bic.w	r2, r2, #4
 8001b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d012      	beq.n	8001bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bda:	2201      	movs	r2, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	f043 0202 	orr.w	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d012      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	2204      	movs	r2, #4
 8001c12:	409a      	lsls	r2, r3
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1c:	f043 0204 	orr.w	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	2210      	movs	r2, #16
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d043      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d03c      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	2210      	movs	r2, #16
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d018      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d108      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d024      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
 8001c7a:	e01f      	b.n	8001cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
 8001c8c:	e016      	b.n	8001cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0208 	bic.w	r2, r2, #8
 8001caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 808f 	beq.w	8001dec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 8087 	beq.w	8001dec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d136      	bne.n	8001d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0216 	bic.w	r2, r2, #22
 8001d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <HAL_DMA_IRQHandler+0x1da>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0208 	bic.w	r2, r2, #8
 8001d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	223f      	movs	r2, #63	@ 0x3f
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d07e      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
        }
        return;
 8001d62:	e079      	b.n	8001e58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d01d      	beq.n	8001dae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10d      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d031      	beq.n	8001dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
 8001d90:	e02c      	b.n	8001dec <HAL_DMA_IRQHandler+0x2a0>
 8001d92:	bf00      	nop
 8001d94:	20000004 	.word	0x20000004
 8001d98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
 8001dac:	e01e      	b.n	8001dec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10f      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0210 	bic.w	r2, r2, #16
 8001dca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d032      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d022      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2205      	movs	r2, #5
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d307      	bcc.n	8001e34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f2      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x2cc>
 8001e32:	e000      	b.n	8001e36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
 8001e56:	e000      	b.n	8001e5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e58:	bf00      	nop
    }
  }
}
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b40      	cmp	r3, #64	@ 0x40
 8001e8c:	d108      	bne.n	8001ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e9e:	e007      	b.n	8001eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3b10      	subs	r3, #16
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <DMA_CalcBaseAndBitshift+0x64>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ed6:	4a13      	ldr	r2, [pc, #76]	@ (8001f24 <DMA_CalcBaseAndBitshift+0x68>)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d909      	bls.n	8001efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	1d1a      	adds	r2, r3, #4
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001efc:	e007      	b.n	8001f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f06:	f023 0303 	bic.w	r3, r3, #3
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	aaaaaaab 	.word	0xaaaaaaab
 8001f24:	0800ac40 	.word	0x0800ac40

08001f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11f      	bne.n	8001f82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d856      	bhi.n	8001ff6 <DMA_CheckFifoParam+0xce>
 8001f48:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <DMA_CheckFifoParam+0x28>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f73 	.word	0x08001f73
 8001f58:	08001f61 	.word	0x08001f61
 8001f5c:	08001ff7 	.word	0x08001ff7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d046      	beq.n	8001ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f70:	e043      	b.n	8001ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f7a:	d140      	bne.n	8001ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f80:	e03d      	b.n	8001ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8a:	d121      	bne.n	8001fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d837      	bhi.n	8002002 <DMA_CheckFifoParam+0xda>
 8001f92:	a201      	add	r2, pc, #4	@ (adr r2, 8001f98 <DMA_CheckFifoParam+0x70>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001faf 	.word	0x08001faf
 8001fa0:	08001fa9 	.word	0x08001fa9
 8001fa4:	08001fc1 	.word	0x08001fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
      break;
 8001fac:	e030      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d025      	beq.n	8002006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fbe:	e022      	b.n	8002006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fc8:	d11f      	bne.n	800200a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fce:	e01c      	b.n	800200a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d903      	bls.n	8001fde <DMA_CheckFifoParam+0xb6>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d003      	beq.n	8001fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fdc:	e018      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe2:	e015      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00e      	beq.n	800200e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff4:	e00b      	b.n	800200e <DMA_CheckFifoParam+0xe6>
      break;
 8001ff6:	bf00      	nop
 8001ff8:	e00a      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e008      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      break;
 8001ffe:	bf00      	nop
 8002000:	e006      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      break;
 8002002:	bf00      	nop
 8002004:	e004      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e002      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      break;   
 800200a:	bf00      	nop
 800200c:	e000      	b.n	8002010 <DMA_CheckFifoParam+0xe8>
      break;
 800200e:	bf00      	nop
    }
  } 
  
  return status; 
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	@ 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e159      	b.n	80022f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8148 	bne.w	80022ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	2b02      	cmp	r3, #2
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a2 	beq.w	80022ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b57      	ldr	r3, [pc, #348]	@ (8002308 <HAL_GPIO_Init+0x2e8>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	4a56      	ldr	r2, [pc, #344]	@ (8002308 <HAL_GPIO_Init+0x2e8>)
 80021b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b6:	4b54      	ldr	r3, [pc, #336]	@ (8002308 <HAL_GPIO_Init+0x2e8>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c2:	4a52      	ldr	r2, [pc, #328]	@ (800230c <HAL_GPIO_Init+0x2ec>)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	089b      	lsrs	r3, r3, #2
 80021c8:	3302      	adds	r3, #2
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	220f      	movs	r2, #15
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a49      	ldr	r2, [pc, #292]	@ (8002310 <HAL_GPIO_Init+0x2f0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x202>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a48      	ldr	r2, [pc, #288]	@ (8002314 <HAL_GPIO_Init+0x2f4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x1fe>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a47      	ldr	r2, [pc, #284]	@ (8002318 <HAL_GPIO_Init+0x2f8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x1fa>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a46      	ldr	r2, [pc, #280]	@ (800231c <HAL_GPIO_Init+0x2fc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x1f6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a45      	ldr	r2, [pc, #276]	@ (8002320 <HAL_GPIO_Init+0x300>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x1f2>
 800220e:	2304      	movs	r3, #4
 8002210:	e008      	b.n	8002224 <HAL_GPIO_Init+0x204>
 8002212:	2307      	movs	r3, #7
 8002214:	e006      	b.n	8002224 <HAL_GPIO_Init+0x204>
 8002216:	2303      	movs	r3, #3
 8002218:	e004      	b.n	8002224 <HAL_GPIO_Init+0x204>
 800221a:	2302      	movs	r3, #2
 800221c:	e002      	b.n	8002224 <HAL_GPIO_Init+0x204>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_GPIO_Init+0x204>
 8002222:	2300      	movs	r3, #0
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	f002 0203 	and.w	r2, r2, #3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	4093      	lsls	r3, r2
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002234:	4935      	ldr	r1, [pc, #212]	@ (800230c <HAL_GPIO_Init+0x2ec>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002242:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <HAL_GPIO_Init+0x304>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002266:	4a2f      	ldr	r2, [pc, #188]	@ (8002324 <HAL_GPIO_Init+0x304>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226c:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <HAL_GPIO_Init+0x304>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002290:	4a24      	ldr	r2, [pc, #144]	@ (8002324 <HAL_GPIO_Init+0x304>)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_GPIO_Init+0x304>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002324 <HAL_GPIO_Init+0x304>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c0:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <HAL_GPIO_Init+0x304>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <HAL_GPIO_Init+0x304>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	f67f aea2 	bls.w	800203c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3724      	adds	r7, #36	@ 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40020000 	.word	0x40020000
 8002314:	40020400 	.word	0x40020400
 8002318:	40020800 	.word	0x40020800
 800231c:	40020c00 	.word	0x40020c00
 8002320:	40021000 	.word	0x40021000
 8002324:	40013c00 	.word	0x40013c00

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af02      	add	r7, sp, #8
 8002360:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e059      	b.n	8002420 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f007 f9e8 	bl	800975c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800239a:	d102      	bne.n	80023a2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f004 f969 	bl	800667e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7c1a      	ldrb	r2, [r3, #16]
 80023b4:	f88d 2000 	strb.w	r2, [sp]
 80023b8:	3304      	adds	r3, #4
 80023ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023bc:	f004 f8ea 	bl	8006594 <USB_CoreInit>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e026      	b.n	8002420 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f004 f961 	bl	80066a0 <USB_SetCurrentMode>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e017      	b.n	8002420 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7c1a      	ldrb	r2, [r3, #16]
 80023f8:	f88d 2000 	strb.w	r2, [sp]
 80023fc:	3304      	adds	r3, #4
 80023fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002400:	f004 fb04 	bl	8006a0c <USB_HostInit>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e004      	b.n	8002420 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b08b      	sub	sp, #44	@ 0x2c
 800242c:	af04      	add	r7, sp, #16
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4603      	mov	r3, r0
 8002438:	70fb      	strb	r3, [r7, #3]
 800243a:	460b      	mov	r3, r1
 800243c:	70bb      	strb	r3, [r7, #2]
 800243e:	4613      	mov	r3, r2
 8002440:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002442:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002444:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_HCD_HC_Init+0x2c>
 8002450:	2302      	movs	r3, #2
 8002452:	e09d      	b.n	8002590 <HAL_HCD_HC_Init+0x168>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3319      	adds	r3, #25
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3314      	adds	r3, #20
 8002480:	787a      	ldrb	r2, [r7, #1]
 8002482:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3315      	adds	r3, #21
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3326      	adds	r3, #38	@ 0x26
 80024a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80024ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	78bb      	ldrb	r3, [r7, #2]
 80024b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3316      	adds	r3, #22
 80024c6:	4602      	mov	r2, r0
 80024c8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fbc8 	bl	8002c64 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80024d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	da0a      	bge.n	80024f2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3317      	adds	r3, #23
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
 80024f0:	e009      	b.n	8002506 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3317      	adds	r3, #23
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fbcc 	bl	8006ca8 <USB_GetHostSpeed>
 8002510:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002512:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10b      	bne.n	8002532 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800251a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_HCD_HC_Init+0x10a>
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2bbc      	cmp	r3, #188	@ 0xbc
 800252c:	d901      	bls.n	8002532 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800252e:	23bc      	movs	r3, #188	@ 0xbc
 8002530:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3318      	adds	r3, #24
 8002542:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002546:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	b298      	uxth	r0, r3
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3328      	adds	r3, #40	@ 0x28
 800255c:	4602      	mov	r2, r0
 800255e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	b29b      	uxth	r3, r3
 8002568:	787c      	ldrb	r4, [r7, #1]
 800256a:	78ba      	ldrb	r2, [r7, #2]
 800256c:	78f9      	ldrb	r1, [r7, #3]
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4623      	mov	r3, r4
 800257e:	f004 fbbb 	bl	8006cf8 <USB_HC_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_HCD_HC_Halt+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e00f      	b.n	80025d6 <HAL_HCD_HC_Halt+0x3e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 ff01 	bl	80073ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	4608      	mov	r0, r1
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4603      	mov	r3, r0
 80025f0:	70fb      	strb	r3, [r7, #3]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70bb      	strb	r3, [r7, #2]
 80025f6:	4613      	mov	r3, r2
 80025f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3317      	adds	r3, #23
 800260a:	78ba      	ldrb	r2, [r7, #2]
 800260c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3326      	adds	r3, #38	@ 0x26
 800261e:	787a      	ldrb	r2, [r7, #1]
 8002620:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002622:	7c3b      	ldrb	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d114      	bne.n	8002652 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	332a      	adds	r3, #42	@ 0x2a
 8002638:	2203      	movs	r2, #3
 800263a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3319      	adds	r3, #25
 800264c:	7f3a      	ldrb	r2, [r7, #28]
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e009      	b.n	8002666 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	332a      	adds	r3, #42	@ 0x2a
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002666:	787b      	ldrb	r3, [r7, #1]
 8002668:	2b03      	cmp	r3, #3
 800266a:	f200 8102 	bhi.w	8002872 <HAL_HCD_HC_SubmitRequest+0x292>
 800266e:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	0800285d 	.word	0x0800285d
 800267c:	08002749 	.word	0x08002749
 8002680:	080027d3 	.word	0x080027d3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002684:	7c3b      	ldrb	r3, [r7, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 80f5 	bne.w	8002876 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800268c:	78bb      	ldrb	r3, [r7, #2]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d12d      	bne.n	80026ee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002692:	8b3b      	ldrh	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	333d      	adds	r3, #61	@ 0x3d
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	333d      	adds	r3, #61	@ 0x3d
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	332a      	adds	r3, #42	@ 0x2a
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80026d6:	e0ce      	b.n	8002876 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	332a      	adds	r3, #42	@ 0x2a
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]
      break;
 80026ec:	e0c3      	b.n	8002876 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	331a      	adds	r3, #26
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 80b8 	bne.w	8002876 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002706:	78fa      	ldrb	r2, [r7, #3]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	333c      	adds	r3, #60	@ 0x3c
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	332a      	adds	r3, #42	@ 0x2a
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
      break;
 8002730:	e0a1      	b.n	8002876 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	332a      	adds	r3, #42	@ 0x2a
 8002742:	2202      	movs	r2, #2
 8002744:	701a      	strb	r2, [r3, #0]
      break;
 8002746:	e096      	b.n	8002876 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002748:	78bb      	ldrb	r3, [r7, #2]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d120      	bne.n	8002790 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	333d      	adds	r3, #61	@ 0x3d
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	332a      	adds	r3, #42	@ 0x2a
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002778:	e07e      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	332a      	adds	r3, #42	@ 0x2a
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
      break;
 800278e:	e073      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	333c      	adds	r3, #60	@ 0x3c
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	332a      	adds	r3, #42	@ 0x2a
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
      break;
 80027ba:	e05d      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	332a      	adds	r3, #42	@ 0x2a
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]
      break;
 80027d0:	e052      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027d2:	78bb      	ldrb	r3, [r7, #2]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d120      	bne.n	800281a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	333d      	adds	r3, #61	@ 0x3d
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	332a      	adds	r3, #42	@ 0x2a
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002802:	e039      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	332a      	adds	r3, #42	@ 0x2a
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]
      break;
 8002818:	e02e      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	333c      	adds	r3, #60	@ 0x3c
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	332a      	adds	r3, #42	@ 0x2a
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
      break;
 8002844:	e018      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	332a      	adds	r3, #42	@ 0x2a
 8002856:	2202      	movs	r2, #2
 8002858:	701a      	strb	r2, [r3, #0]
      break;
 800285a:	e00d      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	332a      	adds	r3, #42	@ 0x2a
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
      break;
 8002870:	e002      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002876:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	332c      	adds	r3, #44	@ 0x2c
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	8b39      	ldrh	r1, [r7, #24]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4403      	add	r3, r0
 800289c:	3334      	adds	r3, #52	@ 0x34
 800289e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3338      	adds	r3, #56	@ 0x38
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3315      	adds	r3, #21
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	@ 0x4d
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	3310      	adds	r3, #16
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	1d19      	adds	r1, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	799b      	ldrb	r3, [r3, #6]
 800290a:	461a      	mov	r2, r3
 800290c:	f004 fb0a 	bl	8006f24 <USB_HC_StartXfer>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop

0800291c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f004 f82a 	bl	800698c <USB_GetMode>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 80fb 	bne.w	8002b36 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 ffed 	bl	8006924 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80f1 	beq.w	8002b34 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 ffe4 	bl	8006924 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002966:	d104      	bne.n	8002972 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002970:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f003 ffd4 	bl	8006924 <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002986:	d104      	bne.n	8002992 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002990:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 ffc4 	bl	8006924 <USB_ReadInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a6:	d104      	bne.n	80029b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 ffb4 	bl	8006924 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d103      	bne.n	80029ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2202      	movs	r2, #2
 80029cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 ffa6 	bl	8006924 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029e2:	d120      	bne.n	8002a26 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80029ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d113      	bne.n	8002a26 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029fe:	2110      	movs	r1, #16
 8002a00:	6938      	ldr	r0, [r7, #16]
 8002a02:	f003 fe99 	bl	8006738 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a06:	6938      	ldr	r0, [r7, #16]
 8002a08:	f003 fec8 	bl	800679c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7a5b      	ldrb	r3, [r3, #9]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d105      	bne.n	8002a20 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 f8a4 	bl	8006b68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f006 ff0b 	bl	800983c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 ff7a 	bl	8006924 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a3a:	d102      	bne.n	8002a42 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f001 fd4d 	bl	80044dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 ff6c 	bl	8006924 <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d106      	bne.n	8002a64 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f006 fed4 	bl	8009804 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2208      	movs	r2, #8
 8002a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 ff5b 	bl	8006924 <USB_ReadInterrupts>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a78:	d139      	bne.n	8002aee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 fc94 	bl	80073ac <USB_HC_ReadInterrupt>
 8002a84:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	e025      	b.n	8002ad8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d018      	beq.n	8002ad2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f905 	bl	8002cce <HCD_HC_IN_IRQHandler>
 8002ac4:	e005      	b.n	8002ad2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 ff67 	bl	80039a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	795b      	ldrb	r3, [r3, #5]
 8002adc:	461a      	mov	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d3d3      	bcc.n	8002a8c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 ff16 	bl	8006924 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d101      	bne.n	8002b06 <HAL_HCD_IRQHandler+0x1ea>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_HCD_IRQHandler+0x1ec>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d014      	beq.n	8002b36 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0210 	bic.w	r2, r2, #16
 8002b1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f001 fbfe 	bl	800431e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0210 	orr.w	r2, r2, #16
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	e000      	b.n	8002b36 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b34:	bf00      	nop
    }
  }
}
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_HCD_Start+0x16>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e013      	b.n	8002b7a <HAL_HCD_Start+0x3e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 f868 	bl	8006c36 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fd76 	bl	800665c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_HCD_Stop+0x16>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e00d      	b.n	8002bb4 <HAL_HCD_Stop+0x32>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 fd32 	bl	800760e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 f80a 	bl	8006be2 <USB_ResetPort>
 8002bce:	4603      	mov	r3, r0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334c      	adds	r3, #76	@ 0x4c
 8002bf4:	781b      	ldrb	r3, [r3, #0]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3338      	adds	r3, #56	@ 0x38
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f004 f84c 	bl	8006cd6 <USB_GetCurrentFrame>
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 f827 	bl	8006ca8 <USB_GetHostSpeed>
 8002c5a:	4603      	mov	r3, r0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331a      	adds	r3, #26
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	331b      	adds	r3, #27
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3325      	adds	r3, #37	@ 0x25
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3324      	adds	r3, #36	@ 0x24
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fe2c 	bl	800694a <USB_ReadChInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d11a      	bne.n	8002d32 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	334d      	adds	r3, #77	@ 0x4d
 8002d1e:	2207      	movs	r2, #7
 8002d20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 fb4f 	bl	80073ce <USB_HC_Halt>
 8002d30:	e09e      	b.n	8002e70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f003 fe05 	bl	800694a <USB_ReadChInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d4a:	d11b      	bne.n	8002d84 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334d      	adds	r3, #77	@ 0x4d
 8002d70:	2208      	movs	r2, #8
 8002d72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 fb26 	bl	80073ce <USB_HC_Halt>
 8002d82:	e075      	b.n	8002e70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 fddc 	bl	800694a <USB_ReadChInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d11a      	bne.n	8002dd2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da8:	461a      	mov	r2, r3
 8002daa:	2308      	movs	r3, #8
 8002dac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	334d      	adds	r3, #77	@ 0x4d
 8002dbe:	2206      	movs	r2, #6
 8002dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f004 faff 	bl	80073ce <USB_HC_Halt>
 8002dd0:	e04e      	b.n	8002e70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fdb5 	bl	800694a <USB_ReadChInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dea:	d11b      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dfe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334d      	adds	r3, #77	@ 0x4d
 8002e10:	2209      	movs	r2, #9
 8002e12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fad6 	bl	80073ce <USB_HC_Halt>
 8002e22:	e025      	b.n	8002e70 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 fd8c 	bl	800694a <USB_ReadChInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e38:	2b80      	cmp	r3, #128	@ 0x80
 8002e3a:	d119      	bne.n	8002e70 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	334d      	adds	r3, #77	@ 0x4d
 8002e5e:	2207      	movs	r2, #7
 8002e60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 faaf 	bl	80073ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fd66 	bl	800694a <USB_ReadChInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e88:	d112      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fa9b 	bl	80073ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eaa:	6093      	str	r3, [r2, #8]
 8002eac:	f000 bd75 	b.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fd46 	bl	800694a <USB_ReadChInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 8128 	bne.w	800311a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2320      	movs	r3, #32
 8002eda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	331b      	adds	r3, #27
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d119      	bne.n	8002f26 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	331b      	adds	r3, #27
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f24:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	799b      	ldrb	r3, [r3, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01b      	beq.n	8002f66 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3330      	adds	r3, #48	@ 0x30
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	1ac9      	subs	r1, r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4403      	add	r3, r0
 8002f62:	3338      	adds	r3, #56	@ 0x38
 8002f64:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334d      	adds	r3, #77	@ 0x4d
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3344      	adds	r3, #68	@ 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3326      	adds	r3, #38	@ 0x26
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3326      	adds	r3, #38	@ 0x26
 8002fc6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d110      	bne.n	8002fee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f004 f9fa 	bl	80073ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2310      	movs	r3, #16
 8002fea:	6093      	str	r3, [r2, #8]
 8002fec:	e03d      	b.n	800306a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3326      	adds	r3, #38	@ 0x26
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d00a      	beq.n	800301a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3326      	adds	r3, #38	@ 0x26
 8003014:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003016:	2b01      	cmp	r3, #1
 8003018:	d127      	bne.n	800306a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	0151      	lsls	r1, r2, #5
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	440a      	add	r2, r1
 8003030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003034:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003038:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	334c      	adds	r3, #76	@ 0x4c
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334c      	adds	r3, #76	@ 0x4c
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f006 fbf7 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	799b      	ldrb	r3, [r3, #6]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d13b      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	3338      	adds	r3, #56	@ 0x38
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4403      	add	r3, r0
 8003092:	3328      	adds	r3, #40	@ 0x28
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	440b      	add	r3, r1
 8003098:	1e59      	subs	r1, r3, #1
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4403      	add	r3, r0
 80030a8:	3328      	adds	r3, #40	@ 0x28
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8470 	beq.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	333c      	adds	r3, #60	@ 0x3c
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	f083 0301 	eor.w	r3, r3, #1
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	333c      	adds	r3, #60	@ 0x3c
 80030e2:	4602      	mov	r2, r0
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	f000 bc58 	b.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	333c      	adds	r3, #60	@ 0x3c
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2d8      	uxtb	r0, r3
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	333c      	adds	r3, #60	@ 0x3c
 8003112:	4602      	mov	r2, r0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	f000 bc40 	b.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fc11 	bl	800694a <USB_ReadChInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	d131      	bne.n	8003196 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313e:	461a      	mov	r2, r3
 8003140:	2320      	movs	r3, #32
 8003142:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	331a      	adds	r3, #26
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	f040 841f 	bne.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	331b      	adds	r3, #27
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	@ 0x4d
 8003180:	2203      	movs	r2, #3
 8003182:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f004 f91e 	bl	80073ce <USB_HC_Halt>
 8003192:	f000 bc02 	b.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 fbd3 	bl	800694a <USB_ReadChInterrupts>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	f040 8305 	bne.w	80037ba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	2302      	movs	r3, #2
 80031c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334d      	adds	r3, #77	@ 0x4d
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d114      	bne.n	8003202 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	@ 0x4d
 80031e8:	2202      	movs	r2, #2
 80031ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334c      	adds	r3, #76	@ 0x4c
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e2cc      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b06      	cmp	r3, #6
 8003216:	d114      	bne.n	8003242 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	334d      	adds	r3, #77	@ 0x4d
 8003228:	2202      	movs	r2, #2
 800322a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334c      	adds	r3, #76	@ 0x4c
 800323c:	2205      	movs	r2, #5
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e2ac      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b07      	cmp	r3, #7
 8003256:	d00b      	beq.n	8003270 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800326a:	2b09      	cmp	r3, #9
 800326c:	f040 80a6 	bne.w	80033bc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	334d      	adds	r3, #77	@ 0x4d
 8003280:	2202      	movs	r2, #2
 8003282:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3344      	adds	r3, #68	@ 0x44
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	3344      	adds	r3, #68	@ 0x44
 80032a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3344      	adds	r3, #68	@ 0x44
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d943      	bls.n	8003346 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3344      	adds	r3, #68	@ 0x44
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	331a      	adds	r3, #26
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d123      	bne.n	8003330 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	331b      	adds	r3, #27
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	331c      	adds	r3, #28
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800332a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334c      	adds	r3, #76	@ 0x4c
 8003340:	2204      	movs	r2, #4
 8003342:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003344:	e229      	b.n	800379a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334c      	adds	r3, #76	@ 0x4c
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3326      	adds	r3, #38	@ 0x26
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3326      	adds	r3, #38	@ 0x26
 8003380:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003382:	2b02      	cmp	r3, #2
 8003384:	f040 8209 	bne.w	800379a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800339e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033ba:	e1ee      	b.n	800379a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334d      	adds	r3, #77	@ 0x4d
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	f040 80c8 	bne.w	8003564 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	@ 0x4d
 80033e4:	2202      	movs	r2, #2
 80033e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	331b      	adds	r3, #27
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 81ce 	bne.w	800379c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3326      	adds	r3, #38	@ 0x26
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d16b      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3348      	adds	r3, #72	@ 0x48
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	1c59      	adds	r1, r3, #1
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4403      	add	r3, r0
 8003436:	3348      	adds	r3, #72	@ 0x48
 8003438:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3348      	adds	r3, #72	@ 0x48
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d943      	bls.n	80034d8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3348      	adds	r3, #72	@ 0x48
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	331b      	adds	r3, #27
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3344      	adds	r3, #68	@ 0x44
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d809      	bhi.n	80034a2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	331c      	adds	r3, #28
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	0151      	lsls	r1, r2, #5
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	440a      	add	r2, r1
 80034b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	334c      	adds	r3, #76	@ 0x4c
 80034d2:	2204      	movs	r2, #4
 80034d4:	701a      	strb	r2, [r3, #0]
 80034d6:	e014      	b.n	8003502 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	@ 0x4c
 80034e8:	2202      	movs	r2, #2
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e009      	b.n	8003502 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334c      	adds	r3, #76	@ 0x4c
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	3326      	adds	r3, #38	@ 0x26
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3326      	adds	r3, #38	@ 0x26
 8003528:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800352a:	2b02      	cmp	r3, #2
 800352c:	f040 8136 	bne.w	800379c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003546:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800354e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e11b      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	334d      	adds	r3, #77	@ 0x4d
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b03      	cmp	r3, #3
 8003578:	f040 8081 	bne.w	800367e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334d      	adds	r3, #77	@ 0x4d
 800358c:	2202      	movs	r2, #2
 800358e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	331b      	adds	r3, #27
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 80fa 	bne.w	800379c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334c      	adds	r3, #76	@ 0x4c
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035da:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035fa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	440a      	add	r2, r1
 8003612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003616:	f023 0320 	bic.w	r3, r3, #32
 800361a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3326      	adds	r3, #38	@ 0x26
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3326      	adds	r3, #38	@ 0x26
 8003642:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003644:	2b02      	cmp	r3, #2
 8003646:	f040 80a9 	bne.w	800379c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003660:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003668:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e08e      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334d      	adds	r3, #77	@ 0x4d
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b04      	cmp	r3, #4
 8003692:	d143      	bne.n	800371c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003694:	78fa      	ldrb	r2, [r7, #3]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	334d      	adds	r3, #77	@ 0x4d
 80036a4:	2202      	movs	r2, #2
 80036a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	334c      	adds	r3, #76	@ 0x4c
 80036b8:	2202      	movs	r2, #2
 80036ba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3326      	adds	r3, #38	@ 0x26
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3326      	adds	r3, #38	@ 0x26
 80036e2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d159      	bne.n	800379c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003706:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e03f      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334d      	adds	r3, #77	@ 0x4d
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d126      	bne.n	8003780 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334d      	adds	r3, #77	@ 0x4d
 8003742:	2202      	movs	r2, #2
 8003744:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3344      	adds	r3, #68	@ 0x44
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c59      	adds	r1, r3, #1
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4403      	add	r3, r0
 8003766:	3344      	adds	r3, #68	@ 0x44
 8003768:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	334c      	adds	r3, #76	@ 0x4c
 800377a:	2204      	movs	r2, #4
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e00d      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	334d      	adds	r3, #77	@ 0x4d
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	f000 8100 	beq.w	8003998 <HCD_HC_IN_IRQHandler+0xcca>
 8003798:	e000      	b.n	800379c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800379a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	334c      	adds	r3, #76	@ 0x4c
 80037ac:	781a      	ldrb	r2, [r3, #0]
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f006 f850 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037b8:	e0ef      	b.n	800399a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 f8c1 	bl	800694a <USB_ReadChInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d12f      	bne.n	8003832 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334d      	adds	r3, #77	@ 0x4d
 80037f4:	2205      	movs	r2, #5
 80037f6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	331a      	adds	r3, #26
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3344      	adds	r3, #68	@ 0x44
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	4611      	mov	r1, r2
 800382a:	4618      	mov	r0, r3
 800382c:	f003 fdcf 	bl	80073ce <USB_HC_Halt>
 8003830:	e0b3      	b.n	800399a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f003 f885 	bl	800694a <USB_ReadChInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b10      	cmp	r3, #16
 8003848:	f040 80a7 	bne.w	800399a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3326      	adds	r3, #38	@ 0x26
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d11b      	bne.n	800389a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3344      	adds	r3, #68	@ 0x44
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	334d      	adds	r3, #77	@ 0x4d
 8003886:	2204      	movs	r2, #4
 8003888:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fd9b 	bl	80073ce <USB_HC_Halt>
 8003898:	e03f      	b.n	800391a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3326      	adds	r3, #38	@ 0x26
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3326      	adds	r3, #38	@ 0x26
 80038c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d129      	bne.n	800391a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3344      	adds	r3, #68	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	799b      	ldrb	r3, [r3, #6]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HCD_HC_IN_IRQHandler+0xc2a>
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	331b      	adds	r3, #27
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d110      	bne.n	800391a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334d      	adds	r3, #77	@ 0x4d
 8003908:	2204      	movs	r2, #4
 800390a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fd5a 	bl	80073ce <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	331b      	adds	r3, #27
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d129      	bne.n	8003984 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	331b      	adds	r3, #27
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	0151      	lsls	r1, r2, #5
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	440a      	add	r2, r1
 800395a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800395e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003962:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4413      	add	r3, r2
 800396c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	440a      	add	r2, r1
 800397a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003990:	461a      	mov	r2, r3
 8003992:	2310      	movs	r3, #16
 8003994:	6093      	str	r3, [r2, #8]
 8003996:	e000      	b.n	800399a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003998:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 ffc3 	bl	800694a <USB_ReadChInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d11b      	bne.n	8003a06 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	2304      	movs	r3, #4
 80039de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	334d      	adds	r3, #77	@ 0x4d
 80039f0:	2207      	movs	r2, #7
 80039f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fce6 	bl	80073ce <USB_HC_Halt>
 8003a02:	f000 bc89 	b.w	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 ff9b 	bl	800694a <USB_ReadChInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	f040 8082 	bne.w	8003b24 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2320      	movs	r3, #32
 8003a30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3319      	adds	r3, #25
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d124      	bne.n	8003a92 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3319      	adds	r3, #25
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	334c      	adds	r3, #76	@ 0x4c
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334d      	adds	r3, #77	@ 0x4d
 8003a80:	2203      	movs	r2, #3
 8003a82:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 fc9e 	bl	80073ce <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	331a      	adds	r3, #26
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	f040 8437 	bne.w	8004318 <HCD_HC_OUT_IRQHandler+0x978>
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	331b      	adds	r3, #27
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 842b 	bne.w	8004318 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3326      	adds	r3, #38	@ 0x26
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d009      	beq.n	8003aec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	331b      	adds	r3, #27
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	334d      	adds	r3, #77	@ 0x4d
 8003afc:	2203      	movs	r2, #3
 8003afe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fc60 	bl	80073ce <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3344      	adds	r3, #68	@ 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	e3f9      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 ff0c 	bl	800694a <USB_ReadChInterrupts>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b3c:	d111      	bne.n	8003b62 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fc37 	bl	80073ce <USB_HC_Halt>
 8003b60:	e3da      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 feed 	bl	800694a <USB_ReadChInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d168      	bne.n	8003c4c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3344      	adds	r3, #68	@ 0x44
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f002 fed7 	bl	800694a <USB_ReadChInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba2:	2b40      	cmp	r3, #64	@ 0x40
 8003ba4:	d112      	bne.n	8003bcc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3319      	adds	r3, #25
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2340      	movs	r3, #64	@ 0x40
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	331b      	adds	r3, #27
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d019      	beq.n	8003c16 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	331b      	adds	r3, #27
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c14:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c22:	461a      	mov	r2, r3
 8003c24:	2301      	movs	r3, #1
 8003c26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	334d      	adds	r3, #77	@ 0x4d
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f003 fbc2 	bl	80073ce <USB_HC_Halt>
 8003c4a:	e365      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f002 fe78 	bl	800694a <USB_ReadChInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d139      	bne.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334d      	adds	r3, #77	@ 0x4d
 8003c74:	2205      	movs	r2, #5
 8003c76:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	331a      	adds	r3, #26
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3319      	adds	r3, #25
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3344      	adds	r3, #68	@ 0x44
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fb85 	bl	80073ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2340      	movs	r3, #64	@ 0x40
 8003cd4:	6093      	str	r3, [r2, #8]
 8003cd6:	e31f      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f002 fe32 	bl	800694a <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d11a      	bne.n	8003d26 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2308      	movs	r3, #8
 8003d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	@ 0x4d
 8003d12:	2206      	movs	r2, #6
 8003d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 fb55 	bl	80073ce <USB_HC_Halt>
 8003d24:	e2f8      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fe0b 	bl	800694a <USB_ReadChInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d144      	bne.n	8003dc8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3344      	adds	r3, #68	@ 0x44
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334d      	adds	r3, #77	@ 0x4d
 8003d62:	2204      	movs	r2, #4
 8003d64:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3319      	adds	r3, #25
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d114      	bne.n	8003da6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3319      	adds	r3, #25
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fb0d 	bl	80073ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2310      	movs	r3, #16
 8003dc4:	6093      	str	r3, [r2, #8]
 8003dc6:	e2a7      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f002 fdba 	bl	800694a <USB_ReadChInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ddc:	2b80      	cmp	r3, #128	@ 0x80
 8003dde:	f040 8083 	bne.w	8003ee8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	799b      	ldrb	r3, [r3, #6]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d111      	bne.n	8003e0e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	334d      	adds	r3, #77	@ 0x4d
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fae1 	bl	80073ce <USB_HC_Halt>
 8003e0c:	e062      	b.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3344      	adds	r3, #68	@ 0x44
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	1c59      	adds	r1, r3, #1
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4403      	add	r3, r0
 8003e2e:	3344      	adds	r3, #68	@ 0x44
 8003e30:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	3344      	adds	r3, #68	@ 0x44
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d922      	bls.n	8003e8e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3344      	adds	r3, #68	@ 0x44
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	334c      	adds	r3, #76	@ 0x4c
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	334c      	adds	r3, #76	@ 0x4c
 8003e80:	781a      	ldrb	r2, [r3, #0]
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f005 fce6 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e8c:	e022      	b.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	334c      	adds	r3, #76	@ 0x4c
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eb8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ec0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	6093      	str	r3, [r2, #8]
 8003ee6:	e217      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f002 fd2a 	bl	800694a <USB_ReadChInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f00:	d11b      	bne.n	8003f3a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334d      	adds	r3, #77	@ 0x4d
 8003f12:	2209      	movs	r2, #9
 8003f14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f003 fa55 	bl	80073ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	e1ee      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fd01 	bl	800694a <USB_ReadChInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	f040 81df 	bne.w	8004312 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f60:	461a      	mov	r2, r3
 8003f62:	2302      	movs	r3, #2
 8003f64:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	334d      	adds	r3, #77	@ 0x4d
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 8093 	bne.w	80040a4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334d      	adds	r3, #77	@ 0x4d
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	334c      	adds	r3, #76	@ 0x4c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3326      	adds	r3, #38	@ 0x26
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d00b      	beq.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	3326      	adds	r3, #38	@ 0x26
 8003fcc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	f040 8190 	bne.w	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	799b      	ldrb	r3, [r3, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d115      	bne.n	8004008 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	333d      	adds	r3, #61	@ 0x3d
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	f083 0301 	eor.w	r3, r3, #1
 8003ff4:	b2d8      	uxtb	r0, r3
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	333d      	adds	r3, #61	@ 0x3d
 8004004:	4602      	mov	r2, r0
 8004006:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	799b      	ldrb	r3, [r3, #6]
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 8171 	bne.w	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3334      	adds	r3, #52	@ 0x34
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8165 	beq.w	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3334      	adds	r3, #52	@ 0x34
 800403a:	6819      	ldr	r1, [r3, #0]
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4403      	add	r3, r0
 800404a:	3328      	adds	r3, #40	@ 0x28
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	440b      	add	r3, r1
 8004050:	1e59      	subs	r1, r3, #1
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4403      	add	r3, r0
 8004060:	3328      	adds	r3, #40	@ 0x28
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	fbb1 f3f3 	udiv	r3, r1, r3
 8004068:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 813f 	beq.w	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	333d      	adds	r3, #61	@ 0x3d
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	f083 0301 	eor.w	r3, r3, #1
 800408e:	b2d8      	uxtb	r0, r3
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	333d      	adds	r3, #61	@ 0x3d
 800409e:	4602      	mov	r2, r0
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e127      	b.n	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	334d      	adds	r3, #77	@ 0x4d
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d120      	bne.n	80040fc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	334d      	adds	r3, #77	@ 0x4d
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	331b      	adds	r3, #27
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f040 8107 	bne.w	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334c      	adds	r3, #76	@ 0x4c
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e0fb      	b.n	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	334d      	adds	r3, #77	@ 0x4d
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b04      	cmp	r3, #4
 8004110:	d13a      	bne.n	8004188 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	334d      	adds	r3, #77	@ 0x4d
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334c      	adds	r3, #76	@ 0x4c
 8004136:	2202      	movs	r2, #2
 8004138:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	331b      	adds	r3, #27
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 80d1 	bne.w	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	331b      	adds	r3, #27
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	440a      	add	r2, r1
 800417c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004184:	6053      	str	r3, [r2, #4]
 8004186:	e0b5      	b.n	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d114      	bne.n	80041c8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334d      	adds	r3, #77	@ 0x4d
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334c      	adds	r3, #76	@ 0x4c
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e095      	b.n	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	334d      	adds	r3, #77	@ 0x4d
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b06      	cmp	r3, #6
 80041dc:	d114      	bne.n	8004208 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	334d      	adds	r3, #77	@ 0x4d
 80041ee:	2202      	movs	r2, #2
 80041f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	334c      	adds	r3, #76	@ 0x4c
 8004202:	2205      	movs	r2, #5
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e075      	b.n	80042f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	334d      	adds	r3, #77	@ 0x4d
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b07      	cmp	r3, #7
 800421c:	d00a      	beq.n	8004234 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	334d      	adds	r3, #77	@ 0x4d
 800422e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004230:	2b09      	cmp	r3, #9
 8004232:	d170      	bne.n	8004316 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	334d      	adds	r3, #77	@ 0x4d
 8004244:	2202      	movs	r2, #2
 8004246:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	3344      	adds	r3, #68	@ 0x44
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	1c59      	adds	r1, r3, #1
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4403      	add	r3, r0
 8004268:	3344      	adds	r3, #68	@ 0x44
 800426a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3344      	adds	r3, #68	@ 0x44
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d914      	bls.n	80042ac <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3344      	adds	r3, #68	@ 0x44
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	334c      	adds	r3, #76	@ 0x4c
 80042a6:	2204      	movs	r2, #4
 80042a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042aa:	e022      	b.n	80042f2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	334c      	adds	r3, #76	@ 0x4c
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	334c      	adds	r3, #76	@ 0x4c
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f005 faa4 	bl	8009858 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004310:	e002      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004316:	bf00      	nop
  }
}
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b08a      	sub	sp, #40	@ 0x28
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	0c5b      	lsrs	r3, r3, #17
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004352:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d004      	beq.n	8004364 <HCD_RXQLVL_IRQHandler+0x46>
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b05      	cmp	r3, #5
 800435e:	f000 80b6 	beq.w	80044ce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004362:	e0b7      	b.n	80044d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80b3 	beq.w	80044d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	332c      	adds	r3, #44	@ 0x2c
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80a7 	beq.w	80044d2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3338      	adds	r3, #56	@ 0x38
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	18d1      	adds	r1, r2, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4403      	add	r3, r0
 80043a8:	3334      	adds	r3, #52	@ 0x34
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4299      	cmp	r1, r3
 80043ae:	f200 8083 	bhi.w	80044b8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	332c      	adds	r3, #44	@ 0x2c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	b292      	uxth	r2, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	f002 fa51 	bl	8006874 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	332c      	adds	r3, #44	@ 0x2c
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	18d1      	adds	r1, r2, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4403      	add	r3, r0
 80043f6:	332c      	adds	r3, #44	@ 0x2c
 80043f8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3338      	adds	r3, #56	@ 0x38
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	18d1      	adds	r1, r2, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4403      	add	r3, r0
 800441e:	3338      	adds	r3, #56	@ 0x38
 8004420:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	0cdb      	lsrs	r3, r3, #19
 8004432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004436:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	3328      	adds	r3, #40	@ 0x28
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4293      	cmp	r3, r2
 8004450:	d13f      	bne.n	80044d2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d03c      	beq.n	80044d2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800446e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004476:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004484:	461a      	mov	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	333c      	adds	r3, #60	@ 0x3c
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2d8      	uxtb	r0, r3
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	333c      	adds	r3, #60	@ 0x3c
 80044b2:	4602      	mov	r2, r0
 80044b4:	701a      	strb	r2, [r3, #0]
      break;
 80044b6:	e00c      	b.n	80044d2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	334c      	adds	r3, #76	@ 0x4c
 80044c8:	2204      	movs	r2, #4
 80044ca:	701a      	strb	r2, [r3, #0]
      break;
 80044cc:	e001      	b.n	80044d2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044d2:	bf00      	nop
  }
}
 80044d4:	bf00      	nop
 80044d6:	3728      	adds	r7, #40	@ 0x28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004508:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d10b      	bne.n	800452c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b01      	cmp	r3, #1
 800451c:	d102      	bne.n	8004524 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f005 f97e 	bl	8009820 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d132      	bne.n	800459c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f043 0308 	orr.w	r3, r3, #8
 800453c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d126      	bne.n	8004596 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	7a5b      	ldrb	r3, [r3, #9]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d113      	bne.n	8004578 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800455a:	d106      	bne.n	800456a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f002 fb00 	bl	8006b68 <USB_InitFSLSPClkSel>
 8004568:	e011      	b.n	800458e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f002 faf9 	bl	8006b68 <USB_InitFSLSPClkSel>
 8004576:	e00a      	b.n	800458e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	79db      	ldrb	r3, [r3, #7]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d106      	bne.n	800458e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004586:	461a      	mov	r2, r3
 8004588:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800458c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f005 f970 	bl	8009874 <HAL_HCD_PortEnabled_Callback>
 8004594:	e002      	b.n	800459c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f005 f97a 	bl	8009890 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d103      	bne.n	80045ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f043 0320 	orr.w	r3, r3, #32
 80045ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045b4:	461a      	mov	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e128      	b.n	8004828 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a90      	ldr	r2, [pc, #576]	@ (8004830 <HAL_I2S_Init+0x26c>)
 80045ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fb5b 	bl	8000cac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800460c:	f023 030f 	bic.w	r3, r3, #15
 8004610:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2202      	movs	r2, #2
 8004618:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d060      	beq.n	80046e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800462a:	2310      	movs	r3, #16
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e001      	b.n	8004634 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b20      	cmp	r3, #32
 800463a:	d802      	bhi.n	8004642 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004642:	2001      	movs	r0, #1
 8004644:	f001 fb3a 	bl	8005cbc <HAL_RCCEx_GetPeriphCLKFreq>
 8004648:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004652:	d125      	bne.n	80046a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	fbb2 f2f3 	udiv	r2, r2, r3
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	3305      	adds	r3, #5
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	e01f      	b.n	80046be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	fbb2 f2f3 	udiv	r2, r2, r3
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	fbb2 f3f3 	udiv	r3, r2, r3
 800469a:	3305      	adds	r3, #5
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e00e      	b.n	80046be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	3305      	adds	r3, #5
 80046bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4a5c      	ldr	r2, [pc, #368]	@ (8004834 <HAL_I2S_Init+0x270>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	08db      	lsrs	r3, r3, #3
 80046c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e003      	b.n	80046ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046e4:	2302      	movs	r3, #2
 80046e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d902      	bls.n	80046f8 <HAL_I2S_Init+0x134>
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2bff      	cmp	r3, #255	@ 0xff
 80046f6:	d907      	bls.n	8004708 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e08f      	b.n	8004828 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	ea42 0103 	orr.w	r1, r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69fa      	ldr	r2, [r7, #28]
 8004718:	430a      	orrs	r2, r1
 800471a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004726:	f023 030f 	bic.w	r3, r3, #15
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6851      	ldr	r1, [r2, #4]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6892      	ldr	r2, [r2, #8]
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	68d2      	ldr	r2, [r2, #12]
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6992      	ldr	r2, [r2, #24]
 800473e:	430a      	orrs	r2, r1
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800474a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d161      	bne.n	8004818 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a38      	ldr	r2, [pc, #224]	@ (8004838 <HAL_I2S_Init+0x274>)
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a37      	ldr	r2, [pc, #220]	@ (800483c <HAL_I2S_Init+0x278>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_I2S_Init+0x1a4>
 8004764:	4b36      	ldr	r3, [pc, #216]	@ (8004840 <HAL_I2S_Init+0x27c>)
 8004766:	e001      	b.n	800476c <HAL_I2S_Init+0x1a8>
 8004768:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	4932      	ldr	r1, [pc, #200]	@ (800483c <HAL_I2S_Init+0x278>)
 8004774:	428a      	cmp	r2, r1
 8004776:	d101      	bne.n	800477c <HAL_I2S_Init+0x1b8>
 8004778:	4a31      	ldr	r2, [pc, #196]	@ (8004840 <HAL_I2S_Init+0x27c>)
 800477a:	e001      	b.n	8004780 <HAL_I2S_Init+0x1bc>
 800477c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004780:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004784:	f023 030f 	bic.w	r3, r3, #15
 8004788:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2b      	ldr	r2, [pc, #172]	@ (800483c <HAL_I2S_Init+0x278>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_I2S_Init+0x1d4>
 8004794:	4b2a      	ldr	r3, [pc, #168]	@ (8004840 <HAL_I2S_Init+0x27c>)
 8004796:	e001      	b.n	800479c <HAL_I2S_Init+0x1d8>
 8004798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800479c:	2202      	movs	r2, #2
 800479e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a25      	ldr	r2, [pc, #148]	@ (800483c <HAL_I2S_Init+0x278>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_I2S_Init+0x1ea>
 80047aa:	4b25      	ldr	r3, [pc, #148]	@ (8004840 <HAL_I2S_Init+0x27c>)
 80047ac:	e001      	b.n	80047b2 <HAL_I2S_Init+0x1ee>
 80047ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047be:	d003      	beq.n	80047c8 <HAL_I2S_Init+0x204>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	e001      	b.n	80047d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047de:	4313      	orrs	r3, r2
 80047e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047f2:	4313      	orrs	r3, r2
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004800:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a0d      	ldr	r2, [pc, #52]	@ (800483c <HAL_I2S_Init+0x278>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_I2S_Init+0x24c>
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <HAL_I2S_Init+0x27c>)
 800480e:	e001      	b.n	8004814 <HAL_I2S_Init+0x250>
 8004810:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004814:	897a      	ldrh	r2, [r7, #10]
 8004816:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	08004b19 	.word	0x08004b19
 8004834:	cccccccd 	.word	0xcccccccd
 8004838:	08004c2d 	.word	0x08004c2d
 800483c:	40003800 	.word	0x40003800
 8004840:	40003400 	.word	0x40003400

08004844 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_I2S_Transmit_DMA+0x1a>
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e08a      	b.n	8004978 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d001      	beq.n	8004872 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800486e:	2302      	movs	r3, #2
 8004870:	e082      	b.n	8004978 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_I2S_Transmit_DMA+0x3e>
 800487e:	2302      	movs	r3, #2
 8004880:	e07a      	b.n	8004978 <HAL_I2S_Transmit_DMA+0x134>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2203      	movs	r2, #3
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d002      	beq.n	80048b6 <HAL_I2S_Transmit_DMA+0x72>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d10a      	bne.n	80048cc <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048ca:	e005      	b.n	80048d8 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	4a28      	ldr	r2, [pc, #160]	@ (8004980 <HAL_I2S_Transmit_DMA+0x13c>)
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e4:	4a27      	ldr	r2, [pc, #156]	@ (8004984 <HAL_I2S_Transmit_DMA+0x140>)
 80048e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	4a26      	ldr	r2, [pc, #152]	@ (8004988 <HAL_I2S_Transmit_DMA+0x144>)
 80048ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80048f8:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004900:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004906:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004908:	f7fd f8c8 	bl	8001a9c <HAL_DMA_Start_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00f      	beq.n	8004932 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f043 0208 	orr.w	r2, r3, #8
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e022      	b.n	8004978 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0202 	orr.w	r2, r2, #2
 8004956:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004974:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	080049f7 	.word	0x080049f7
 8004984:	080049b5 	.word	0x080049b5
 8004988:	08004a13 	.word	0x08004a13

0800498c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10e      	bne.n	80049e8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0202 	bic.w	r2, r2, #2
 80049d8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7fb fdd7 	bl	800059c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fb fdb3 	bl	8000570 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0203 	bic.w	r2, r2, #3
 8004a2e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a48:	f043 0208 	orr.w	r2, r3, #8
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ffa5 	bl	80049a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	881a      	ldrh	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	1c9a      	adds	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10e      	bne.n	8004ab2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004aa2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fb fd75 	bl	800059c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	b292      	uxth	r2, r2
 8004ace:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10e      	bne.n	8004b10 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ff3e 	bl	800498c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d13a      	bne.n	8004baa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d109      	bne.n	8004b52 <I2S_IRQHandler+0x3a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	d102      	bne.n	8004b52 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ffb4 	bl	8004aba <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d126      	bne.n	8004baa <I2S_IRQHandler+0x92>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d11f      	bne.n	8004baa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b78:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	f043 0202 	orr.w	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fefb 	bl	80049a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d136      	bne.n	8004c24 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d109      	bne.n	8004bd4 <I2S_IRQHandler+0xbc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b80      	cmp	r3, #128	@ 0x80
 8004bcc:	d102      	bne.n	8004bd4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ff45 	bl	8004a5e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d122      	bne.n	8004c24 <I2S_IRQHandler+0x10c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d11b      	bne.n	8004c24 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bfa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f043 0204 	orr.w	r2, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff febe 	bl	80049a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c24:	bf00      	nop
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a92      	ldr	r2, [pc, #584]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c46:	4b92      	ldr	r3, [pc, #584]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c48:	e001      	b.n	8004c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a8b      	ldr	r2, [pc, #556]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c64:	4b8a      	ldr	r3, [pc, #552]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c66:	e001      	b.n	8004c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c78:	d004      	beq.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8099 	bne.w	8004db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f925 	bl	8004ee8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9c8 	bl	8005048 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b40      	cmp	r3, #64	@ 0x40
 8004cc0:	d13a      	bne.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d035      	beq.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd8:	e001      	b.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4969      	ldr	r1, [pc, #420]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ce6:	428b      	cmp	r3, r1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cea:	4b69      	ldr	r3, [pc, #420]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cec:	e001      	b.n	8004cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cf6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fe34 	bl	80049a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	f040 80c3 	bne.w	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80bd 	beq.w	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a49      	ldr	r2, [pc, #292]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d6a:	4b49      	ldr	r3, [pc, #292]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d6c:	e001      	b.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4944      	ldr	r1, [pc, #272]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d7a:	428b      	cmp	r3, r1
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d7e:	4b44      	ldr	r3, [pc, #272]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d80:	e001      	b.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f043 0204 	orr.w	r2, r3, #4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fdf6 	bl	80049a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004db4:	e089      	b.n	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d107      	bne.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8be 	bl	8004f4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f8fd 	bl	8004fe4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d12f      	bne.n	8004e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02a      	beq.n	8004e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d101      	bne.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e18:	4b1d      	ldr	r3, [pc, #116]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e1a:	e001      	b.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4919      	ldr	r1, [pc, #100]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	d101      	bne.n	8004e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e2c:	4b18      	ldr	r3, [pc, #96]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e2e:	e001      	b.n	8004e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fda6 	bl	80049a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d136      	bne.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d031      	beq.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a07      	ldr	r2, [pc, #28]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e72:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e74:	e001      	b.n	8004e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4902      	ldr	r1, [pc, #8]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e82:	428b      	cmp	r3, r1
 8004e84:	d106      	bne.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e86:	4b02      	ldr	r3, [pc, #8]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e88:	e006      	b.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e8a:	bf00      	nop
 8004e8c:	40003800 	.word	0x40003800
 8004e90:	40003400 	.word	0x40003400
 8004e94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fd6c 	bl	80049a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec8:	e000      	b.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eca:	bf00      	nop
}
 8004ecc:	bf00      	nop
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c99      	adds	r1, r3, #2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6251      	str	r1, [r2, #36]	@ 0x24
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffc9 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	1c99      	adds	r1, r3, #2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004f5e:	8819      	ldrh	r1, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x90>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <I2SEx_TxISR_I2SExt+0x22>
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f6c:	e001      	b.n	8004f72 <I2SEx_TxISR_I2SExt+0x26>
 8004f6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f72:	460a      	mov	r2, r1
 8004f74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d121      	bne.n	8004fd2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a12      	ldr	r2, [pc, #72]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x90>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <I2SEx_TxISR_I2SExt+0x50>
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f9a:	e001      	b.n	8004fa0 <I2SEx_TxISR_I2SExt+0x54>
 8004f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	490d      	ldr	r1, [pc, #52]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x90>)
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	d101      	bne.n	8004fb0 <I2SEx_TxISR_I2SExt+0x64>
 8004fac:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8004fae:	e001      	b.n	8004fb4 <I2SEx_TxISR_I2SExt+0x68>
 8004fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff81 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40003800 	.word	0x40003800
 8004fe0:	40003400 	.word	0x40003400

08004fe4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68d8      	ldr	r0, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	1c99      	adds	r1, r3, #2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ffc:	b282      	uxth	r2, r0
 8004ffe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005026:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff ff4a 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a20      	ldr	r2, [pc, #128]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x90>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <I2SEx_RxISR_I2SExt+0x16>
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <I2SEx_RxISR_I2SExt+0x94>)
 800505c:	e001      	b.n	8005062 <I2SEx_RxISR_I2SExt+0x1a>
 800505e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005062:	68d8      	ldr	r0, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	1c99      	adds	r1, r3, #2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800506e:	b282      	uxth	r2, r0
 8005070:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d121      	bne.n	80050ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x90>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <I2SEx_RxISR_I2SExt+0x50>
 8005094:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <I2SEx_RxISR_I2SExt+0x94>)
 8005096:	e001      	b.n	800509c <I2SEx_RxISR_I2SExt+0x54>
 8005098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	490d      	ldr	r1, [pc, #52]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x90>)
 80050a4:	428b      	cmp	r3, r1
 80050a6:	d101      	bne.n	80050ac <I2SEx_RxISR_I2SExt+0x64>
 80050a8:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <I2SEx_RxISR_I2SExt+0x94>)
 80050aa:	e001      	b.n	80050b0 <I2SEx_RxISR_I2SExt+0x68>
 80050ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff03 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40003800 	.word	0x40003800
 80050dc:	40003400 	.word	0x40003400

080050e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e267      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d075      	beq.n	80051ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050fe:	4b88      	ldr	r3, [pc, #544]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b04      	cmp	r3, #4
 8005108:	d00c      	beq.n	8005124 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510a:	4b85      	ldr	r3, [pc, #532]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005112:	2b08      	cmp	r3, #8
 8005114:	d112      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b82      	ldr	r3, [pc, #520]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005122:	d10b      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	4b7e      	ldr	r3, [pc, #504]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x108>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d157      	bne.n	80051e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e242      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005144:	d106      	bne.n	8005154 <HAL_RCC_OscConfig+0x74>
 8005146:	4b76      	ldr	r3, [pc, #472]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a75      	ldr	r2, [pc, #468]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e01d      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x98>
 800515e:	4b70      	ldr	r3, [pc, #448]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a6f      	ldr	r2, [pc, #444]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b6d      	ldr	r3, [pc, #436]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6c      	ldr	r2, [pc, #432]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005178:	4b69      	ldr	r3, [pc, #420]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a68      	ldr	r2, [pc, #416]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fc f82e 	bl	80011f8 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fc f82a 	bl	80011f8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	@ 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e207      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0xc0>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fc f81a 	bl	80011f8 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fc f816 	bl	80011f8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	@ 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1f3      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	4b51      	ldr	r3, [pc, #324]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0xe8>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005202:	4b47      	ldr	r3, [pc, #284]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11c      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520e:	4b44      	ldr	r3, [pc, #272]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1c7      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4937      	ldr	r1, [pc, #220]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005246:	e03a      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d020      	beq.n	8005292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005250:	4b34      	ldr	r3, [pc, #208]	@ (8005324 <HAL_RCC_OscConfig+0x244>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fb ffcf 	bl	80011f8 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525e:	f7fb ffcb 	bl	80011f8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1a8      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	4b2b      	ldr	r3, [pc, #172]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b28      	ldr	r3, [pc, #160]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4925      	ldr	r1, [pc, #148]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]
 8005290:	e015      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005292:	4b24      	ldr	r3, [pc, #144]	@ (8005324 <HAL_RCC_OscConfig+0x244>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fb ffae 	bl	80011f8 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fb ffaa 	bl	80011f8 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e187      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d036      	beq.n	8005338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d2:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <HAL_RCC_OscConfig+0x248>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fb ff8e 	bl	80011f8 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e0:	f7fb ff8a 	bl	80011f8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e167      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80052f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x200>
 80052fe:	e01b      	b.n	8005338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005300:	4b09      	ldr	r3, [pc, #36]	@ (8005328 <HAL_RCC_OscConfig+0x248>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fb ff77 	bl	80011f8 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530c:	e00e      	b.n	800532c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530e:	f7fb ff73 	bl	80011f8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d907      	bls.n	800532c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e150      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
 8005320:	40023800 	.word	0x40023800
 8005324:	42470000 	.word	0x42470000
 8005328:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800532c:	4b88      	ldr	r3, [pc, #544]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ea      	bne.n	800530e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8097 	beq.w	8005474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534a:	4b81      	ldr	r3, [pc, #516]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	4b7d      	ldr	r3, [pc, #500]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	4a7c      	ldr	r2, [pc, #496]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005364:	6413      	str	r3, [r2, #64]	@ 0x40
 8005366:	4b7a      	ldr	r3, [pc, #488]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005372:	2301      	movs	r3, #1
 8005374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b77      	ldr	r3, [pc, #476]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d118      	bne.n	80053b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005382:	4b74      	ldr	r3, [pc, #464]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a73      	ldr	r2, [pc, #460]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 8005388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800538c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538e:	f7fb ff33 	bl	80011f8 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005396:	f7fb ff2f 	bl	80011f8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e10c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x2ea>
 80053bc:	4b64      	ldr	r3, [pc, #400]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	4a63      	ldr	r2, [pc, #396]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c8:	e01c      	b.n	8005404 <HAL_RCC_OscConfig+0x324>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x30c>
 80053d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053de:	4b5c      	ldr	r3, [pc, #368]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0x324>
 80053ec:	4b58      	ldr	r3, [pc, #352]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	4a57      	ldr	r2, [pc, #348]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f8:	4b55      	ldr	r3, [pc, #340]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fc:	4a54      	ldr	r2, [pc, #336]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fb fef4 	bl	80011f8 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	e00a      	b.n	800542a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fb fef0 	bl	80011f8 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0cb      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542a:	4b49      	ldr	r3, [pc, #292]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ee      	beq.n	8005414 <HAL_RCC_OscConfig+0x334>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005438:	f7fb fede 	bl	80011f8 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	e00a      	b.n	8005456 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005440:	f7fb feda 	bl	80011f8 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e0b5      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ee      	bne.n	8005440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b39      	ldr	r3, [pc, #228]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	4a38      	ldr	r2, [pc, #224]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005472:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80a1 	beq.w	80055c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547e:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b08      	cmp	r3, #8
 8005488:	d05c      	beq.n	8005544 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d141      	bne.n	8005516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b31      	ldr	r3, [pc, #196]	@ (8005558 <HAL_RCC_OscConfig+0x478>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fb feae 	bl	80011f8 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fb feaa 	bl	80011f8 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e087      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b27      	ldr	r3, [pc, #156]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	491b      	ldr	r1, [pc, #108]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005558 <HAL_RCC_OscConfig+0x478>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fb fe83 	bl	80011f8 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fb fe7f 	bl	80011f8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e05c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005508:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x416>
 8005514:	e054      	b.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b10      	ldr	r3, [pc, #64]	@ (8005558 <HAL_RCC_OscConfig+0x478>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fb fe6c 	bl	80011f8 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fb fe68 	bl	80011f8 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e045      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x444>
 8005542:	e03d      	b.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e038      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
 8005550:	40023800 	.word	0x40023800
 8005554:	40007000 	.word	0x40007000
 8005558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <HAL_RCC_OscConfig+0x4ec>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d028      	beq.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d121      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d11a      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005594:	4293      	cmp	r3, r2
 8005596:	d111      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	3b01      	subs	r3, #1
 80055a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800

080055d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0cc      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b68      	ldr	r3, [pc, #416]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d90c      	bls.n	800560c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b65      	ldr	r3, [pc, #404]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b63      	ldr	r3, [pc, #396]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d001      	beq.n	800560c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b8      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d020      	beq.n	800565a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005624:	4b59      	ldr	r3, [pc, #356]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a58      	ldr	r2, [pc, #352]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800562e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800563c:	4b53      	ldr	r3, [pc, #332]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a52      	ldr	r2, [pc, #328]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b50      	ldr	r3, [pc, #320]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	494d      	ldr	r1, [pc, #308]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d044      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	4b47      	ldr	r3, [pc, #284]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d119      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e07f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d003      	beq.n	800568e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	2b03      	cmp	r3, #3
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b3f      	ldr	r3, [pc, #252]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e067      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b37      	ldr	r3, [pc, #220]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4934      	ldr	r1, [pc, #208]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fb fd9a 	bl	80011f8 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fb fd96 	bl	80011f8 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e04f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2b      	ldr	r3, [pc, #172]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b25      	ldr	r3, [pc, #148]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d20c      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b22      	ldr	r3, [pc, #136]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b20      	ldr	r3, [pc, #128]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e032      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005724:	4b19      	ldr	r3, [pc, #100]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4916      	ldr	r1, [pc, #88]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005742:	4b12      	ldr	r3, [pc, #72]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	490e      	ldr	r1, [pc, #56]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005756:	f000 f889 	bl	800586c <HAL_RCC_GetSysClockFreq>
 800575a:	4602      	mov	r2, r0
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	490a      	ldr	r1, [pc, #40]	@ (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	5ccb      	ldrb	r3, [r1, r3]
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fb fcfa 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40023c00 	.word	0x40023c00
 800578c:	40023800 	.word	0x40023800
 8005790:	0800ac28 	.word	0x0800ac28
 8005794:	20000004 	.word	0x20000004
 8005798:	20000008 	.word	0x20000008

0800579c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	@ 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d129      	bne.n	8005802 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80057be:	4b28      	ldr	r3, [pc, #160]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80057ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d0:	2302      	movs	r3, #2
 80057d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d4:	2303      	movs	r3, #3
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80057e0:	f107 031c 	add.w	r3, r7, #28
 80057e4:	4619      	mov	r1, r3
 80057e6:	481f      	ldr	r0, [pc, #124]	@ (8005864 <HAL_RCC_MCOConfig+0xc8>)
 80057e8:	f7fc fc1a 	bl	8002020 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80057ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	430b      	orrs	r3, r1
 80057fa:	4919      	ldr	r1, [pc, #100]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005800:	e029      	b.n	8005856 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	4b16      	ldr	r3, [pc, #88]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580a:	4a15      	ldr	r2, [pc, #84]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	6313      	str	r3, [r2, #48]	@ 0x30
 8005812:	4b13      	ldr	r3, [pc, #76]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800581e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005824:	2302      	movs	r3, #2
 8005826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005828:	2303      	movs	r3, #3
 800582a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582c:	2300      	movs	r3, #0
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005830:	2300      	movs	r3, #0
 8005832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005834:	f107 031c 	add.w	r3, r7, #28
 8005838:	4619      	mov	r1, r3
 800583a:	480b      	ldr	r0, [pc, #44]	@ (8005868 <HAL_RCC_MCOConfig+0xcc>)
 800583c:	f7fc fbf0 	bl	8002020 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	00d9      	lsls	r1, r3, #3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	430b      	orrs	r3, r1
 8005850:	4903      	ldr	r1, [pc, #12]	@ (8005860 <HAL_RCC_MCOConfig+0xc4>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
}
 8005856:	bf00      	nop
 8005858:	3730      	adds	r7, #48	@ 0x30
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40023800 	.word	0x40023800
 8005864:	40020000 	.word	0x40020000
 8005868:	40020800 	.word	0x40020800

0800586c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b094      	sub	sp, #80	@ 0x50
 8005872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005884:	4b79      	ldr	r3, [pc, #484]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 030c 	and.w	r3, r3, #12
 800588c:	2b08      	cmp	r3, #8
 800588e:	d00d      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x40>
 8005890:	2b08      	cmp	r3, #8
 8005892:	f200 80e1 	bhi.w	8005a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_RCC_GetSysClockFreq+0x34>
 800589a:	2b04      	cmp	r3, #4
 800589c:	d003      	beq.n	80058a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800589e:	e0db      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b73      	ldr	r3, [pc, #460]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80058a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a4:	e0db      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a6:	4b73      	ldr	r3, [pc, #460]	@ (8005a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80058a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058aa:	e0d8      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058ac:	4b6f      	ldr	r3, [pc, #444]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d063      	beq.n	800598a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	099b      	lsrs	r3, r3, #6
 80058c8:	2200      	movs	r2, #0
 80058ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058de:	4622      	mov	r2, r4
 80058e0:	462b      	mov	r3, r5
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f04f 0100 	mov.w	r1, #0
 80058ea:	0159      	lsls	r1, r3, #5
 80058ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058f0:	0150      	lsls	r0, r2, #5
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	4621      	mov	r1, r4
 80058f8:	1a51      	subs	r1, r2, r1
 80058fa:	6139      	str	r1, [r7, #16]
 80058fc:	4629      	mov	r1, r5
 80058fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005910:	4659      	mov	r1, fp
 8005912:	018b      	lsls	r3, r1, #6
 8005914:	4651      	mov	r1, sl
 8005916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800591a:	4651      	mov	r1, sl
 800591c:	018a      	lsls	r2, r1, #6
 800591e:	4651      	mov	r1, sl
 8005920:	ebb2 0801 	subs.w	r8, r2, r1
 8005924:	4659      	mov	r1, fp
 8005926:	eb63 0901 	sbc.w	r9, r3, r1
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800593a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593e:	4690      	mov	r8, r2
 8005940:	4699      	mov	r9, r3
 8005942:	4623      	mov	r3, r4
 8005944:	eb18 0303 	adds.w	r3, r8, r3
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	462b      	mov	r3, r5
 800594c:	eb49 0303 	adc.w	r3, r9, r3
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800595e:	4629      	mov	r1, r5
 8005960:	024b      	lsls	r3, r1, #9
 8005962:	4621      	mov	r1, r4
 8005964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005968:	4621      	mov	r1, r4
 800596a:	024a      	lsls	r2, r1, #9
 800596c:	4610      	mov	r0, r2
 800596e:	4619      	mov	r1, r3
 8005970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005972:	2200      	movs	r2, #0
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800597c:	f7fa fc80 	bl	8000280 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4613      	mov	r3, r2
 8005986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005988:	e058      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598a:	4b38      	ldr	r3, [pc, #224]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	2200      	movs	r2, #0
 8005992:	4618      	mov	r0, r3
 8005994:	4611      	mov	r1, r2
 8005996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800599a:	623b      	str	r3, [r7, #32]
 800599c:	2300      	movs	r3, #0
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	f04f 0000 	mov.w	r0, #0
 80059ac:	f04f 0100 	mov.w	r1, #0
 80059b0:	0159      	lsls	r1, r3, #5
 80059b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b6:	0150      	lsls	r0, r2, #5
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4641      	mov	r1, r8
 80059be:	ebb2 0a01 	subs.w	sl, r2, r1
 80059c2:	4649      	mov	r1, r9
 80059c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059dc:	ebb2 040a 	subs.w	r4, r2, sl
 80059e0:	eb63 050b 	sbc.w	r5, r3, fp
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	00eb      	lsls	r3, r5, #3
 80059ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059f2:	00e2      	lsls	r2, r4, #3
 80059f4:	4614      	mov	r4, r2
 80059f6:	461d      	mov	r5, r3
 80059f8:	4643      	mov	r3, r8
 80059fa:	18e3      	adds	r3, r4, r3
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	464b      	mov	r3, r9
 8005a00:	eb45 0303 	adc.w	r3, r5, r3
 8005a04:	607b      	str	r3, [r7, #4]
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a12:	4629      	mov	r1, r5
 8005a14:	028b      	lsls	r3, r1, #10
 8005a16:	4621      	mov	r1, r4
 8005a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	028a      	lsls	r2, r1, #10
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a26:	2200      	movs	r2, #0
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	61fa      	str	r2, [r7, #28]
 8005a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a30:	f7fa fc26 	bl	8000280 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	3301      	adds	r3, #1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3750      	adds	r7, #80	@ 0x50
 8005a64:	46bd      	mov	sp, r7
 8005a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	00f42400 	.word	0x00f42400
 8005a74:	007a1200 	.word	0x007a1200

08005a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	@ (8005a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000004 	.word	0x20000004

08005a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a94:	f7ff fff0 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	0a9b      	lsrs	r3, r3, #10
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	4903      	ldr	r1, [pc, #12]	@ (8005ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa6:	5ccb      	ldrb	r3, [r1, r3]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	0800ac38 	.word	0x0800ac38

08005ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005abc:	f7ff ffdc 	bl	8005a78 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0b5b      	lsrs	r3, r3, #13
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4903      	ldr	r1, [pc, #12]	@ (8005adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	0800ac38 	.word	0x0800ac38

08005ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d035      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b08:	4b67      	ldr	r3, [pc, #412]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0e:	f7fb fb73 	bl	80011f8 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b16:	f7fb fb6f 	bl	80011f8 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0ba      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b28:	4b60      	ldr	r3, [pc, #384]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f0      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	019a      	lsls	r2, r3, #6
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	071b      	lsls	r3, r3, #28
 8005b40:	495a      	ldr	r1, [pc, #360]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b48:	4b57      	ldr	r3, [pc, #348]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b4e:	f7fb fb53 	bl	80011f8 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b56:	f7fb fb4f 	bl	80011f8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e09a      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b68:	4b50      	ldr	r3, [pc, #320]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8083 	beq.w	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	4b49      	ldr	r3, [pc, #292]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	4a48      	ldr	r2, [pc, #288]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b92:	4b46      	ldr	r3, [pc, #280]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b9e:	4b44      	ldr	r3, [pc, #272]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a43      	ldr	r2, [pc, #268]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ba8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005baa:	f7fb fb25 	bl	80011f8 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb2:	f7fb fb21 	bl	80011f8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e06c      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd0:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02f      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d028      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bee:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c04:	4a29      	ldr	r2, [pc, #164]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c0a:	4b28      	ldr	r3, [pc, #160]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d114      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c16:	f7fb faef 	bl	80011f8 <HAL_GetTick>
 8005c1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1e:	f7fb faeb 	bl	80011f8 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e034      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c34:	4b1d      	ldr	r3, [pc, #116]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0ee      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c4c:	d10d      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c4e:	4b17      	ldr	r3, [pc, #92]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c62:	4912      	ldr	r1, [pc, #72]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	608b      	str	r3, [r1, #8]
 8005c68:	e005      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c6a:	4b10      	ldr	r3, [pc, #64]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c74:	6093      	str	r3, [r2, #8]
 8005c76:	4b0d      	ldr	r3, [pc, #52]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c82:	490a      	ldr	r1, [pc, #40]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	7c1a      	ldrb	r2, [r3, #16]
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c9a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	42470068 	.word	0x42470068
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40007000 	.word	0x40007000
 8005cb4:	42470e40 	.word	0x42470e40
 8005cb8:	424711e0 	.word	0x424711e0

08005cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d13f      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005cda:	4b24      	ldr	r3, [pc, #144]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cf0:	d12f      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005cf4:	617b      	str	r3, [r7, #20]
          break;
 8005cf6:	e02f      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d04:	d108      	bne.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d06:	4b19      	ldr	r3, [pc, #100]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d0e:	4a19      	ldr	r2, [pc, #100]	@ (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	e007      	b.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d18:	4b14      	ldr	r3, [pc, #80]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d20:	4a15      	ldr	r2, [pc, #84]	@ (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d28:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d42:	0f1b      	lsrs	r3, r3, #28
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	617b      	str	r3, [r7, #20]
          break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
          break;
 8005d56:	bf00      	nop
        }
      }
      break;
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005d5a:	bf00      	nop
    }
  }
  return frequency;
 8005d5c:	697b      	ldr	r3, [r7, #20]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	00bb8000 	.word	0x00bb8000
 8005d74:	007a1200 	.word	0x007a1200
 8005d78:	00f42400 	.word	0x00f42400

08005d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e042      	b.n	8005e14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fb f838 	bl	8000e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2224      	movs	r2, #36	@ 0x24
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f973 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695a      	ldr	r2, [r3, #20]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	@ 0x28
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d175      	bne.n	8005f28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_UART_Transmit+0x2c>
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e06e      	b.n	8005f2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2221      	movs	r2, #33	@ 0x21
 8005e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e5a:	f7fb f9cd 	bl	80011f8 <HAL_GetTick>
 8005e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	88fa      	ldrh	r2, [r7, #6]
 8005e64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	88fa      	ldrh	r2, [r7, #6]
 8005e6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e74:	d108      	bne.n	8005e88 <HAL_UART_Transmit+0x6c>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e003      	b.n	8005e90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e90:	e02e      	b.n	8005ef0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2180      	movs	r1, #128	@ 0x80
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f848 	bl	8005f32 <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e03a      	b.n	8005f2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10b      	bne.n	8005ed2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	3302      	adds	r3, #2
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	e007      	b.n	8005ee2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1cb      	bne.n	8005e92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2200      	movs	r2, #0
 8005f02:	2140      	movs	r1, #64	@ 0x40
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f814 	bl	8005f32 <UART_WaitOnFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e006      	b.n	8005f2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b086      	sub	sp, #24
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f42:	e03b      	b.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d037      	beq.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fb f954 	bl	80011f8 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e03a      	b.n	8005fdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d023      	beq.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b80      	cmp	r3, #128	@ 0x80
 8005f78:	d020      	beq.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d01d      	beq.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d116      	bne.n	8005fbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f81d 	bl	8005fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2208      	movs	r2, #8
 8005fae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e00f      	b.n	8005fdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d0b4      	beq.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b095      	sub	sp, #84	@ 0x54
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800600c:	643a      	str	r2, [r7, #64]	@ 0x40
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800601a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3314      	adds	r3, #20
 8006026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	f023 0301 	bic.w	r3, r3, #1
 8006036:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3314      	adds	r3, #20
 800603e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006040:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006042:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e5      	bne.n	8006020 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006058:	2b01      	cmp	r3, #1
 800605a:	d119      	bne.n	8006090 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	60bb      	str	r3, [r7, #8]
   return(result);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f023 0310 	bic.w	r3, r3, #16
 8006072:	647b      	str	r3, [r7, #68]	@ 0x44
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800607c:	61ba      	str	r2, [r7, #24]
 800607e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6979      	ldr	r1, [r7, #20]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	613b      	str	r3, [r7, #16]
   return(result);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800609e:	bf00      	nop
 80060a0:	3754      	adds	r7, #84	@ 0x54
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b0:	b0c0      	sub	sp, #256	@ 0x100
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	ea40 0301 	orr.w	r3, r0, r1
 80060d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006104:	f021 010c 	bic.w	r1, r1, #12
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006112:	430b      	orrs	r3, r1
 8006114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	ea40 0301 	orr.w	r3, r0, r1
 8006132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b8f      	ldr	r3, [pc, #572]	@ (8006378 <UART_SetConfig+0x2cc>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d005      	beq.n	800614c <UART_SetConfig+0xa0>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b8d      	ldr	r3, [pc, #564]	@ (800637c <UART_SetConfig+0x2d0>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d104      	bne.n	8006156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7ff fcb4 	bl	8005ab8 <HAL_RCC_GetPCLK2Freq>
 8006150:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006154:	e003      	b.n	800615e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006156:	f7ff fc9b 	bl	8005a90 <HAL_RCC_GetPCLK1Freq>
 800615a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006168:	f040 810c 	bne.w	8006384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006176:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800617a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800617e:	4622      	mov	r2, r4
 8006180:	462b      	mov	r3, r5
 8006182:	1891      	adds	r1, r2, r2
 8006184:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006186:	415b      	adcs	r3, r3
 8006188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800618a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800618e:	4621      	mov	r1, r4
 8006190:	eb12 0801 	adds.w	r8, r2, r1
 8006194:	4629      	mov	r1, r5
 8006196:	eb43 0901 	adc.w	r9, r3, r1
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	eb18 0303 	adds.w	r3, r8, r3
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061bc:	462b      	mov	r3, r5
 80061be:	eb49 0303 	adc.w	r3, r9, r3
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061da:	460b      	mov	r3, r1
 80061dc:	18db      	adds	r3, r3, r3
 80061de:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e0:	4613      	mov	r3, r2
 80061e2:	eb42 0303 	adc.w	r3, r2, r3
 80061e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061f0:	f7fa f846 	bl	8000280 <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b61      	ldr	r3, [pc, #388]	@ (8006380 <UART_SetConfig+0x2d4>)
 80061fa:	fba3 2302 	umull	r2, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	011c      	lsls	r4, r3, #4
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800620c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800621c:	415b      	adcs	r3, r3
 800621e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006224:	4641      	mov	r1, r8
 8006226:	eb12 0a01 	adds.w	sl, r2, r1
 800622a:	4649      	mov	r1, r9
 800622c:	eb43 0b01 	adc.w	fp, r3, r1
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800623c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006244:	4692      	mov	sl, r2
 8006246:	469b      	mov	fp, r3
 8006248:	4643      	mov	r3, r8
 800624a:	eb1a 0303 	adds.w	r3, sl, r3
 800624e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006252:	464b      	mov	r3, r9
 8006254:	eb4b 0303 	adc.w	r3, fp, r3
 8006258:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006268:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800626c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006270:	460b      	mov	r3, r1
 8006272:	18db      	adds	r3, r3, r3
 8006274:	643b      	str	r3, [r7, #64]	@ 0x40
 8006276:	4613      	mov	r3, r2
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	647b      	str	r3, [r7, #68]	@ 0x44
 800627e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006286:	f7f9 fffb 	bl	8000280 <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4611      	mov	r1, r2
 8006290:	4b3b      	ldr	r3, [pc, #236]	@ (8006380 <UART_SetConfig+0x2d4>)
 8006292:	fba3 2301 	umull	r2, r3, r3, r1
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	2264      	movs	r2, #100	@ 0x64
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	1acb      	subs	r3, r1, r3
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062a6:	4b36      	ldr	r3, [pc, #216]	@ (8006380 <UART_SetConfig+0x2d4>)
 80062a8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062b4:	441c      	add	r4, r3
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062d0:	415b      	adcs	r3, r3
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006324:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800632c:	460b      	mov	r3, r1
 800632e:	18db      	adds	r3, r3, r3
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006332:	4613      	mov	r3, r2
 8006334:	eb42 0303 	adc.w	r3, r2, r3
 8006338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800633a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800633e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006342:	f7f9 ff9d 	bl	8000280 <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <UART_SetConfig+0x2d4>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	@ 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	3332      	adds	r3, #50	@ 0x32
 800635e:	4a08      	ldr	r2, [pc, #32]	@ (8006380 <UART_SetConfig+0x2d4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 0207 	and.w	r2, r3, #7
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4422      	add	r2, r4
 8006372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006374:	e106      	b.n	8006584 <UART_SetConfig+0x4d8>
 8006376:	bf00      	nop
 8006378:	40011000 	.word	0x40011000
 800637c:	40011400 	.word	0x40011400
 8006380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800638e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	1891      	adds	r1, r2, r2
 800639c:	6239      	str	r1, [r7, #32]
 800639e:	415b      	adcs	r3, r3
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a6:	4641      	mov	r1, r8
 80063a8:	1854      	adds	r4, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0501 	adc.w	r5, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	00eb      	lsls	r3, r5, #3
 80063ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063be:	00e2      	lsls	r2, r4, #3
 80063c0:	4614      	mov	r4, r2
 80063c2:	461d      	mov	r5, r3
 80063c4:	4643      	mov	r3, r8
 80063c6:	18e3      	adds	r3, r4, r3
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063cc:	464b      	mov	r3, r9
 80063ce:	eb45 0303 	adc.w	r3, r5, r3
 80063d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063f2:	4629      	mov	r1, r5
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	4621      	mov	r1, r4
 80063f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fc:	4621      	mov	r1, r4
 80063fe:	008a      	lsls	r2, r1, #2
 8006400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006404:	f7f9 ff3c 	bl	8000280 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b60      	ldr	r3, [pc, #384]	@ (8006590 <UART_SetConfig+0x4e4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006420:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	61b9      	str	r1, [r7, #24]
 8006430:	415b      	adcs	r3, r3
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6139      	str	r1, [r7, #16]
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006482:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006490:	4649      	mov	r1, r9
 8006492:	008b      	lsls	r3, r1, #2
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649a:	4641      	mov	r1, r8
 800649c:	008a      	lsls	r2, r1, #2
 800649e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064a2:	f7f9 feed 	bl	8000280 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <UART_SetConfig+0x4e4>)
 80064ae:	fba3 2301 	umull	r2, r3, r3, r1
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	2264      	movs	r2, #100	@ 0x64
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	1acb      	subs	r3, r1, r3
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	3332      	adds	r3, #50	@ 0x32
 80064c0:	4a33      	ldr	r2, [pc, #204]	@ (8006590 <UART_SetConfig+0x4e4>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064cc:	441c      	add	r4, r3
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80064d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800651e:	464b      	mov	r3, r9
 8006520:	460a      	mov	r2, r1
 8006522:	eb42 0303 	adc.w	r3, r2, r3
 8006526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	663b      	str	r3, [r7, #96]	@ 0x60
 8006532:	667a      	str	r2, [r7, #100]	@ 0x64
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006540:	4649      	mov	r1, r9
 8006542:	008b      	lsls	r3, r1, #2
 8006544:	4641      	mov	r1, r8
 8006546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654a:	4641      	mov	r1, r8
 800654c:	008a      	lsls	r2, r1, #2
 800654e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006552:	f7f9 fe95 	bl	8000280 <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <UART_SetConfig+0x4e4>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	@ 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	3332      	adds	r3, #50	@ 0x32
 800656e:	4a08      	ldr	r2, [pc, #32]	@ (8006590 <UART_SetConfig+0x4e4>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 020f 	and.w	r2, r3, #15
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4422      	add	r2, r4
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800658a:	46bd      	mov	sp, r7
 800658c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006590:	51eb851f 	.word	0x51eb851f

08006594 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006594:	b084      	sub	sp, #16
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	f107 001c 	add.w	r0, r7, #28
 80065a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d123      	bne.n	80065f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80065c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d105      	bne.n	80065ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9dc 	bl	80069a8 <USB_CoreReset>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]
 80065f4:	e01b      	b.n	800662e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f9d0 	bl	80069a8 <USB_CoreReset>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800660c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006618:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006620:	e005      	b.n	800662e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800662e:	7fbb      	ldrb	r3, [r7, #30]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d10b      	bne.n	800664c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f043 0206 	orr.w	r2, r3, #6
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006658:	b004      	add	sp, #16
 800665a:	4770      	bx	lr

0800665c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f043 0201 	orr.w	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d115      	bne.n	80066ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ce:	200a      	movs	r0, #10
 80066d0:	f7fa fd9e 	bl	8001210 <HAL_Delay>
      ms += 10U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	330a      	adds	r3, #10
 80066d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f956 	bl	800698c <USB_GetMode>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d01e      	beq.n	8006724 <USB_SetCurrentMode+0x84>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80066ea:	d9f0      	bls.n	80066ce <USB_SetCurrentMode+0x2e>
 80066ec:	e01a      	b.n	8006724 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d115      	bne.n	8006720 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006700:	200a      	movs	r0, #10
 8006702:	f7fa fd85 	bl	8001210 <HAL_Delay>
      ms += 10U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	330a      	adds	r3, #10
 800670a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f93d 	bl	800698c <USB_GetMode>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <USB_SetCurrentMode+0x84>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2bc7      	cmp	r3, #199	@ 0xc7
 800671c:	d9f0      	bls.n	8006700 <USB_SetCurrentMode+0x60>
 800671e:	e001      	b.n	8006724 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e005      	b.n	8006730 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2bc8      	cmp	r3, #200	@ 0xc8
 8006728:	d101      	bne.n	800672e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006752:	d901      	bls.n	8006758 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e01b      	b.n	8006790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	daf2      	bge.n	8006746 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	019b      	lsls	r3, r3, #6
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800677c:	d901      	bls.n	8006782 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e006      	b.n	8006790 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b20      	cmp	r3, #32
 800678c:	d0f0      	beq.n	8006770 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b4:	d901      	bls.n	80067ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e018      	b.n	80067ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	daf2      	bge.n	80067a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2210      	movs	r2, #16
 80067ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067d8:	d901      	bls.n	80067de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e006      	b.n	80067ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d0f0      	beq.n	80067cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b089      	sub	sp, #36	@ 0x24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	460b      	mov	r3, r1
 8006808:	71fb      	strb	r3, [r7, #7]
 800680a:	4613      	mov	r3, r2
 800680c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d123      	bne.n	8006866 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800681e:	88bb      	ldrh	r3, [r7, #4]
 8006820:	3303      	adds	r3, #3
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	e018      	b.n	800685e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	031a      	lsls	r2, r3, #12
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	4413      	add	r3, r2
 8006834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006838:	461a      	mov	r2, r3
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	3301      	adds	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	3301      	adds	r3, #1
 800684a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	3301      	adds	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	3301      	adds	r3, #1
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d3e2      	bcc.n	800682c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3724      	adds	r7, #36	@ 0x24
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006874:	b480      	push	{r7}
 8006876:	b08b      	sub	sp, #44	@ 0x2c
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	089b      	lsrs	r3, r3, #2
 800688e:	b29b      	uxth	r3, r3
 8006890:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	e014      	b.n	80068ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	3301      	adds	r3, #1
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	3301      	adds	r3, #1
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	3301      	adds	r3, #1
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	3301      	adds	r3, #1
 80068c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	3301      	adds	r3, #1
 80068c8:	623b      	str	r3, [r7, #32]
 80068ca:	6a3a      	ldr	r2, [r7, #32]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d3e6      	bcc.n	80068a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068d2:	8bfb      	ldrh	r3, [r7, #30]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01e      	beq.n	8006916 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e2:	461a      	mov	r2, r3
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	6812      	ldr	r2, [r2, #0]
 80068ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	701a      	strb	r2, [r3, #0]
      i++;
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	3301      	adds	r3, #1
 8006902:	623b      	str	r3, [r7, #32]
      pDest++;
 8006904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006906:	3301      	adds	r3, #1
 8006908:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800690a:	8bfb      	ldrh	r3, [r7, #30]
 800690c:	3b01      	subs	r3, #1
 800690e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006910:	8bfb      	ldrh	r3, [r7, #30]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1ea      	bne.n	80068ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006918:	4618      	mov	r0, r3
 800691a:	372c      	adds	r7, #44	@ 0x2c
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4013      	ands	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800693c:	68fb      	ldr	r3, [r7, #12]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800697e:	68bb      	ldr	r3, [r7, #8]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	f003 0301 	and.w	r3, r3, #1
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069c0:	d901      	bls.n	80069c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e01b      	b.n	80069fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	daf2      	bge.n	80069b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f043 0201 	orr.w	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3301      	adds	r3, #1
 80069e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ea:	d901      	bls.n	80069f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e006      	b.n	80069fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d0f0      	beq.n	80069de <USB_CoreReset+0x36>

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d119      	bne.n	8006a96 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10a      	bne.n	8006a80 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a78:	f043 0304 	orr.w	r3, r3, #4
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e014      	b.n	8006aaa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a8e:	f023 0304 	bic.w	r3, r3, #4
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	e009      	b.n	8006aaa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aaa:	2110      	movs	r1, #16
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe43 	bl	8006738 <USB_FlushTxFifo>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff fe6d 	bl	800679c <USB_FlushRxFifo>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	e015      	b.n	8006afe <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af2:	461a      	mov	r2, r3
 8006af4:	2300      	movs	r3, #0
 8006af6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3301      	adds	r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b02:	461a      	mov	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d3e3      	bcc.n	8006ad2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2280      	movs	r2, #128	@ 0x80
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a0e      	ldr	r2, [pc, #56]	@ (8006b5c <USB_HostInit+0x150>)
 8006b22:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a0e      	ldr	r2, [pc, #56]	@ (8006b60 <USB_HostInit+0x154>)
 8006b28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	f043 0210 	orr.w	r2, r3, #16
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <USB_HostInit+0x158>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b58:	b004      	add	sp, #16
 8006b5a:	4770      	bx	lr
 8006b5c:	00600080 	.word	0x00600080
 8006b60:	004000e0 	.word	0x004000e0
 8006b64:	a3200008 	.word	0xa3200008

08006b68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d107      	bne.n	8006bba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006bb6:	6053      	str	r3, [r2, #4]
 8006bb8:	e00c      	b.n	8006bd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d107      	bne.n	8006bd0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006bcc:	6053      	str	r3, [r2, #4]
 8006bce:	e001      	b.n	8006bd4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e000      	b.n	8006bd6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c02:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c10:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c12:	2064      	movs	r0, #100	@ 0x64
 8006c14:	f7fa fafc 	bl	8001210 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c24:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c26:	200a      	movs	r0, #10
 8006c28:	f7fa faf2 	bl	8001210 <HAL_Delay>

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c5a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <USB_DriveVbus+0x44>
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d106      	bne.n	8006c7a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c78:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c84:	d109      	bne.n	8006c9a <USB_DriveVbus+0x64>
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c98:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	0c5b      	lsrs	r3, r3, #17
 8006cc6:	f003 0303 	and.w	r3, r3, #3
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	b29b      	uxth	r3, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	70fb      	strb	r3, [r7, #3]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70bb      	strb	r3, [r7, #2]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d26:	461a      	mov	r2, r3
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295
 8006d2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d867      	bhi.n	8006e06 <USB_HC_Init+0x10e>
 8006d36:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <USB_HC_Init+0x44>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d4d 	.word	0x08006d4d
 8006d40:	08006dc9 	.word	0x08006dc9
 8006d44:	08006d4d 	.word	0x08006d4d
 8006d48:	08006d8b 	.word	0x08006d8b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006d5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da51      	bge.n	8006e0c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d86:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006d88:	e040      	b.n	8006e0c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d96:	461a      	mov	r2, r3
 8006d98:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006d9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da34      	bge.n	8006e10 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc4:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006dc6:	e023      	b.n	8006e10 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dc8:	78fb      	ldrb	r3, [r7, #3]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f240 2325 	movw	r3, #549	@ 0x225
 8006dda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ddc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da17      	bge.n	8006e14 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfe:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006e02:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e04:	e006      	b.n	8006e14 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	77fb      	strb	r3, [r7, #31]
      break;
 8006e0a:	e004      	b.n	8006e16 <USB_HC_Init+0x11e>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <USB_HC_Init+0x11e>
      break;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <USB_HC_Init+0x11e>
      break;
 8006e14:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e22:	461a      	mov	r2, r3
 8006e24:	2300      	movs	r3, #0
 8006e26:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	78fa      	ldrb	r2, [r7, #3]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e42:	f043 0302 	orr.w	r3, r3, #2
 8006e46:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	2101      	movs	r1, #1
 8006e58:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5c:	6939      	ldr	r1, [r7, #16]
 8006e5e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006e62:	4313      	orrs	r3, r2
 8006e64:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006e72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da03      	bge.n	8006e82 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	e001      	b.n	8006e86 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff ff0e 	bl	8006ca8 <USB_GetHostSpeed>
 8006e8c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d106      	bne.n	8006ea4 <USB_HC_Init+0x1ac>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d003      	beq.n	8006ea4 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	e001      	b.n	8006ea8 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ea8:	787b      	ldrb	r3, [r7, #1]
 8006eaa:	059b      	lsls	r3, r3, #22
 8006eac:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006eb0:	78bb      	ldrb	r3, [r7, #2]
 8006eb2:	02db      	lsls	r3, r3, #11
 8006eb4:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006eb8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006eba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ebe:	049b      	lsls	r3, r3, #18
 8006ec0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ec4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006ec6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ecc:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ed6:	78fa      	ldrb	r2, [r7, #3]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ee6:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006ee8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d003      	beq.n	8006ef8 <USB_HC_Init+0x200>
 8006ef0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10f      	bne.n	8006f18 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	78fa      	ldrb	r2, [r7, #3]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f16:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop

08006f24 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08c      	sub	sp, #48	@ 0x30
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	785b      	ldrb	r3, [r3, #1]
 8006f3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006f3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f40:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	799b      	ldrb	r3, [r3, #6]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d158      	bne.n	8006ffc <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	78db      	ldrb	r3, [r3, #3]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	8a92      	ldrh	r2, [r2, #20]
 8006f5c:	fb03 f202 	mul.w	r2, r3, r2
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61da      	str	r2, [r3, #28]
 8006f64:	e079      	b.n	800705a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	7c9b      	ldrb	r3, [r3, #18]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d130      	bne.n	8006fd0 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	2bbc      	cmp	r3, #188	@ 0xbc
 8006f74:	d918      	bls.n	8006fa8 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	8a9b      	ldrh	r3, [r3, #20]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <USB_HC_StartXfer+0x74>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d103      	bne.n	8006fa0 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	60da      	str	r2, [r3, #12]
 8006f9e:	e05c      	b.n	800705a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	e058      	b.n	800705a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6a1a      	ldr	r2, [r3, #32]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d007      	beq.n	8006fc8 <USB_HC_StartXfer+0xa4>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d003      	beq.n	8006fc8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2204      	movs	r2, #4
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e048      	b.n	800705a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2203      	movs	r2, #3
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	e044      	b.n	800705a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d10d      	bne.n	8006ff2 <USB_HC_StartXfer+0xce>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	8a92      	ldrh	r2, [r2, #20]
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d907      	bls.n	8006ff2 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006fe2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	8a92      	ldrh	r2, [r2, #20]
 8006fe8:	fb03 f202 	mul.w	r2, r3, r2
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	61da      	str	r2, [r3, #28]
 8006ff0:	e033      	b.n	800705a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	61da      	str	r2, [r3, #28]
 8006ffa:	e02e      	b.n	800705a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d018      	beq.n	8007036 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	8a92      	ldrh	r2, [r2, #20]
 800700c:	4413      	add	r3, r2
 800700e:	3b01      	subs	r3, #1
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	8a92      	ldrh	r2, [r2, #20]
 8007014:	fbb3 f3f2 	udiv	r3, r3, r2
 8007018:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800701a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800701c:	8b7b      	ldrh	r3, [r7, #26]
 800701e:	429a      	cmp	r2, r3
 8007020:	d90b      	bls.n	800703a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8007022:	8b7b      	ldrh	r3, [r7, #26]
 8007024:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	8a92      	ldrh	r2, [r2, #20]
 800702c:	fb03 f202 	mul.w	r2, r3, r2
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61da      	str	r2, [r3, #28]
 8007034:	e001      	b.n	800703a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007036:	2301      	movs	r3, #1
 8007038:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	78db      	ldrb	r3, [r3, #3]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007042:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	8a92      	ldrh	r2, [r2, #20]
 8007048:	fb03 f202 	mul.w	r2, r3, r2
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	61da      	str	r2, [r3, #28]
 8007050:	e003      	b.n	800705a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6a1a      	ldr	r2, [r3, #32]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007062:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007064:	04d9      	lsls	r1, r3, #19
 8007066:	4ba4      	ldr	r3, [pc, #656]	@ (80072f8 <USB_HC_StartXfer+0x3d4>)
 8007068:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800706a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	7d9b      	ldrb	r3, [r3, #22]
 8007070:	075b      	lsls	r3, r3, #29
 8007072:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007076:	69f9      	ldr	r1, [r7, #28]
 8007078:	0148      	lsls	r0, r1, #5
 800707a:	6a39      	ldr	r1, [r7, #32]
 800707c:	4401      	add	r1, r0
 800707e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007082:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007084:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6999      	ldr	r1, [r3, #24]
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	4413      	add	r3, r2
 8007098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800709c:	460a      	mov	r2, r1
 800709e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	0151      	lsls	r1, r2, #5
 80070ca:	6a3a      	ldr	r2, [r7, #32]
 80070cc:	440a      	add	r2, r1
 80070ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070d2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070d6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	7e7b      	ldrb	r3, [r7, #25]
 80070e8:	075b      	lsls	r3, r3, #29
 80070ea:	69f9      	ldr	r1, [r7, #28]
 80070ec:	0148      	lsls	r0, r1, #5
 80070ee:	6a39      	ldr	r1, [r7, #32]
 80070f0:	4401      	add	r1, r0
 80070f2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80070f6:	4313      	orrs	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	799b      	ldrb	r3, [r3, #6]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	f040 80c4 	bne.w	800728c <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	7c5b      	ldrb	r3, [r3, #17]
 8007108:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800710e:	4313      	orrs	r3, r2
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	440a      	add	r2, r1
 8007118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800711c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007120:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	6a3a      	ldr	r2, [r7, #32]
 8007136:	440a      	add	r2, r1
 8007138:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800713c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007140:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	79db      	ldrb	r3, [r3, #7]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d123      	bne.n	8007192 <USB_HC_StartXfer+0x26e>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	78db      	ldrb	r3, [r3, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11f      	bne.n	8007192 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	6a3a      	ldr	r2, [r7, #32]
 8007166:	440a      	add	r2, r1
 8007168:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800716c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007170:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	440a      	add	r2, r1
 8007188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800718c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007190:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	7c9b      	ldrb	r3, [r3, #18]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <USB_HC_StartXfer+0x27e>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	7c9b      	ldrb	r3, [r3, #18]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d117      	bne.n	80071d2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d113      	bne.n	80071d2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	78db      	ldrb	r3, [r3, #3]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10f      	bne.n	80071d2 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d0:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	7c9b      	ldrb	r3, [r3, #18]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d163      	bne.n	80072a2 <USB_HC_StartXfer+0x37e>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	78db      	ldrb	r3, [r3, #3]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d15f      	bne.n	80072a2 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d859      	bhi.n	80072a0 <USB_HC_StartXfer+0x37c>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <USB_HC_StartXfer+0x2d0>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007205 	.word	0x08007205
 80071f8:	08007227 	.word	0x08007227
 80071fc:	08007249 	.word	0x08007249
 8007200:	0800726b 	.word	0x0800726b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	4413      	add	r3, r2
 800720c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	440a      	add	r2, r1
 800721a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800721e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007222:	6053      	str	r3, [r2, #4]
          break;
 8007224:	e03d      	b.n	80072a2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	6a3a      	ldr	r2, [r7, #32]
 800723a:	440a      	add	r2, r1
 800723c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007240:	f043 030e 	orr.w	r3, r3, #14
 8007244:	6053      	str	r3, [r2, #4]
          break;
 8007246:	e02c      	b.n	80072a2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	4413      	add	r3, r2
 8007250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	6a3a      	ldr	r2, [r7, #32]
 800725c:	440a      	add	r2, r1
 800725e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007266:	6053      	str	r3, [r2, #4]
          break;
 8007268:	e01b      	b.n	80072a2 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	6a3a      	ldr	r2, [r7, #32]
 800727e:	440a      	add	r2, r1
 8007280:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007288:	6053      	str	r3, [r2, #4]
          break;
 800728a:	e00a      	b.n	80072a2 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	4413      	add	r3, r2
 8007294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007298:	461a      	mov	r2, r3
 800729a:	2300      	movs	r3, #0
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	e000      	b.n	80072a2 <USB_HC_StartXfer+0x37e>
          break;
 80072a0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072b8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	e003      	b.n	80072d4 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072d2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072da:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e8:	461a      	mov	r2, r3
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e055      	b.n	80073a4 <USB_HC_StartXfer+0x480>
 80072f8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	78db      	ldrb	r3, [r3, #3]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d14e      	bne.n	80073a2 <USB_HC_StartXfer+0x47e>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d04a      	beq.n	80073a2 <USB_HC_StartXfer+0x47e>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	79db      	ldrb	r3, [r3, #7]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d146      	bne.n	80073a2 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	7c9b      	ldrb	r3, [r3, #18]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d831      	bhi.n	8007380 <USB_HC_StartXfer+0x45c>
 800731c:	a201      	add	r2, pc, #4	@ (adr r2, 8007324 <USB_HC_StartXfer+0x400>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007335 	.word	0x08007335
 8007328:	08007359 	.word	0x08007359
 800732c:	08007335 	.word	0x08007335
 8007330:	08007359 	.word	0x08007359
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	3303      	adds	r3, #3
 800733a:	089b      	lsrs	r3, r3, #2
 800733c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800733e:	8afa      	ldrh	r2, [r7, #22]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	b29b      	uxth	r3, r3
 8007346:	429a      	cmp	r2, r3
 8007348:	d91c      	bls.n	8007384 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f043 0220 	orr.w	r2, r3, #32
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	619a      	str	r2, [r3, #24]
        }
        break;
 8007356:	e015      	b.n	8007384 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	3303      	adds	r3, #3
 800735e:	089b      	lsrs	r3, r3, #2
 8007360:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007362:	8afa      	ldrh	r2, [r7, #22]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	b29b      	uxth	r3, r3
 800736e:	429a      	cmp	r2, r3
 8007370:	d90a      	bls.n	8007388 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	619a      	str	r2, [r3, #24]
        }
        break;
 800737e:	e003      	b.n	8007388 <USB_HC_StartXfer+0x464>

      default:
        break;
 8007380:	bf00      	nop
 8007382:	e002      	b.n	800738a <USB_HC_StartXfer+0x466>
        break;
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <USB_HC_StartXfer+0x466>
        break;
 8007388:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6999      	ldr	r1, [r3, #24]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	785a      	ldrb	r2, [r3, #1]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	b29b      	uxth	r3, r3
 8007398:	2000      	movs	r0, #0
 800739a:	9000      	str	r0, [sp, #0]
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fa2b 	bl	80067f8 <USB_WritePacket>
  }

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3728      	adds	r7, #40	@ 0x28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	b29b      	uxth	r3, r3
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b089      	sub	sp, #36	@ 0x24
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	0c9b      	lsrs	r3, r3, #18
 80073f6:	f003 0303 	and.w	r3, r3, #3
 80073fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	0fdb      	lsrs	r3, r3, #31
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	0fdb      	lsrs	r3, r3, #31
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b20      	cmp	r3, #32
 8007432:	d10d      	bne.n	8007450 <USB_HC_Halt+0x82>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <USB_HC_Halt+0x82>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d002      	beq.n	800744c <USB_HC_Halt+0x7e>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d101      	bne.n	8007450 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	e0d8      	b.n	8007602 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <USB_HC_Halt+0x8e>
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d173      	bne.n	8007544 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	0151      	lsls	r1, r2, #5
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	440a      	add	r2, r1
 8007472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007476:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800747a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d14a      	bne.n	800751e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d133      	bne.n	80074fc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074b2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074d2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074e0:	d82e      	bhi.n	8007540 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074f8:	d0ec      	beq.n	80074d4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074fa:	e081      	b.n	8007600 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	440a      	add	r2, r1
 8007512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007516:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800751a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800751c:	e070      	b.n	8007600 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	440a      	add	r2, r1
 8007534:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800753c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800753e:	e05f      	b.n	8007600 <USB_HC_Halt+0x232>
            break;
 8007540:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007542:	e05d      	b.n	8007600 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	440a      	add	r2, r1
 800755a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007562:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d133      	bne.n	80075dc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	69fa      	ldr	r2, [r7, #28]
 8007588:	440a      	add	r2, r1
 800758a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800758e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007592:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075b2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075c0:	d81d      	bhi.n	80075fe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d8:	d0ec      	beq.n	80075b4 <USB_HC_Halt+0x1e6>
 80075da:	e011      	b.n	8007600 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e000      	b.n	8007600 <USB_HC_Halt+0x232>
          break;
 80075fe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3724      	adds	r7, #36	@ 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b088      	sub	sp, #32
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff f82b 	bl	800667e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007628:	2110      	movs	r1, #16
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff f884 	bl	8006738 <USB_FlushTxFifo>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f8ae 	bl	800679c <USB_FlushRxFifo>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	e01f      	b.n	8007690 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007666:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800766e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007676:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007684:	461a      	mov	r2, r3
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3301      	adds	r3, #1
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	2b0f      	cmp	r3, #15
 8007694:	d9dc      	bls.n	8007650 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007696:	2300      	movs	r3, #0
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	e034      	b.n	8007706 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076b2:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076ba:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076c2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d0:	461a      	mov	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3301      	adds	r3, #1
 80076da:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076e2:	d80c      	bhi.n	80076fe <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076fa:	d0ec      	beq.n	80076d6 <USB_StopHost+0xc8>
 80076fc:	e000      	b.n	8007700 <USB_StopHost+0xf2>
        break;
 80076fe:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	3301      	adds	r3, #1
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	2b0f      	cmp	r3, #15
 800770a:	d9c7      	bls.n	800769c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007712:	461a      	mov	r2, r3
 8007714:	f04f 33ff 	mov.w	r3, #4294967295
 8007718:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f04f 32ff 	mov.w	r2, #4294967295
 8007720:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fe ff9a 	bl	800665c <USB_EnableGlobalInt>

  return ret;
 8007728:	7ffb      	ldrb	r3, [r7, #31]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3720      	adds	r7, #32
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8007732:	b590      	push	{r4, r7, lr}
 8007734:	b089      	sub	sp, #36	@ 0x24
 8007736:	af04      	add	r7, sp, #16
 8007738:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 800773a:	2302      	movs	r3, #2
 800773c:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8007742:	23ff      	movs	r3, #255	@ 0xff
 8007744:	2203      	movs	r2, #3
 8007746:	2101      	movs	r1, #1
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fbb3 	bl	8007eb4 <USBH_FindInterface>
 800774e:	4603      	mov	r3, r0
 8007750:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2bff      	cmp	r3, #255	@ 0xff
 8007756:	d102      	bne.n	800775e <USBH_MIDI_InterfaceInit+0x2c>
	{
	  USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.");
	  USBH_DbgLog (phost->pActiveClass->Name);
	  status = USBH_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	73fb      	strb	r3, [r7, #15]
 800775c:	e0fc      	b.n	8007958 <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb8a 	bl	8007e7c <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 444c 	ldr.w	r4, [r3, #1100]	@ 0x44c
 800776e:	201c      	movs	r0, #28
 8007770:	f002 fa6e 	bl	8009c50 <malloc>
 8007774:	4603      	mov	r3, r0
 8007776:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 8007788:	2302      	movs	r3, #2
 800778a:	e0e6      	b.n	800795a <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 800778c:	221c      	movs	r2, #28
 800778e:	2100      	movs	r1, #0
 8007790:	68b8      	ldr	r0, [r7, #8]
 8007792:	f002 fd25 	bl	800a1e0 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800779c:	4619      	mov	r1, r3
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	231a      	movs	r3, #26
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	b25b      	sxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da1c      	bge.n	80077ee <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80077ba:	4619      	mov	r1, r3
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	231a      	movs	r3, #26
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80077ca:	781a      	ldrb	r2, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80077d6:	4619      	mov	r1, r3
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	231a      	movs	r3, #26
 80077dc:	fb01 f303 	mul.w	r3, r1, r3
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80077e6:	881a      	ldrh	r2, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	811a      	strh	r2, [r3, #8]
 80077ec:	e01b      	b.n	8007826 <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80077f4:	4619      	mov	r1, r3
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	231a      	movs	r3, #26
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	4413      	add	r3, r2
 8007800:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007804:	781a      	ldrb	r2, [r3, #0]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007810:	4619      	mov	r1, r3
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	231a      	movs	r3, #26
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007820:	881a      	ldrh	r2, [r3, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800782c:	4619      	mov	r1, r3
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	231a      	movs	r3, #26
 8007832:	fb01 f303 	mul.w	r3, r1, r3
 8007836:	4413      	add	r3, r2
 8007838:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	b25b      	sxtb	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	da1c      	bge.n	800787e <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800784a:	4619      	mov	r1, r3
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	231a      	movs	r3, #26
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007866:	4619      	mov	r1, r3
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	231a      	movs	r3, #26
 800786c:	fb01 f303 	mul.w	r3, r1, r3
 8007870:	4413      	add	r3, r2
 8007872:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007876:	881a      	ldrh	r2, [r3, #0]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	811a      	strh	r2, [r3, #8]
 800787c:	e01b      	b.n	80078b6 <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007884:	4619      	mov	r1, r3
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	231a      	movs	r3, #26
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	4413      	add	r3, r2
 8007890:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80078a0:	4619      	mov	r1, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	231a      	movs	r3, #26
 80078a6:	fb01 f303 	mul.w	r3, r1, r3
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80078b0:	881a      	ldrh	r2, [r3, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	78db      	ldrb	r3, [r3, #3]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fe88 	bl	80095d2 <USBH_AllocPipe>
 80078c2:	4603      	mov	r3, r0
 80078c4:	461a      	mov	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	791b      	ldrb	r3, [r3, #4]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fe7e 	bl	80095d2 <USBH_AllocPipe>
 80078d6:	4603      	mov	r3, r0
 80078d8:	461a      	mov	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	7899      	ldrb	r1, [r3, #2]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	78d8      	ldrb	r0, [r3, #3]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	88d2      	ldrh	r2, [r2, #6]
 80078f6:	9202      	str	r2, [sp, #8]
 80078f8:	2202      	movs	r2, #2
 80078fa:	9201      	str	r2, [sp, #4]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4623      	mov	r3, r4
 8007900:	4602      	mov	r2, r0
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fe36 	bl	8009574 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	7859      	ldrb	r1, [r3, #1]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	7918      	ldrb	r0, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	8912      	ldrh	r2, [r2, #8]
 8007920:	9202      	str	r2, [sp, #8]
 8007922:	2202      	movs	r2, #2
 8007924:	9201      	str	r2, [sp, #4]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	4623      	mov	r3, r4
 800792a:	4602      	mov	r2, r0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f001 fe21 	bl	8009574 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2200      	movs	r2, #0
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f002 f91a 	bl	8009b7a <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	789b      	ldrb	r3, [r3, #2]
 800794a:	2200      	movs	r2, #0
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f002 f913 	bl	8009b7a <USBH_LL_SetToggle>
		status = USBH_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8007958:	7bfb      	ldrb	r3, [r7, #15]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	bd90      	pop	{r4, r7, pc}

08007962 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	789b      	ldrb	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00e      	beq.n	800799a <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	789b      	ldrb	r3, [r3, #2]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fe15 	bl	80095b2 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	789b      	ldrb	r3, [r3, #2]
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 fe41 	bl	8009616 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fe02 	bl	80095b2 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	785b      	ldrb	r3, [r3, #1]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 fe2e 	bl	8009616 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f002 f943 	bl	8009c60 <free>
		phost->pActiveClass->pData = 0;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80079e0:	2200      	movs	r2, #0
 80079e2:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80079fc:	2102      	movs	r1, #2
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3

	return USBH_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d010      	beq.n	8007a50 <USBH_MIDI_Process+0x44>
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	dc1b      	bgt.n	8007a6a <USBH_MIDI_Process+0x5e>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <USBH_MIDI_Process+0x30>
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d003      	beq.n	8007a42 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8007a3a:	e016      	b.n	8007a6a <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
		break;
 8007a40:	e016      	b.n	8007a70 <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f86b 	bl	8007b1e <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f8d9 	bl	8007c00 <MIDI_ProcessReception>
		break;
 8007a4e:	e00f      	b.n	8007a70 <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 8007a50:	2100      	movs	r1, #0
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f808 	bl	8008a68 <USBH_ClrFeature>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
		break;
 8007a68:	e001      	b.n	8007a6e <USBH_MIDI_Process+0x62>
		break;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <USBH_MIDI_Process+0x64>
		break;
 8007a6e:	bf00      	nop

	}

	return status;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBH_MIDI_GetLastReceivedDataSize>:
 * @brief  This function return last recieved data size
 * @param  None
 * @retval None
 */
uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	60fb      	str	r3, [r7, #12]

	if(phost->gState == HOST_CLASS)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b0b      	cmp	r3, #11
 8007aaa:	d108      	bne.n	8007abe <USBH_MIDI_GetLastReceivedDataSize+0x2e>
	{
		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 ffae 	bl	8009a14 <USBH_LL_GetLastXferSize>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	e000      	b.n	8007ac0 <USBH_MIDI_GetLastReceivedDataSize+0x30>
	}
	else
	{
		return 0;
 8007abe:	2300      	movs	r3, #0
	}
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <USBH_MIDI_Receive+0x2c>
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d10d      	bne.n	8007b10 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2201      	movs	r2, #1
 8007b04:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	2203      	movs	r2, #3
 8007b0a:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	371c      	adds	r7, #28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af02      	add	r7, sp, #8
 8007b24:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	7e1b      	ldrb	r3, [r3, #24]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d002      	beq.n	8007b42 <MIDI_ProcessTransmission+0x24>
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d021      	beq.n	8007b84 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8007b40:	e05a      	b.n	8007bf8 <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8a9a      	ldrh	r2, [r3, #20]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d90b      	bls.n	8007b66 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68d9      	ldr	r1, [r3, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	88da      	ldrh	r2, [r3, #6]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	789b      	ldrb	r3, [r3, #2]
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	9000      	str	r0, [sp, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 fcc5 	bl	80094ee <USBH_BulkSendData>
 8007b64:	e00a      	b.n	8007b7c <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	68d9      	ldr	r1, [r3, #12]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8a9a      	ldrh	r2, [r3, #20]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	789b      	ldrb	r3, [r3, #2]
 8007b72:	2001      	movs	r0, #1
 8007b74:	9000      	str	r0, [sp, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fcb9 	bl	80094ee <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	761a      	strb	r2, [r3, #24]
		break;
 8007b82:	e039      	b.n	8007bf8 <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	789b      	ldrb	r3, [r3, #2]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 ffd4 	bl	8009b38 <USBH_LL_GetURBState>
 8007b90:	4603      	mov	r3, r0
 8007b92:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d127      	bne.n	8007bea <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8a9a      	ldrh	r2, [r3, #20]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	88db      	ldrh	r3, [r3, #6]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d90f      	bls.n	8007bc6 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8a9a      	ldrh	r2, [r3, #20]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	88db      	ldrh	r3, [r3, #6]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	88d2      	ldrh	r2, [r2, #6]
 8007bbe:	441a      	add	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	60da      	str	r2, [r3, #12]
 8007bc4:	e002      	b.n	8007bcc <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8a9b      	ldrh	r3, [r3, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	761a      	strb	r2, [r3, #24]
		break;
 8007bda:	e00c      	b.n	8007bf6 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f866 	bl	8007cb4 <USBH_MIDI_TransmitCallback>
		break;
 8007be8:	e005      	b.n	8007bf6 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d102      	bne.n	8007bf6 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	761a      	strb	r2, [r3, #24]
		break;
 8007bf6:	bf00      	nop
	}
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	7e5b      	ldrb	r3, [r3, #25]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d002      	beq.n	8007c24 <MIDI_ProcessReception+0x24>
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d00d      	beq.n	8007c3e <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8007c22:	e043      	b.n	8007cac <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6919      	ldr	r1, [r3, #16]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	891a      	ldrh	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 fc81 	bl	8009538 <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2204      	movs	r2, #4
 8007c3a:	765a      	strb	r2, [r3, #25]
		break;
 8007c3c:	e036      	b.n	8007cac <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	785b      	ldrb	r3, [r3, #1]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 ff77 	bl	8009b38 <USBH_LL_GetURBState>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d12a      	bne.n	8007caa <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f001 feda 	bl	8009a14 <USBH_LL_GetLastXferSize>
 8007c60:	4603      	mov	r3, r0
 8007c62:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8adb      	ldrh	r3, [r3, #22]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dd15      	ble.n	8007c9e <MIDI_ProcessReception+0x9e>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	891b      	ldrh	r3, [r3, #8]
 8007c76:	893a      	ldrh	r2, [r7, #8]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d910      	bls.n	8007c9e <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8ada      	ldrh	r2, [r3, #22]
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	893b      	ldrh	r3, [r7, #8]
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2203      	movs	r2, #3
 8007c9a:	765a      	strb	r2, [r3, #25]
		break;
 8007c9c:	e005      	b.n	8007caa <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7f8 feff 	bl	8000aa8 <USBH_MIDI_ReceiveCallback>
		break;
 8007caa:	bf00      	nop
	}
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	e029      	b.n	8007d34 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	79fa      	ldrb	r2, [r7, #7]
 8007ce4:	f883 249c 	strb.w	r2, [r3, #1180]	@ 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
  phost->ClassNumber = 0U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f81f 	bl	8007d3c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f001 fdbd 	bl	80098ac <USBH_LL_Init>

  return USBH_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e00a      	b.n	8007d64 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3301      	adds	r3, #1
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d9f1      	bls.n	8007d4e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	e009      	b.n	8007d84 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8a:	d3f1      	bcc.n	8007d70 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

  phost->Control.state = CTRL_SETUP;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2240      	movs	r2, #64	@ 0x40
 8007db0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	331c      	adds	r3, #28
 8007ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f002 f9fc 	bl	800a1e0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f002 f9f3 	bl	800a1e0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007e00:	2212      	movs	r2, #18
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f002 f9eb 	bl	800a1e0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e10:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f002 f9e2 	bl	800a1e0 <memset>

  return USBH_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10f      	bne.n	8007e64 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8007e4a:	1c59      	adds	r1, r3, #1
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	f8c2 1450 	str.w	r1, [r2, #1104]	@ 0x450
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
 8007e62:	e004      	b.n	8007e6e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e64:	2302      	movs	r3, #2
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e001      	b.n	8007e6e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	460b      	mov	r3, r1
 8007e86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d204      	bcs.n	8007ea2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007ea0:	e001      	b.n	8007ea6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	70fb      	strb	r3, [r7, #3]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70bb      	strb	r3, [r7, #2]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007edc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ede:	e025      	b.n	8007f2c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	221a      	movs	r2, #26
 8007ee4:	fb02 f303 	mul.w	r3, r2, r3
 8007ee8:	3308      	adds	r3, #8
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	3302      	adds	r3, #2
 8007ef0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	795b      	ldrb	r3, [r3, #5]
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d002      	beq.n	8007f02 <USBH_FindInterface+0x4e>
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	2bff      	cmp	r3, #255	@ 0xff
 8007f00:	d111      	bne.n	8007f26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f06:	78ba      	ldrb	r2, [r7, #2]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d002      	beq.n	8007f12 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f0c:	78bb      	ldrb	r3, [r7, #2]
 8007f0e:	2bff      	cmp	r3, #255	@ 0xff
 8007f10:	d109      	bne.n	8007f26 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f16:	787a      	ldrb	r2, [r7, #1]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d002      	beq.n	8007f22 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f1c:	787b      	ldrb	r3, [r7, #1]
 8007f1e:	2bff      	cmp	r3, #255	@ 0xff
 8007f20:	d101      	bne.n	8007f26 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	e006      	b.n	8007f34 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d9d6      	bls.n	8007ee0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f32:	23ff      	movs	r3, #255	@ 0xff
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f001 fceb 	bl	8009924 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007f4e:	2101      	movs	r1, #1
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 fe04 	bl	8009b5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af04      	add	r7, sp, #16
 8007f66:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d102      	bne.n	8007f82 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2203      	movs	r2, #3
 8007f80:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b0b      	cmp	r3, #11
 8007f8a:	f200 81bd 	bhi.w	8008308 <USBH_Process+0x3a8>
 8007f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f94 <USBH_Process+0x34>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fc5 	.word	0x08007fc5
 8007f98:	08007ff7 	.word	0x08007ff7
 8007f9c:	0800805f 	.word	0x0800805f
 8007fa0:	080082a3 	.word	0x080082a3
 8007fa4:	08008309 	.word	0x08008309
 8007fa8:	080080ff 	.word	0x080080ff
 8007fac:	08008249 	.word	0x08008249
 8007fb0:	08008135 	.word	0x08008135
 8007fb4:	08008155 	.word	0x08008155
 8007fb8:	08008173 	.word	0x08008173
 8007fbc:	080081b7 	.word	0x080081b7
 8007fc0:	0800828b 	.word	0x0800828b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 819d 	beq.w	800830c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007fd8:	20c8      	movs	r0, #200	@ 0xc8
 8007fda:	f001 fe01 	bl	8009be0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fcfd 	bl	80099de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ff4:	e18a      	b.n	800830c <USBH_Process+0x3ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d107      	bne.n	8008010 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800800e:	e18c      	b.n	800832a <USBH_Process+0x3ca>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8008016:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800801a:	d914      	bls.n	8008046 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008022:	3301      	adds	r3, #1
 8008024:	b2da      	uxtb	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008032:	2b03      	cmp	r3, #3
 8008034:	d903      	bls.n	800803e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	220d      	movs	r2, #13
 800803a:	701a      	strb	r2, [r3, #0]
      break;
 800803c:	e175      	b.n	800832a <USBH_Process+0x3ca>
            phost->gState = HOST_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
      break;
 8008044:	e171      	b.n	800832a <USBH_Process+0x3ca>
          phost->Timeout += 10U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800804c:	f103 020a 	add.w	r2, r3, #10
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
          USBH_Delay(10U);
 8008056:	200a      	movs	r0, #10
 8008058:	f001 fdc2 	bl	8009be0 <USBH_Delay>
      break;
 800805c:	e165      	b.n	800832a <USBH_Process+0x3ca>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800806e:	2104      	movs	r1, #4
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008074:	2064      	movs	r0, #100	@ 0x64
 8008076:	f001 fdb3 	bl	8009be0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fc88 	bl	8009990 <USBH_LL_GetSpeed>
 8008080:	4603      	mov	r3, r0
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2205      	movs	r2, #5
 800808e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 fa9d 	bl	80095d2 <USBH_AllocPipe>
 8008098:	4603      	mov	r3, r0
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80080a0:	2180      	movs	r1, #128	@ 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 fa95 	bl	80095d2 <USBH_AllocPipe>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7919      	ldrb	r1, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80080c4:	9202      	str	r2, [sp, #8]
 80080c6:	2200      	movs	r2, #0
 80080c8:	9201      	str	r2, [sp, #4]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4603      	mov	r3, r0
 80080ce:	2280      	movs	r2, #128	@ 0x80
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fa4f 	bl	8009574 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7959      	ldrb	r1, [r3, #5]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080ea:	9202      	str	r2, [sp, #8]
 80080ec:	2200      	movs	r2, #0
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	4603      	mov	r3, r0
 80080f4:	2200      	movs	r2, #0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 fa3c 	bl	8009574 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080fc:	e115      	b.n	800832a <USBH_Process+0x3ca>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f918 	bl	8008334 <USBH_HandleEnum>
 8008104:	4603      	mov	r3, r0
 8008106:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 80ff 	bne.w	8008310 <USBH_Process+0x3b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008120:	2b01      	cmp	r3, #1
 8008122:	d103      	bne.n	800812c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2208      	movs	r2, #8
 8008128:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800812a:	e0f1      	b.n	8008310 <USBH_Process+0x3b0>
          phost->gState = HOST_INPUT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2207      	movs	r2, #7
 8008130:	701a      	strb	r2, [r3, #0]
      break;
 8008132:	e0ed      	b.n	8008310 <USBH_Process+0x3b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80ea 	beq.w	8008314 <USBH_Process+0x3b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008146:	2101      	movs	r1, #1
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2208      	movs	r2, #8
 8008150:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008152:	e0df      	b.n	8008314 <USBH_Process+0x3b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fc3c 	bl	80089da <USBH_SetCfg>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	f040 80d7 	bne.w	8008318 <USBH_Process+0x3b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2209      	movs	r2, #9
 800816e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008170:	e0d2      	b.n	8008318 <USBH_Process+0x3b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d016      	beq.n	80081ae <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008180:	2101      	movs	r1, #1
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fc4c 	bl	8008a20 <USBH_SetFeature>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	220a      	movs	r2, #10
 8008198:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800819a:	e0bf      	b.n	800831c <USBH_Process+0x3bc>
        else if (status == USBH_NOT_SUPPORTED)
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	f040 80bb 	bne.w	800831c <USBH_Process+0x3bc>
          phost->gState = HOST_CHECK_CLASS;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	220a      	movs	r2, #10
 80081aa:	701a      	strb	r2, [r3, #0]
      break;
 80081ac:	e0b6      	b.n	800831c <USBH_Process+0x3bc>
        phost->gState = HOST_CHECK_CLASS;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	220a      	movs	r2, #10
 80081b2:	701a      	strb	r2, [r3, #0]
      break;
 80081b4:	e0b2      	b.n	800831c <USBH_Process+0x3bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 80af 	beq.w	8008320 <USBH_Process+0x3c0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
 80081ce:	e018      	b.n	8008202 <USBH_Process+0x2a2>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80081d0:	7bfa      	ldrb	r2, [r7, #15]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	791a      	ldrb	r2, [r3, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d109      	bne.n	80081fc <USBH_Process+0x29c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80081e8:	7bfa      	ldrb	r2, [r7, #15]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 80081f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            break;
 80081fa:	e005      	b.n	8008208 <USBH_Process+0x2a8>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	3301      	adds	r3, #1
 8008200:	73fb      	strb	r3, [r7, #15]
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0e3      	beq.n	80081d0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d016      	beq.n	8008240 <USBH_Process+0x2e0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <USBH_Process+0x2d8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2206      	movs	r2, #6
 8008228:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008230:	2103      	movs	r1, #3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008236:	e073      	b.n	8008320 <USBH_Process+0x3c0>
            phost->gState = HOST_ABORT_STATE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	220d      	movs	r2, #13
 800823c:	701a      	strb	r2, [r3, #0]
      break;
 800823e:	e06f      	b.n	8008320 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220d      	movs	r2, #13
 8008244:	701a      	strb	r2, [r3, #0]
      break;
 8008246:	e06b      	b.n	8008320 <USBH_Process+0x3c0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d017      	beq.n	8008282 <USBH_Process+0x322>
      {
        status = phost->pActiveClass->Requests(phost);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
 800825e:	4603      	mov	r3, r0
 8008260:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <USBH_Process+0x312>
        {
          phost->gState = HOST_CLASS;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	220b      	movs	r2, #11
 800826e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008270:	e058      	b.n	8008324 <USBH_Process+0x3c4>
        else if (status == USBH_FAIL)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d154      	bne.n	8008324 <USBH_Process+0x3c4>
          phost->gState = HOST_ABORT_STATE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220d      	movs	r2, #13
 800827e:	701a      	strb	r2, [r3, #0]
      break;
 8008280:	e050      	b.n	8008324 <USBH_Process+0x3c4>
        phost->gState = HOST_ABORT_STATE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e04c      	b.n	8008324 <USBH_Process+0x3c4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d049      	beq.n	8008328 <USBH_Process+0x3c8>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
      }
      break;
 80082a0:	e042      	b.n	8008328 <USBH_Process+0x3c8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fd46 	bl	8007d3c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <USBH_Process+0x36e>
      {
        phost->pActiveClass->DeInit(phost);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
      }

      if (phost->pUser != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d005      	beq.n	80082e4 <USBH_Process+0x384>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80082de:	2105      	movs	r1, #5
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d107      	bne.n	8008300 <USBH_Process+0x3a0>
      {
        phost->device.is_ReEnumerated = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff fe21 	bl	8007f40 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082fe:	e014      	b.n	800832a <USBH_Process+0x3ca>
        (void)USBH_LL_Start(phost);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fb0f 	bl	8009924 <USBH_LL_Start>
      break;
 8008306:	e010      	b.n	800832a <USBH_Process+0x3ca>

    case HOST_ABORT_STATE:
    default :
      break;
 8008308:	bf00      	nop
 800830a:	e00e      	b.n	800832a <USBH_Process+0x3ca>
      break;
 800830c:	bf00      	nop
 800830e:	e00c      	b.n	800832a <USBH_Process+0x3ca>
      break;
 8008310:	bf00      	nop
 8008312:	e00a      	b.n	800832a <USBH_Process+0x3ca>
    break;
 8008314:	bf00      	nop
 8008316:	e008      	b.n	800832a <USBH_Process+0x3ca>
      break;
 8008318:	bf00      	nop
 800831a:	e006      	b.n	800832a <USBH_Process+0x3ca>
      break;
 800831c:	bf00      	nop
 800831e:	e004      	b.n	800832a <USBH_Process+0x3ca>
      break;
 8008320:	bf00      	nop
 8008322:	e002      	b.n	800832a <USBH_Process+0x3ca>
      break;
 8008324:	bf00      	nop
 8008326:	e000      	b.n	800832a <USBH_Process+0x3ca>
      break;
 8008328:	bf00      	nop
  }
  return USBH_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af04      	add	r7, sp, #16
 800833a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008340:	2301      	movs	r3, #1
 8008342:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b07      	cmp	r3, #7
 800834a:	f200 81bd 	bhi.w	80086c8 <USBH_HandleEnum+0x394>
 800834e:	a201      	add	r2, pc, #4	@ (adr r2, 8008354 <USBH_HandleEnum+0x20>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	08008375 	.word	0x08008375
 8008358:	0800842f 	.word	0x0800842f
 800835c:	08008499 	.word	0x08008499
 8008360:	08008523 	.word	0x08008523
 8008364:	0800858d 	.word	0x0800858d
 8008368:	080085fd 	.word	0x080085fd
 800836c:	08008643 	.word	0x08008643
 8008370:	08008689 	.word	0x08008689
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008374:	2108      	movs	r1, #8
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fa4c 	bl	8008814 <USBH_Get_DevDesc>
 800837c:	4603      	mov	r3, r0
 800837e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d12e      	bne.n	80083e4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	7919      	ldrb	r1, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80083aa:	9202      	str	r2, [sp, #8]
 80083ac:	2200      	movs	r2, #0
 80083ae:	9201      	str	r2, [sp, #4]
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	4603      	mov	r3, r0
 80083b4:	2280      	movs	r2, #128	@ 0x80
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 f8dc 	bl	8009574 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7959      	ldrb	r1, [r3, #5]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	9201      	str	r2, [sp, #4]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4603      	mov	r3, r0
 80083da:	2200      	movs	r2, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 f8c9 	bl	8009574 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083e2:	e173      	b.n	80086cc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	f040 8170 	bne.w	80086cc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083f2:	3301      	adds	r3, #1
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008402:	2b03      	cmp	r3, #3
 8008404:	d903      	bls.n	800840e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	220d      	movs	r2, #13
 800840a:	701a      	strb	r2, [r3, #0]
      break;
 800840c:	e15e      	b.n	80086cc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	795b      	ldrb	r3, [r3, #5]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f8fe 	bl	8009616 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 f8f8 	bl	8009616 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
      break;
 800842c:	e14e      	b.n	80086cc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800842e:	2112      	movs	r1, #18
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f9ef 	bl	8008814 <USBH_Get_DevDesc>
 8008436:	4603      	mov	r3, r0
 8008438:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008446:	e143      	b.n	80086d0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b03      	cmp	r3, #3
 800844c:	f040 8140 	bne.w	80086d0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008456:	3301      	adds	r3, #1
 8008458:	b2da      	uxtb	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008466:	2b03      	cmp	r3, #3
 8008468:	d903      	bls.n	8008472 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	220d      	movs	r2, #13
 800846e:	701a      	strb	r2, [r3, #0]
      break;
 8008470:	e12e      	b.n	80086d0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	795b      	ldrb	r3, [r3, #5]
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 f8cc 	bl	8009616 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 f8c6 	bl	8009616 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]
      break;
 8008496:	e11b      	b.n	80086d0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008498:	2101      	movs	r1, #1
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa79 	bl	8008992 <USBH_SetAddress>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d130      	bne.n	800850c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80084aa:	2002      	movs	r0, #2
 80084ac:	f001 fb98 	bl	8009be0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2203      	movs	r2, #3
 80084bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7919      	ldrb	r1, [r3, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084d2:	9202      	str	r2, [sp, #8]
 80084d4:	2200      	movs	r2, #0
 80084d6:	9201      	str	r2, [sp, #4]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	4603      	mov	r3, r0
 80084dc:	2280      	movs	r2, #128	@ 0x80
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 f848 	bl	8009574 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7959      	ldrb	r1, [r3, #5]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084f8:	9202      	str	r2, [sp, #8]
 80084fa:	2200      	movs	r2, #0
 80084fc:	9201      	str	r2, [sp, #4]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4603      	mov	r3, r0
 8008502:	2200      	movs	r2, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 f835 	bl	8009574 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800850a:	e0e3      	b.n	80086d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b03      	cmp	r3, #3
 8008510:	f040 80e0 	bne.w	80086d4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	220d      	movs	r2, #13
 8008518:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	705a      	strb	r2, [r3, #1]
      break;
 8008520:	e0d8      	b.n	80086d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008522:	2109      	movs	r1, #9
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9a1 	bl	800886c <USBH_Get_CfgDesc>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2204      	movs	r2, #4
 8008538:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800853a:	e0cd      	b.n	80086d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b03      	cmp	r3, #3
 8008540:	f040 80ca 	bne.w	80086d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800854a:	3301      	adds	r3, #1
 800854c:	b2da      	uxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800855a:	2b03      	cmp	r3, #3
 800855c:	d903      	bls.n	8008566 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	220d      	movs	r2, #13
 8008562:	701a      	strb	r2, [r3, #0]
      break;
 8008564:	e0b8      	b.n	80086d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	795b      	ldrb	r3, [r3, #5]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 f852 	bl	8009616 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	791b      	ldrb	r3, [r3, #4]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f84c 	bl	8009616 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
      break;
 800858a:	e0a5      	b.n	80086d8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f969 	bl	800886c <USBH_Get_CfgDesc>
 800859a:	4603      	mov	r3, r0
 800859c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d103      	bne.n	80085ac <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2205      	movs	r2, #5
 80085a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085aa:	e097      	b.n	80086dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	f040 8094 	bne.w	80086dc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085ba:	3301      	adds	r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d903      	bls.n	80085d6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	220d      	movs	r2, #13
 80085d2:	701a      	strb	r2, [r3, #0]
      break;
 80085d4:	e082      	b.n	80086dc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	795b      	ldrb	r3, [r3, #5]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f81a 	bl	8009616 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	791b      	ldrb	r3, [r3, #4]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 f814 	bl	8009616 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
      break;
 80085fa:	e06f      	b.n	80086dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008602:	2b00      	cmp	r3, #0
 8008604:	d019      	beq.n	800863a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008612:	23ff      	movs	r3, #255	@ 0xff
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f953 	bl	80088c0 <USBH_Get_StringDesc>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d103      	bne.n	800862c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2206      	movs	r2, #6
 8008628:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800862a:	e059      	b.n	80086e0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b03      	cmp	r3, #3
 8008630:	d156      	bne.n	80086e0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2206      	movs	r2, #6
 8008636:	705a      	strb	r2, [r3, #1]
      break;
 8008638:	e052      	b.n	80086e0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2206      	movs	r2, #6
 800863e:	705a      	strb	r2, [r3, #1]
      break;
 8008640:	e04e      	b.n	80086e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008648:	2b00      	cmp	r3, #0
 800864a:	d019      	beq.n	8008680 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008658:	23ff      	movs	r3, #255	@ 0xff
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f930 	bl	80088c0 <USBH_Get_StringDesc>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d103      	bne.n	8008672 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2207      	movs	r2, #7
 800866e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008670:	e038      	b.n	80086e4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d135      	bne.n	80086e4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2207      	movs	r2, #7
 800867c:	705a      	strb	r2, [r3, #1]
      break;
 800867e:	e031      	b.n	80086e4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2207      	movs	r2, #7
 8008684:	705a      	strb	r2, [r3, #1]
      break;
 8008686:	e02d      	b.n	80086e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800868e:	2b00      	cmp	r3, #0
 8008690:	d017      	beq.n	80086c2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800869e:	23ff      	movs	r3, #255	@ 0xff
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f90d 	bl	80088c0 <USBH_Get_StringDesc>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80086b4:	e018      	b.n	80086e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d115      	bne.n	80086e8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e012      	b.n	80086e8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
      break;
 80086c6:	e00f      	b.n	80086e8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80086c8:	bf00      	nop
 80086ca:	e00e      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086cc:	bf00      	nop
 80086ce:	e00c      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086d0:	bf00      	nop
 80086d2:	e00a      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086d4:	bf00      	nop
 80086d6:	e008      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086d8:	bf00      	nop
 80086da:	e006      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086dc:	bf00      	nop
 80086de:	e004      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086e0:	bf00      	nop
 80086e2:	e002      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086e4:	bf00      	nop
 80086e6:	e000      	b.n	80086ea <USBH_HandleEnum+0x3b6>
      break;
 80086e8:	bf00      	nop
  }
  return Status;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
  USBH_HandleSof(phost);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f804 	bl	8008736 <USBH_HandleSof>
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b0b      	cmp	r3, #11
 8008746:	d10a      	bne.n	800875e <USBH_HandleSof+0x28>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
  }
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008776:	bf00      	nop
}
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008792:	bf00      	nop
}
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 f8b4 	bl	800995a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	791b      	ldrb	r3, [r3, #4]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 ff0c 	bl	8009616 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	795b      	ldrb	r3, [r3, #5]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 ff06 	bl	8009616 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af02      	add	r7, sp, #8
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008820:	887b      	ldrh	r3, [r7, #2]
 8008822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008826:	d901      	bls.n	800882c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008828:	2303      	movs	r3, #3
 800882a:	e01b      	b.n	8008864 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008832:	887b      	ldrh	r3, [r7, #2]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4613      	mov	r3, r2
 8008838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f872 	bl	8008928 <USBH_GetDescriptor>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008854:	887a      	ldrh	r2, [r7, #2]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f929 	bl	8008ab0 <USBH_ParseDevDesc>
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	331c      	adds	r3, #28
 800887c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800887e:	887b      	ldrh	r3, [r7, #2]
 8008880:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008884:	d901      	bls.n	800888a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008886:	2303      	movs	r3, #3
 8008888:	e016      	b.n	80088b8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008894:	2100      	movs	r1, #0
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f846 	bl	8008928 <USBH_GetDescriptor>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d107      	bne.n	80088b6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80088a6:	887b      	ldrh	r3, [r7, #2]
 80088a8:	461a      	mov	r2, r3
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9af 	bl	8008c10 <USBH_ParseCfgDesc>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	461a      	mov	r2, r3
 80088cc:	460b      	mov	r3, r1
 80088ce:	72fb      	strb	r3, [r7, #11]
 80088d0:	4613      	mov	r3, r2
 80088d2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80088d4:	893b      	ldrh	r3, [r7, #8]
 80088d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088da:	d802      	bhi.n	80088e2 <USBH_Get_StringDesc+0x22>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e01c      	b.n	8008920 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80088ee:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80088f6:	893b      	ldrh	r3, [r7, #8]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	460b      	mov	r3, r1
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f000 f812 	bl	8008928 <USBH_GetDescriptor>
 8008904:	4603      	mov	r3, r0
 8008906:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d107      	bne.n	800891e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008914:	893a      	ldrh	r2, [r7, #8]
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fb8d 	bl	8009038 <USBH_ParseStringDesc>
  }

  return status;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	72fb      	strb	r3, [r7, #11]
 8008936:	4613      	mov	r3, r2
 8008938:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	789b      	ldrb	r3, [r3, #2]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d11c      	bne.n	800897c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008942:	7afb      	ldrb	r3, [r7, #11]
 8008944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008948:	b2da      	uxtb	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2206      	movs	r2, #6
 8008952:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	893a      	ldrh	r2, [r7, #8]
 8008958:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800895a:	893b      	ldrh	r3, [r7, #8]
 800895c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008964:	d104      	bne.n	8008970 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f240 4209 	movw	r2, #1033	@ 0x409
 800896c:	829a      	strh	r2, [r3, #20]
 800896e:	e002      	b.n	8008976 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8b3a      	ldrh	r2, [r7, #24]
 800897a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800897c:	8b3b      	ldrh	r3, [r7, #24]
 800897e:	461a      	mov	r2, r3
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fba5 	bl	80090d2 <USBH_CtlReq>
 8008988:	4603      	mov	r3, r0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	789b      	ldrb	r3, [r3, #2]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d10f      	bne.n	80089c6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2205      	movs	r2, #5
 80089b0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb81 	bl	80090d2 <USBH_CtlReq>
 80089d0:	4603      	mov	r3, r0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	789b      	ldrb	r3, [r3, #2]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d10e      	bne.n	8008a0c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2209      	movs	r2, #9
 80089f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	887a      	ldrh	r2, [r7, #2]
 80089fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fb5e 	bl	80090d2 <USBH_CtlReq>
 8008a16:	4603      	mov	r3, r0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	789b      	ldrb	r3, [r3, #2]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10f      	bne.n	8008a54 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2203      	movs	r2, #3
 8008a3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a54:	2200      	movs	r2, #0
 8008a56:	2100      	movs	r1, #0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb3a 	bl	80090d2 <USBH_CtlReq>
 8008a5e:	4603      	mov	r3, r0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	789b      	ldrb	r3, [r3, #2]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d10f      	bne.n	8008a9c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fb16 	bl	80090d2 <USBH_CtlReq>
 8008aa6:	4603      	mov	r3, r0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ac4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e094      	b.n	8008bfe <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	785a      	ldrb	r2, [r3, #1]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	3303      	adds	r3, #3
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	4313      	orrs	r3, r2
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	791a      	ldrb	r2, [r3, #4]
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	795a      	ldrb	r2, [r3, #5]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	799a      	ldrb	r2, [r3, #6]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	79da      	ldrb	r2, [r3, #7]
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d11b      	bne.n	8008b6a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	79db      	ldrb	r3, [r3, #7]
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	dc0f      	bgt.n	8008b5a <USBH_ParseDevDesc+0xaa>
 8008b3a:	2b08      	cmp	r3, #8
 8008b3c:	db0f      	blt.n	8008b5e <USBH_ParseDevDesc+0xae>
 8008b3e:	3b08      	subs	r3, #8
 8008b40:	4a32      	ldr	r2, [pc, #200]	@ (8008c0c <USBH_ParseDevDesc+0x15c>)
 8008b42:	fa22 f303 	lsr.w	r3, r2, r3
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bf14      	ite	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	2300      	moveq	r3, #0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <USBH_ParseDevDesc+0xb6>
 8008b58:	e001      	b.n	8008b5e <USBH_ParseDevDesc+0xae>
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d003      	beq.n	8008b66 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	2208      	movs	r2, #8
 8008b62:	71da      	strb	r2, [r3, #7]
        break;
 8008b64:	e000      	b.n	8008b68 <USBH_ParseDevDesc+0xb8>
        break;
 8008b66:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008b68:	e00e      	b.n	8008b88 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d107      	bne.n	8008b84 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	79db      	ldrb	r3, [r3, #7]
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d005      	beq.n	8008b88 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2208      	movs	r2, #8
 8008b80:	71da      	strb	r2, [r3, #7]
 8008b82:	e001      	b.n	8008b88 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008b84:	2303      	movs	r3, #3
 8008b86:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	2b08      	cmp	r3, #8
 8008b8c:	d936      	bls.n	8008bfc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3308      	adds	r3, #8
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	3309      	adds	r3, #9
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	330a      	adds	r3, #10
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	330b      	adds	r3, #11
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	330d      	adds	r3, #13
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	021b      	lsls	r3, r3, #8
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	7b9a      	ldrb	r2, [r3, #14]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	7bda      	ldrb	r2, [r3, #15]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	7c1a      	ldrb	r2, [r3, #16]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	7c5a      	ldrb	r2, [r3, #17]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	01000101 	.word	0x01000101

08008c10 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	@ 0x30
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c24:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e0da      	b.n	8008df8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b09      	cmp	r3, #9
 8008c4c:	d002      	beq.n	8008c54 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c50:	2209      	movs	r2, #9
 8008c52:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	785a      	ldrb	r2, [r3, #1]
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	3302      	adds	r3, #2
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	3303      	adds	r3, #3
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	4313      	orrs	r3, r2
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7e:	bf28      	it	cs
 8008c80:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	791a      	ldrb	r2, [r3, #4]
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	795a      	ldrb	r2, [r3, #5]
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	799a      	ldrb	r2, [r3, #6]
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	79da      	ldrb	r2, [r3, #7]
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	7a1a      	ldrb	r2, [r3, #8]
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	f240 809d 	bls.w	8008df4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008cba:	2309      	movs	r3, #9
 8008cbc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008cc2:	e081      	b.n	8008dc8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cc4:	f107 0316 	add.w	r3, r7, #22
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ccc:	f000 f9e7 	bl	800909e <USBH_GetNextDesc>
 8008cd0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d176      	bne.n	8008dc8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b09      	cmp	r3, #9
 8008ce0:	d002      	beq.n	8008ce8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	2209      	movs	r2, #9
 8008ce6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cec:	221a      	movs	r2, #26
 8008cee:	fb02 f303 	mul.w	r3, r2, r3
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	6a3a      	ldr	r2, [r7, #32]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f000 f87e 	bl	8008e00 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d0e:	e043      	b.n	8008d98 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d10:	f107 0316 	add.w	r3, r7, #22
 8008d14:	4619      	mov	r1, r3
 8008d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d18:	f000 f9c1 	bl	800909e <USBH_GetNextDesc>
 8008d1c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d138      	bne.n	8008d98 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	795b      	ldrb	r3, [r3, #5]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d113      	bne.n	8008d56 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d003      	beq.n	8008d3e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	799b      	ldrb	r3, [r3, #6]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d10b      	bne.n	8008d56 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	79db      	ldrb	r3, [r3, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <USBH_ParseCfgDesc+0x14e>
 8008d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b09      	cmp	r3, #9
 8008d4c:	d007      	beq.n	8008d5e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	2209      	movs	r2, #9
 8008d52:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d54:	e003      	b.n	8008d5e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	2207      	movs	r2, #7
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	e000      	b.n	8008d60 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d5e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d64:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008d68:	3201      	adds	r2, #1
 8008d6a:	00d2      	lsls	r2, r2, #3
 8008d6c:	211a      	movs	r1, #26
 8008d6e:	fb01 f303 	mul.w	r3, r1, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	3308      	adds	r3, #8
 8008d76:	6a3a      	ldr	r2, [r7, #32]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d80:	69b9      	ldr	r1, [r7, #24]
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f870 	bl	8008e68 <USBH_ParseEPDesc>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d92:	3301      	adds	r3, #1
 8008d94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	791b      	ldrb	r3, [r3, #4]
 8008d9c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d204      	bcs.n	8008dae <USBH_ParseCfgDesc+0x19e>
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	885a      	ldrh	r2, [r3, #2]
 8008da8:	8afb      	ldrh	r3, [r7, #22]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d8b0      	bhi.n	8008d10 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	791b      	ldrb	r3, [r3, #4]
 8008db2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d201      	bcs.n	8008dbe <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e01c      	b.n	8008df8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d805      	bhi.n	8008ddc <USBH_ParseCfgDesc+0x1cc>
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	885a      	ldrh	r2, [r3, #2]
 8008dd4:	8afb      	ldrh	r3, [r7, #22]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	f63f af74 	bhi.w	8008cc4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	2b0a      	cmp	r3, #10
 8008de2:	bf28      	it	cs
 8008de4:	230a      	movcs	r3, #10
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d201      	bcs.n	8008df4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e001      	b.n	8008df8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008df4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3730      	adds	r7, #48	@ 0x30
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781a      	ldrb	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785a      	ldrb	r2, [r3, #1]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	789a      	ldrb	r2, [r3, #2]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	78da      	ldrb	r2, [r3, #3]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	bf28      	it	cs
 8008e34:	2302      	movcs	r3, #2
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	795a      	ldrb	r2, [r3, #5]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	799a      	ldrb	r2, [r3, #6]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	79da      	ldrb	r2, [r3, #7]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	7a1a      	ldrb	r2, [r3, #8]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	721a      	strb	r2, [r3, #8]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	785a      	ldrb	r2, [r3, #1]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	789a      	ldrb	r2, [r3, #2]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	78da      	ldrb	r2, [r3, #3]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3305      	adds	r3, #5
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	799a      	ldrb	r2, [r3, #6]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	889b      	ldrh	r3, [r3, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eca:	d804      	bhi.n	8008ed6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ed4:	d901      	bls.n	8008eda <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d136      	bne.n	8008f52 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	78db      	ldrb	r3, [r3, #3]
 8008ee8:	f003 0303 	and.w	r3, r3, #3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d108      	bne.n	8008f02 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	889b      	ldrh	r3, [r3, #4]
 8008ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef8:	f240 8097 	bls.w	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008efc:	2303      	movs	r3, #3
 8008efe:	75fb      	strb	r3, [r7, #23]
 8008f00:	e093      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	78db      	ldrb	r3, [r3, #3]
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d107      	bne.n	8008f1e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	889b      	ldrh	r3, [r3, #4]
 8008f12:	2b40      	cmp	r3, #64	@ 0x40
 8008f14:	f240 8089 	bls.w	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	75fb      	strb	r3, [r7, #23]
 8008f1c:	e085      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	78db      	ldrb	r3, [r3, #3]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d005      	beq.n	8008f36 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	78db      	ldrb	r3, [r3, #3]
 8008f2e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d10a      	bne.n	8008f4c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	799b      	ldrb	r3, [r3, #6]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <USBH_ParseEPDesc+0xde>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	799b      	ldrb	r3, [r3, #6]
 8008f42:	2b10      	cmp	r3, #16
 8008f44:	d970      	bls.n	8009028 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008f46:	2303      	movs	r3, #3
 8008f48:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f4a:	e06d      	b.n	8009028 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	75fb      	strb	r3, [r7, #23]
 8008f50:	e06b      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d13c      	bne.n	8008fd6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	78db      	ldrb	r3, [r3, #3]
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d005      	beq.n	8008f74 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	78db      	ldrb	r3, [r3, #3]
 8008f6c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d106      	bne.n	8008f82 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	889b      	ldrh	r3, [r3, #4]
 8008f78:	2b40      	cmp	r3, #64	@ 0x40
 8008f7a:	d956      	bls.n	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008f80:	e053      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	78db      	ldrb	r3, [r3, #3]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d10e      	bne.n	8008fac <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	799b      	ldrb	r3, [r3, #6]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d007      	beq.n	8008fa6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d803      	bhi.n	8008fa6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008fa2:	2b40      	cmp	r3, #64	@ 0x40
 8008fa4:	d941      	bls.n	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	75fb      	strb	r3, [r7, #23]
 8008faa:	e03e      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	78db      	ldrb	r3, [r3, #3]
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d10b      	bne.n	8008fd0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	799b      	ldrb	r3, [r3, #6]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d004      	beq.n	8008fca <USBH_ParseEPDesc+0x162>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	889b      	ldrh	r3, [r3, #4]
 8008fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fc8:	d32f      	bcc.n	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	75fb      	strb	r3, [r7, #23]
 8008fce:	e02c      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	75fb      	strb	r3, [r7, #23]
 8008fd4:	e029      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d120      	bne.n	8009022 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	78db      	ldrb	r3, [r3, #3]
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d106      	bne.n	8008ffa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	889b      	ldrh	r3, [r3, #4]
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d01a      	beq.n	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	75fb      	strb	r3, [r7, #23]
 8008ff8:	e017      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	78db      	ldrb	r3, [r3, #3]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b03      	cmp	r3, #3
 8009004:	d10a      	bne.n	800901c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	799b      	ldrb	r3, [r3, #6]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <USBH_ParseEPDesc+0x1ae>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	889b      	ldrh	r3, [r3, #4]
 8009012:	2b08      	cmp	r3, #8
 8009014:	d909      	bls.n	800902a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009016:	2303      	movs	r3, #3
 8009018:	75fb      	strb	r3, [r7, #23]
 800901a:	e006      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800901c:	2303      	movs	r3, #3
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	e003      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009022:	2303      	movs	r3, #3
 8009024:	75fb      	strb	r3, [r7, #23]
 8009026:	e000      	b.n	800902a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009028:	bf00      	nop
  }

  return status;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
}
 800902c:	4618      	mov	r0, r3
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3301      	adds	r3, #1
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b03      	cmp	r3, #3
 800904e:	d120      	bne.n	8009092 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	1e9a      	subs	r2, r3, #2
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	4293      	cmp	r3, r2
 800905a:	bf28      	it	cs
 800905c:	4613      	movcs	r3, r2
 800905e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3302      	adds	r3, #2
 8009064:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009066:	2300      	movs	r3, #0
 8009068:	82fb      	strh	r3, [r7, #22]
 800906a:	e00b      	b.n	8009084 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800906c:	8afb      	ldrh	r3, [r7, #22]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3301      	adds	r3, #1
 800907c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800907e:	8afb      	ldrh	r3, [r7, #22]
 8009080:	3302      	adds	r3, #2
 8009082:	82fb      	strh	r3, [r7, #22]
 8009084:	8afa      	ldrh	r2, [r7, #22]
 8009086:	8abb      	ldrh	r3, [r7, #20]
 8009088:	429a      	cmp	r2, r3
 800908a:	d3ef      	bcc.n	800906c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
  }
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	4413      	add	r3, r2
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4413      	add	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090c4:	68fb      	ldr	r3, [r7, #12]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	4613      	mov	r3, r2
 80090de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80090e0:	2301      	movs	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	789b      	ldrb	r3, [r3, #2]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d002      	beq.n	80090f2 <USBH_CtlReq+0x20>
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d00f      	beq.n	8009110 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80090f0:	e027      	b.n	8009142 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	88fa      	ldrh	r2, [r7, #6]
 80090fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2202      	movs	r2, #2
 8009108:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
      break;
 800910e:	e018      	b.n	8009142 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 f81b 	bl	800914c <USBH_HandleControl>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <USBH_CtlReq+0x54>
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	2b03      	cmp	r3, #3
 8009124:	d106      	bne.n	8009134 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	761a      	strb	r2, [r3, #24]
      break;
 8009132:	e005      	b.n	8009140 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	2b02      	cmp	r3, #2
 8009138:	d102      	bne.n	8009140 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	709a      	strb	r2, [r3, #2]
      break;
 8009140:	bf00      	nop
  }
  return status;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3718      	adds	r7, #24
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009158:	2300      	movs	r3, #0
 800915a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	7e1b      	ldrb	r3, [r3, #24]
 8009160:	3b01      	subs	r3, #1
 8009162:	2b0a      	cmp	r3, #10
 8009164:	f200 8156 	bhi.w	8009414 <USBH_HandleControl+0x2c8>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBH_HandleControl+0x24>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	0800919d 	.word	0x0800919d
 8009174:	080091b7 	.word	0x080091b7
 8009178:	08009221 	.word	0x08009221
 800917c:	08009247 	.word	0x08009247
 8009180:	0800927f 	.word	0x0800927f
 8009184:	080092a9 	.word	0x080092a9
 8009188:	080092fb 	.word	0x080092fb
 800918c:	0800931d 	.word	0x0800931d
 8009190:	08009359 	.word	0x08009359
 8009194:	0800937f 	.word	0x0800937f
 8009198:	080093bd 	.word	0x080093bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f103 0110 	add.w	r1, r3, #16
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	795b      	ldrb	r3, [r3, #5]
 80091a6:	461a      	mov	r2, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f943 	bl	8009434 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2202      	movs	r2, #2
 80091b2:	761a      	strb	r2, [r3, #24]
      break;
 80091b4:	e139      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	795b      	ldrb	r3, [r3, #5]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fcbb 	bl	8009b38 <USBH_LL_GetURBState>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d11e      	bne.n	800920a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7c1b      	ldrb	r3, [r3, #16]
 80091d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80091d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	8adb      	ldrh	r3, [r3, #22]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80091de:	7b7b      	ldrb	r3, [r7, #13]
 80091e0:	2b80      	cmp	r3, #128	@ 0x80
 80091e2:	d103      	bne.n	80091ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2203      	movs	r2, #3
 80091e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091ea:	e115      	b.n	8009418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2205      	movs	r2, #5
 80091f0:	761a      	strb	r2, [r3, #24]
      break;
 80091f2:	e111      	b.n	8009418 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80091f4:	7b7b      	ldrb	r3, [r7, #13]
 80091f6:	2b80      	cmp	r3, #128	@ 0x80
 80091f8:	d103      	bne.n	8009202 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2209      	movs	r2, #9
 80091fe:	761a      	strb	r2, [r3, #24]
      break;
 8009200:	e10a      	b.n	8009418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2207      	movs	r2, #7
 8009206:	761a      	strb	r2, [r3, #24]
      break;
 8009208:	e106      	b.n	8009418 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800920a:	7bbb      	ldrb	r3, [r7, #14]
 800920c:	2b04      	cmp	r3, #4
 800920e:	d003      	beq.n	8009218 <USBH_HandleControl+0xcc>
 8009210:	7bbb      	ldrb	r3, [r7, #14]
 8009212:	2b02      	cmp	r3, #2
 8009214:	f040 8100 	bne.w	8009418 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	220b      	movs	r2, #11
 800921c:	761a      	strb	r2, [r3, #24]
      break;
 800921e:	e0fb      	b.n	8009418 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8009226:	b29a      	uxth	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6899      	ldr	r1, [r3, #8]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	899a      	ldrh	r2, [r3, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	791b      	ldrb	r3, [r3, #4]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f93a 	bl	80094b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2204      	movs	r2, #4
 8009242:	761a      	strb	r2, [r3, #24]
      break;
 8009244:	e0f1      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc73 	bl	8009b38 <USBH_LL_GetURBState>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d102      	bne.n	8009262 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2209      	movs	r2, #9
 8009260:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009262:	7bbb      	ldrb	r3, [r7, #14]
 8009264:	2b05      	cmp	r3, #5
 8009266:	d102      	bne.n	800926e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009268:	2303      	movs	r3, #3
 800926a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800926c:	e0d6      	b.n	800941c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b04      	cmp	r3, #4
 8009272:	f040 80d3 	bne.w	800941c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	220b      	movs	r2, #11
 800927a:	761a      	strb	r2, [r3, #24]
      break;
 800927c:	e0ce      	b.n	800941c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6899      	ldr	r1, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	899a      	ldrh	r2, [r3, #12]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	795b      	ldrb	r3, [r3, #5]
 800928a:	2001      	movs	r0, #1
 800928c:	9000      	str	r0, [sp, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8ea 	bl	8009468 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2206      	movs	r2, #6
 80092a4:	761a      	strb	r2, [r3, #24]
      break;
 80092a6:	e0c0      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	795b      	ldrb	r3, [r3, #5]
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fc42 	bl	8009b38 <USBH_LL_GetURBState>
 80092b4:	4603      	mov	r3, r0
 80092b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d103      	bne.n	80092c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2207      	movs	r2, #7
 80092c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092c4:	e0ac      	b.n	8009420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b05      	cmp	r3, #5
 80092ca:	d105      	bne.n	80092d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	220c      	movs	r2, #12
 80092d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80092d2:	2303      	movs	r3, #3
 80092d4:	73fb      	strb	r3, [r7, #15]
      break;
 80092d6:	e0a3      	b.n	8009420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d103      	bne.n	80092e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	761a      	strb	r2, [r3, #24]
      break;
 80092e4:	e09c      	b.n	8009420 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	f040 8099 	bne.w	8009420 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	220b      	movs	r2, #11
 80092f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80092f4:	2302      	movs	r3, #2
 80092f6:	73fb      	strb	r3, [r7, #15]
      break;
 80092f8:	e092      	b.n	8009420 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8d5 	bl	80094b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800930e:	b29a      	uxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2208      	movs	r2, #8
 8009318:	761a      	strb	r2, [r3, #24]

      break;
 800931a:	e086      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	791b      	ldrb	r3, [r3, #4]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fc08 	bl	8009b38 <USBH_LL_GetURBState>
 8009328:	4603      	mov	r3, r0
 800932a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	220d      	movs	r2, #13
 8009336:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800933c:	e072      	b.n	8009424 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b04      	cmp	r3, #4
 8009342:	d103      	bne.n	800934c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	220b      	movs	r2, #11
 8009348:	761a      	strb	r2, [r3, #24]
      break;
 800934a:	e06b      	b.n	8009424 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	2b05      	cmp	r3, #5
 8009350:	d168      	bne.n	8009424 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009352:	2303      	movs	r3, #3
 8009354:	73fb      	strb	r3, [r7, #15]
      break;
 8009356:	e065      	b.n	8009424 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	795b      	ldrb	r3, [r3, #5]
 800935c:	2201      	movs	r2, #1
 800935e:	9200      	str	r2, [sp, #0]
 8009360:	2200      	movs	r2, #0
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f87f 	bl	8009468 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	220a      	movs	r2, #10
 800937a:	761a      	strb	r2, [r3, #24]
      break;
 800937c:	e055      	b.n	800942a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	795b      	ldrb	r3, [r3, #5]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fbd7 	bl	8009b38 <USBH_LL_GetURBState>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d105      	bne.n	80093a0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	220d      	movs	r2, #13
 800939c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800939e:	e043      	b.n	8009428 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d103      	bne.n	80093ae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2209      	movs	r2, #9
 80093aa:	761a      	strb	r2, [r3, #24]
      break;
 80093ac:	e03c      	b.n	8009428 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d139      	bne.n	8009428 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	220b      	movs	r2, #11
 80093b8:	761a      	strb	r2, [r3, #24]
      break;
 80093ba:	e035      	b.n	8009428 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7e5b      	ldrb	r3, [r3, #25]
 80093c0:	3301      	adds	r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	765a      	strb	r2, [r3, #25]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7e5b      	ldrb	r3, [r3, #25]
 80093cc:	2b0f      	cmp	r3, #15
 80093ce:	d806      	bhi.n	80093de <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80093dc:	e025      	b.n	800942a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80093e4:	2106      	movs	r1, #6
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	795b      	ldrb	r3, [r3, #5]
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f90d 	bl	8009616 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	791b      	ldrb	r3, [r3, #4]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f907 	bl	8009616 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800940e:	2302      	movs	r3, #2
 8009410:	73fb      	strb	r3, [r7, #15]
      break;
 8009412:	e00a      	b.n	800942a <USBH_HandleControl+0x2de>

    default:
      break;
 8009414:	bf00      	nop
 8009416:	e008      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009418:	bf00      	nop
 800941a:	e006      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 800941c:	bf00      	nop
 800941e:	e004      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009420:	bf00      	nop
 8009422:	e002      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009424:	bf00      	nop
 8009426:	e000      	b.n	800942a <USBH_HandleControl+0x2de>
      break;
 8009428:	bf00      	nop
  }

  return status;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af04      	add	r7, sp, #16
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009442:	79f9      	ldrb	r1, [r7, #7]
 8009444:	2300      	movs	r3, #0
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	2308      	movs	r3, #8
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	2200      	movs	r2, #0
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 fb3c 	bl	8009ad6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af04      	add	r7, sp, #16
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	460b      	mov	r3, r1
 8009478:	80fb      	strh	r3, [r7, #6]
 800947a:	4613      	mov	r3, r2
 800947c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800948c:	7979      	ldrb	r1, [r7, #5]
 800948e:	7e3b      	ldrb	r3, [r7, #24]
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	9302      	str	r3, [sp, #8]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	2301      	movs	r3, #1
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	2300      	movs	r3, #0
 80094a0:	2200      	movs	r2, #0
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fb17 	bl	8009ad6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b088      	sub	sp, #32
 80094b6:	af04      	add	r7, sp, #16
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	4611      	mov	r1, r2
 80094be:	461a      	mov	r2, r3
 80094c0:	460b      	mov	r3, r1
 80094c2:	80fb      	strh	r3, [r7, #6]
 80094c4:	4613      	mov	r3, r2
 80094c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094c8:	7979      	ldrb	r1, [r7, #5]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9303      	str	r3, [sp, #12]
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	2301      	movs	r3, #1
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	2300      	movs	r3, #0
 80094dc:	2201      	movs	r2, #1
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f000 faf9 	bl	8009ad6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094e4:	2300      	movs	r3, #0

}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b088      	sub	sp, #32
 80094f2:	af04      	add	r7, sp, #16
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	4611      	mov	r1, r2
 80094fa:	461a      	mov	r2, r3
 80094fc:	460b      	mov	r3, r1
 80094fe:	80fb      	strh	r3, [r7, #6]
 8009500:	4613      	mov	r3, r2
 8009502:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009512:	7979      	ldrb	r1, [r7, #5]
 8009514:	7e3b      	ldrb	r3, [r7, #24]
 8009516:	9303      	str	r3, [sp, #12]
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2301      	movs	r3, #1
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2302      	movs	r3, #2
 8009526:	2200      	movs	r2, #0
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fad4 	bl	8009ad6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af04      	add	r7, sp, #16
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4611      	mov	r1, r2
 8009544:	461a      	mov	r2, r3
 8009546:	460b      	mov	r3, r1
 8009548:	80fb      	strh	r3, [r7, #6]
 800954a:	4613      	mov	r3, r2
 800954c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800954e:	7979      	ldrb	r1, [r7, #5]
 8009550:	2300      	movs	r3, #0
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	9302      	str	r3, [sp, #8]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	2301      	movs	r3, #1
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	2302      	movs	r3, #2
 8009562:	2201      	movs	r2, #1
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fab6 	bl	8009ad6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af04      	add	r7, sp, #16
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	461a      	mov	r2, r3
 8009582:	4603      	mov	r3, r0
 8009584:	70fb      	strb	r3, [r7, #3]
 8009586:	460b      	mov	r3, r1
 8009588:	70bb      	strb	r3, [r7, #2]
 800958a:	4613      	mov	r3, r2
 800958c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800958e:	7878      	ldrb	r0, [r7, #1]
 8009590:	78ba      	ldrb	r2, [r7, #2]
 8009592:	78f9      	ldrb	r1, [r7, #3]
 8009594:	8b3b      	ldrh	r3, [r7, #24]
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	7d3b      	ldrb	r3, [r7, #20]
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	7c3b      	ldrb	r3, [r7, #16]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	4603      	mov	r3, r0
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa49 	bl	8009a3a <USBH_LL_OpenPipe>

  return USBH_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa68 	bl	8009a98 <USBH_LL_ClosePipe>

  return USBH_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f839 	bl	8009656 <USBH_GetFreePipe>
 80095e4:	4603      	mov	r3, r0
 80095e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80095e8:	89fb      	ldrh	r3, [r7, #14]
 80095ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00b      	beq.n	800960a <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800960a:	89fb      	ldrh	r3, [r7, #14]
 800960c:	b2db      	uxtb	r3, r3
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	2b0f      	cmp	r3, #15
 8009626:	d80f      	bhi.n	8009648 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	78fb      	ldrb	r3, [r7, #3]
 8009638:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	440b      	add	r3, r1
 8009646:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
 8009666:	e010      	b.n	800968a <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	b29b      	uxth	r3, r3
 8009682:	e007      	b.n	8009694 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	3301      	adds	r3, #1
 8009688:	73fb      	strb	r3, [r7, #15]
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	2b0f      	cmp	r3, #15
 800968e:	d9eb      	bls.n	8009668 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80096a4:	2201      	movs	r2, #1
 80096a6:	490e      	ldr	r1, [pc, #56]	@ (80096e0 <MX_USB_HOST_Init+0x40>)
 80096a8:	480e      	ldr	r0, [pc, #56]	@ (80096e4 <MX_USB_HOST_Init+0x44>)
 80096aa:	f7fe fb0d 	bl	8007cc8 <USBH_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80096b4:	f7f7 f9e4 	bl	8000a80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 80096b8:	490b      	ldr	r1, [pc, #44]	@ (80096e8 <MX_USB_HOST_Init+0x48>)
 80096ba:	480a      	ldr	r0, [pc, #40]	@ (80096e4 <MX_USB_HOST_Init+0x44>)
 80096bc:	f7fe fbb3 	bl	8007e26 <USBH_RegisterClass>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80096c6:	f7f7 f9db 	bl	8000a80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80096ca:	4806      	ldr	r0, [pc, #24]	@ (80096e4 <MX_USB_HOST_Init+0x44>)
 80096cc:	f7fe fc38 	bl	8007f40 <USBH_Start>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80096d6:	f7f7 f9d3 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80096da:	bf00      	nop
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	08009701 	.word	0x08009701
 80096e4:	2000042c 	.word	0x2000042c
 80096e8:	20000010 	.word	0x20000010

080096ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80096f0:	4802      	ldr	r0, [pc, #8]	@ (80096fc <MX_USB_HOST_Process+0x10>)
 80096f2:	f7fe fc35 	bl	8007f60 <USBH_Process>
}
 80096f6:	bf00      	nop
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	2000042c 	.word	0x2000042c

08009700 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	3b01      	subs	r3, #1
 8009710:	2b04      	cmp	r3, #4
 8009712:	d819      	bhi.n	8009748 <USBH_UserProcess+0x48>
 8009714:	a201      	add	r2, pc, #4	@ (adr r2, 800971c <USBH_UserProcess+0x1c>)
 8009716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971a:	bf00      	nop
 800971c:	08009749 	.word	0x08009749
 8009720:	08009739 	.word	0x08009739
 8009724:	08009749 	.word	0x08009749
 8009728:	08009741 	.word	0x08009741
 800972c:	08009731 	.word	0x08009731
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009730:	4b09      	ldr	r3, [pc, #36]	@ (8009758 <USBH_UserProcess+0x58>)
 8009732:	2203      	movs	r2, #3
 8009734:	701a      	strb	r2, [r3, #0]
  break;
 8009736:	e008      	b.n	800974a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009738:	4b07      	ldr	r3, [pc, #28]	@ (8009758 <USBH_UserProcess+0x58>)
 800973a:	2202      	movs	r2, #2
 800973c:	701a      	strb	r2, [r3, #0]
  break;
 800973e:	e004      	b.n	800974a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009740:	4b05      	ldr	r3, [pc, #20]	@ (8009758 <USBH_UserProcess+0x58>)
 8009742:	2201      	movs	r2, #1
 8009744:	701a      	strb	r2, [r3, #0]
  break;
 8009746:	e000      	b.n	800974a <USBH_UserProcess+0x4a>

  default:
  break;
 8009748:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800974a:	bf00      	nop
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	200008d4 	.word	0x200008d4

0800975c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	@ 0x28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009764:	f107 0314 	add.w	r3, r7, #20
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800977c:	d13a      	bne.n	80097f4 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800977e:	2300      	movs	r3, #0
 8009780:	613b      	str	r3, [r7, #16]
 8009782:	4b1e      	ldr	r3, [pc, #120]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009786:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 8009788:	f043 0301 	orr.w	r3, r3, #1
 800978c:	6313      	str	r3, [r2, #48]	@ 0x30
 800978e:	4b1b      	ldr	r3, [pc, #108]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800979a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800979e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a0:	2302      	movs	r3, #2
 80097a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097a8:	2303      	movs	r3, #3
 80097aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097ac:	230a      	movs	r3, #10
 80097ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097b0:	f107 0314 	add.w	r3, r7, #20
 80097b4:	4619      	mov	r1, r3
 80097b6:	4812      	ldr	r0, [pc, #72]	@ (8009800 <HAL_HCD_MspInit+0xa4>)
 80097b8:	f7f8 fc32 	bl	8002020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097bc:	4b0f      	ldr	r3, [pc, #60]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 80097be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097c0:	4a0e      	ldr	r2, [pc, #56]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 80097c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	4b0b      	ldr	r3, [pc, #44]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 80097ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d0:	4a0a      	ldr	r2, [pc, #40]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 80097d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80097d8:	4b08      	ldr	r3, [pc, #32]	@ (80097fc <HAL_HCD_MspInit+0xa0>)
 80097da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097e4:	2200      	movs	r2, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	2043      	movs	r0, #67	@ 0x43
 80097ea:	f7f8 f872 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097ee:	2043      	movs	r0, #67	@ 0x43
 80097f0:	f7f8 f88b 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097f4:	bf00      	nop
 80097f6:	3728      	adds	r7, #40	@ 0x28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	40023800 	.word	0x40023800
 8009800:	40020000 	.word	0x40020000

08009804 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe ff7d 	bl	8008712 <USBH_LL_IncTimer>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe ffb5 	bl	800879e <USBH_LL_Connect>
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe ffbe 	bl	80087cc <USBH_LL_Disconnect>
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
 8009864:	4613      	mov	r3, r2
 8009866:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe ff6f 	bl	8008766 <USBH_LL_PortEnabled>
}
 8009888:	bf00      	nop
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe ff6f 	bl	8008782 <USBH_LL_PortDisabled>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 349c 	ldrb.w	r3, [r3, #1180]	@ 0x49c
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d12a      	bne.n	8009914 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80098be:	4a18      	ldr	r2, [pc, #96]	@ (8009920 <USBH_LL_Init+0x74>)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a15      	ldr	r2, [pc, #84]	@ (8009920 <USBH_LL_Init+0x74>)
 80098ca:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80098ce:	4b14      	ldr	r3, [pc, #80]	@ (8009920 <USBH_LL_Init+0x74>)
 80098d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80098d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80098d6:	4b12      	ldr	r3, [pc, #72]	@ (8009920 <USBH_LL_Init+0x74>)
 80098d8:	2208      	movs	r2, #8
 80098da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80098dc:	4b10      	ldr	r3, [pc, #64]	@ (8009920 <USBH_LL_Init+0x74>)
 80098de:	2201      	movs	r2, #1
 80098e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80098e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009920 <USBH_LL_Init+0x74>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80098e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <USBH_LL_Init+0x74>)
 80098ea:	2202      	movs	r2, #2
 80098ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80098ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <USBH_LL_Init+0x74>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80098f4:	480a      	ldr	r0, [pc, #40]	@ (8009920 <USBH_LL_Init+0x74>)
 80098f6:	f7f8 fd30 	bl	800235a <HAL_HCD_Init>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009900:	f7f7 f8be 	bl	8000a80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009904:	4806      	ldr	r0, [pc, #24]	@ (8009920 <USBH_LL_Init+0x74>)
 8009906:	f7f9 f991 	bl	8002c2c <HAL_HCD_GetCurrentFrame>
 800990a:	4603      	mov	r3, r0
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fe fef0 	bl	80086f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200008d8 	.word	0x200008d8

08009924 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800993a:	4618      	mov	r0, r3
 800993c:	f7f9 f8fe 	bl	8002b3c <HAL_HCD_Start>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f956 	bl	8009bf8 <USBH_Get_USB_Status>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009950:	7bbb      	ldrb	r3, [r7, #14]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009970:	4618      	mov	r0, r3
 8009972:	f7f9 f906 	bl	8002b82 <HAL_HCD_Stop>
 8009976:	4603      	mov	r3, r0
 8009978:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800997a:	7bfb      	ldrb	r3, [r7, #15]
 800997c:	4618      	mov	r0, r3
 800997e:	f000 f93b 	bl	8009bf8 <USBH_Get_USB_Status>
 8009982:	4603      	mov	r3, r0
 8009984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009986:	7bbb      	ldrb	r3, [r7, #14]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009998:	2301      	movs	r3, #1
 800999a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f9 f950 	bl	8002c48 <HAL_HCD_GetCurrentSpeed>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d00c      	beq.n	80099c8 <USBH_LL_GetSpeed+0x38>
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d80d      	bhi.n	80099ce <USBH_LL_GetSpeed+0x3e>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <USBH_LL_GetSpeed+0x2c>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d003      	beq.n	80099c2 <USBH_LL_GetSpeed+0x32>
 80099ba:	e008      	b.n	80099ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
    break;
 80099c0:	e008      	b.n	80099d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80099c2:	2301      	movs	r3, #1
 80099c4:	73fb      	strb	r3, [r7, #15]
    break;
 80099c6:	e005      	b.n	80099d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80099c8:	2302      	movs	r3, #2
 80099ca:	73fb      	strb	r3, [r7, #15]
    break;
 80099cc:	e002      	b.n	80099d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80099ce:	2301      	movs	r3, #1
 80099d0:	73fb      	strb	r3, [r7, #15]
    break;
 80099d2:	bf00      	nop
  }
  return  speed;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f9 f8e1 	bl	8002bbc <HAL_HCD_ResetPort>
 80099fa:	4603      	mov	r3, r0
 80099fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f8f9 	bl	8009bf8 <USBH_Get_USB_Status>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009a26:	78fa      	ldrb	r2, [r7, #3]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7f9 f8e9 	bl	8002c02 <HAL_HCD_HC_GetXferCount>
 8009a30:	4603      	mov	r3, r0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a3a:	b590      	push	{r4, r7, lr}
 8009a3c:	b089      	sub	sp, #36	@ 0x24
 8009a3e:	af04      	add	r7, sp, #16
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	4608      	mov	r0, r1
 8009a44:	4611      	mov	r1, r2
 8009a46:	461a      	mov	r2, r3
 8009a48:	4603      	mov	r3, r0
 8009a4a:	70fb      	strb	r3, [r7, #3]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70bb      	strb	r3, [r7, #2]
 8009a50:	4613      	mov	r3, r2
 8009a52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 8009a62:	787c      	ldrb	r4, [r7, #1]
 8009a64:	78ba      	ldrb	r2, [r7, #2]
 8009a66:	78f9      	ldrb	r1, [r7, #3]
 8009a68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a6a:	9302      	str	r3, [sp, #8]
 8009a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4623      	mov	r3, r4
 8009a7a:	f7f8 fcd5 	bl	8002428 <HAL_HCD_HC_Init>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f8b7 	bl	8009bf8 <USBH_Get_USB_Status>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f8 fd6e 	bl	8002598 <HAL_HCD_HC_Halt>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 f898 	bl	8009bf8 <USBH_Get_USB_Status>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009ad6:	b590      	push	{r4, r7, lr}
 8009ad8:	b089      	sub	sp, #36	@ 0x24
 8009ada:	af04      	add	r7, sp, #16
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	70fb      	strb	r3, [r7, #3]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70bb      	strb	r3, [r7, #2]
 8009aec:	4613      	mov	r3, r2
 8009aee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 8009afe:	787c      	ldrb	r4, [r7, #1]
 8009b00:	78ba      	ldrb	r2, [r7, #2]
 8009b02:	78f9      	ldrb	r1, [r7, #3]
 8009b04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b0c:	9302      	str	r3, [sp, #8]
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	4623      	mov	r3, r4
 8009b1a:	f7f8 fd61 	bl	80025e0 <HAL_HCD_HC_SubmitRequest>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 f867 	bl	8009bf8 <USBH_Get_USB_Status>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd90      	pop	{r4, r7, pc}

08009b38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f9 f842 	bl	8002bd8 <HAL_HCD_HC_GetURBState>
 8009b54:	4603      	mov	r3, r0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	460b      	mov	r3, r1
 8009b68:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8009b6a:	20c8      	movs	r0, #200	@ 0xc8
 8009b6c:	f7f7 fb50 	bl	8001210 <HAL_Delay>
  return USBH_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b085      	sub	sp, #20
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	460b      	mov	r3, r1
 8009b84:	70fb      	strb	r3, [r7, #3]
 8009b86:	4613      	mov	r3, r2
 8009b88:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009b90:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b92:	78fa      	ldrb	r2, [r7, #3]
 8009b94:	68f9      	ldr	r1, [r7, #12]
 8009b96:	4613      	mov	r3, r2
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	3317      	adds	r3, #23
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00a      	beq.n	8009bbe <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	68f9      	ldr	r1, [r7, #12]
 8009bac:	4613      	mov	r3, r2
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	1a9b      	subs	r3, r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	333c      	adds	r3, #60	@ 0x3c
 8009bb8:	78ba      	ldrb	r2, [r7, #2]
 8009bba:	701a      	strb	r2, [r3, #0]
 8009bbc:	e009      	b.n	8009bd2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009bbe:	78fa      	ldrb	r2, [r7, #3]
 8009bc0:	68f9      	ldr	r1, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	011b      	lsls	r3, r3, #4
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	333d      	adds	r3, #61	@ 0x3d
 8009bce:	78ba      	ldrb	r2, [r7, #2]
 8009bd0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7f7 fb11 	bl	8001210 <HAL_Delay>
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d817      	bhi.n	8009c3c <USBH_Get_USB_Status+0x44>
 8009c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c14 <USBH_Get_USB_Status+0x1c>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c2b 	.word	0x08009c2b
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c37 	.word	0x08009c37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
    break;
 8009c28:	e00b      	b.n	8009c42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2e:	e008      	b.n	8009c42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
    break;
 8009c34:	e005      	b.n	8009c42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009c36:	2302      	movs	r3, #2
 8009c38:	73fb      	strb	r3, [r7, #15]
    break;
 8009c3a:	e002      	b.n	8009c42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c40:	bf00      	nop
  }
  return usb_status;
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <malloc>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <malloc+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f000 b82d 	b.w	8009cb4 <_malloc_r>
 8009c5a:	bf00      	nop
 8009c5c:	2000003c 	.word	0x2000003c

08009c60 <free>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	@ (8009c6c <free+0xc>)
 8009c62:	4601      	mov	r1, r0
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f000 bb47 	b.w	800a2f8 <_free_r>
 8009c6a:	bf00      	nop
 8009c6c:	2000003c 	.word	0x2000003c

08009c70 <sbrk_aligned>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4e0f      	ldr	r6, [pc, #60]	@ (8009cb0 <sbrk_aligned+0x40>)
 8009c74:	460c      	mov	r4, r1
 8009c76:	6831      	ldr	r1, [r6, #0]
 8009c78:	4605      	mov	r5, r0
 8009c7a:	b911      	cbnz	r1, 8009c82 <sbrk_aligned+0x12>
 8009c7c:	f000 faec 	bl	800a258 <_sbrk_r>
 8009c80:	6030      	str	r0, [r6, #0]
 8009c82:	4621      	mov	r1, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 fae7 	bl	800a258 <_sbrk_r>
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	d103      	bne.n	8009c96 <sbrk_aligned+0x26>
 8009c8e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c92:	4620      	mov	r0, r4
 8009c94:	bd70      	pop	{r4, r5, r6, pc}
 8009c96:	1cc4      	adds	r4, r0, #3
 8009c98:	f024 0403 	bic.w	r4, r4, #3
 8009c9c:	42a0      	cmp	r0, r4
 8009c9e:	d0f8      	beq.n	8009c92 <sbrk_aligned+0x22>
 8009ca0:	1a21      	subs	r1, r4, r0
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 fad8 	bl	800a258 <_sbrk_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d1f2      	bne.n	8009c92 <sbrk_aligned+0x22>
 8009cac:	e7ef      	b.n	8009c8e <sbrk_aligned+0x1e>
 8009cae:	bf00      	nop
 8009cb0:	20000cb8 	.word	0x20000cb8

08009cb4 <_malloc_r>:
 8009cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	1ccd      	adds	r5, r1, #3
 8009cba:	f025 0503 	bic.w	r5, r5, #3
 8009cbe:	3508      	adds	r5, #8
 8009cc0:	2d0c      	cmp	r5, #12
 8009cc2:	bf38      	it	cc
 8009cc4:	250c      	movcc	r5, #12
 8009cc6:	2d00      	cmp	r5, #0
 8009cc8:	4606      	mov	r6, r0
 8009cca:	db01      	blt.n	8009cd0 <_malloc_r+0x1c>
 8009ccc:	42a9      	cmp	r1, r5
 8009cce:	d904      	bls.n	8009cda <_malloc_r+0x26>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	6033      	str	r3, [r6, #0]
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009db0 <_malloc_r+0xfc>
 8009cde:	f000 f869 	bl	8009db4 <__malloc_lock>
 8009ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce6:	461c      	mov	r4, r3
 8009ce8:	bb44      	cbnz	r4, 8009d3c <_malloc_r+0x88>
 8009cea:	4629      	mov	r1, r5
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7ff ffbf 	bl	8009c70 <sbrk_aligned>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	d158      	bne.n	8009daa <_malloc_r+0xf6>
 8009cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8009cfc:	4627      	mov	r7, r4
 8009cfe:	2f00      	cmp	r7, #0
 8009d00:	d143      	bne.n	8009d8a <_malloc_r+0xd6>
 8009d02:	2c00      	cmp	r4, #0
 8009d04:	d04b      	beq.n	8009d9e <_malloc_r+0xea>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	eb04 0903 	add.w	r9, r4, r3
 8009d10:	f000 faa2 	bl	800a258 <_sbrk_r>
 8009d14:	4581      	cmp	r9, r0
 8009d16:	d142      	bne.n	8009d9e <_malloc_r+0xea>
 8009d18:	6821      	ldr	r1, [r4, #0]
 8009d1a:	1a6d      	subs	r5, r5, r1
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ffa6 	bl	8009c70 <sbrk_aligned>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d03a      	beq.n	8009d9e <_malloc_r+0xea>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	442b      	add	r3, r5
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	bb62      	cbnz	r2, 8009d90 <_malloc_r+0xdc>
 8009d36:	f8c8 7000 	str.w	r7, [r8]
 8009d3a:	e00f      	b.n	8009d5c <_malloc_r+0xa8>
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	1b52      	subs	r2, r2, r5
 8009d40:	d420      	bmi.n	8009d84 <_malloc_r+0xd0>
 8009d42:	2a0b      	cmp	r2, #11
 8009d44:	d917      	bls.n	8009d76 <_malloc_r+0xc2>
 8009d46:	1961      	adds	r1, r4, r5
 8009d48:	42a3      	cmp	r3, r4
 8009d4a:	6025      	str	r5, [r4, #0]
 8009d4c:	bf18      	it	ne
 8009d4e:	6059      	strne	r1, [r3, #4]
 8009d50:	6863      	ldr	r3, [r4, #4]
 8009d52:	bf08      	it	eq
 8009d54:	f8c8 1000 	streq.w	r1, [r8]
 8009d58:	5162      	str	r2, [r4, r5]
 8009d5a:	604b      	str	r3, [r1, #4]
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 f82f 	bl	8009dc0 <__malloc_unlock>
 8009d62:	f104 000b 	add.w	r0, r4, #11
 8009d66:	1d23      	adds	r3, r4, #4
 8009d68:	f020 0007 	bic.w	r0, r0, #7
 8009d6c:	1ac2      	subs	r2, r0, r3
 8009d6e:	bf1c      	itt	ne
 8009d70:	1a1b      	subne	r3, r3, r0
 8009d72:	50a3      	strne	r3, [r4, r2]
 8009d74:	e7af      	b.n	8009cd6 <_malloc_r+0x22>
 8009d76:	6862      	ldr	r2, [r4, #4]
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	bf0c      	ite	eq
 8009d7c:	f8c8 2000 	streq.w	r2, [r8]
 8009d80:	605a      	strne	r2, [r3, #4]
 8009d82:	e7eb      	b.n	8009d5c <_malloc_r+0xa8>
 8009d84:	4623      	mov	r3, r4
 8009d86:	6864      	ldr	r4, [r4, #4]
 8009d88:	e7ae      	b.n	8009ce8 <_malloc_r+0x34>
 8009d8a:	463c      	mov	r4, r7
 8009d8c:	687f      	ldr	r7, [r7, #4]
 8009d8e:	e7b6      	b.n	8009cfe <_malloc_r+0x4a>
 8009d90:	461a      	mov	r2, r3
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	d1fb      	bne.n	8009d90 <_malloc_r+0xdc>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	6053      	str	r3, [r2, #4]
 8009d9c:	e7de      	b.n	8009d5c <_malloc_r+0xa8>
 8009d9e:	230c      	movs	r3, #12
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	4630      	mov	r0, r6
 8009da4:	f000 f80c 	bl	8009dc0 <__malloc_unlock>
 8009da8:	e794      	b.n	8009cd4 <_malloc_r+0x20>
 8009daa:	6005      	str	r5, [r0, #0]
 8009dac:	e7d6      	b.n	8009d5c <_malloc_r+0xa8>
 8009dae:	bf00      	nop
 8009db0:	20000cbc 	.word	0x20000cbc

08009db4 <__malloc_lock>:
 8009db4:	4801      	ldr	r0, [pc, #4]	@ (8009dbc <__malloc_lock+0x8>)
 8009db6:	f000 ba9c 	b.w	800a2f2 <__retarget_lock_acquire_recursive>
 8009dba:	bf00      	nop
 8009dbc:	20000e00 	.word	0x20000e00

08009dc0 <__malloc_unlock>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	@ (8009dc8 <__malloc_unlock+0x8>)
 8009dc2:	f000 ba97 	b.w	800a2f4 <__retarget_lock_release_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	20000e00 	.word	0x20000e00

08009dcc <std>:
 8009dcc:	2300      	movs	r3, #0
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8009dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dda:	6083      	str	r3, [r0, #8]
 8009ddc:	8181      	strh	r1, [r0, #12]
 8009dde:	6643      	str	r3, [r0, #100]	@ 0x64
 8009de0:	81c2      	strh	r2, [r0, #14]
 8009de2:	6183      	str	r3, [r0, #24]
 8009de4:	4619      	mov	r1, r3
 8009de6:	2208      	movs	r2, #8
 8009de8:	305c      	adds	r0, #92	@ 0x5c
 8009dea:	f000 f9f9 	bl	800a1e0 <memset>
 8009dee:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <std+0x58>)
 8009df0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009df2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e28 <std+0x5c>)
 8009df4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009df6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e2c <std+0x60>)
 8009df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009e30 <std+0x64>)
 8009dfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8009e34 <std+0x68>)
 8009e00:	6224      	str	r4, [r4, #32]
 8009e02:	429c      	cmp	r4, r3
 8009e04:	d006      	beq.n	8009e14 <std+0x48>
 8009e06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e0a:	4294      	cmp	r4, r2
 8009e0c:	d002      	beq.n	8009e14 <std+0x48>
 8009e0e:	33d0      	adds	r3, #208	@ 0xd0
 8009e10:	429c      	cmp	r4, r3
 8009e12:	d105      	bne.n	8009e20 <std+0x54>
 8009e14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e1c:	f000 ba68 	b.w	800a2f0 <__retarget_lock_init_recursive>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	bf00      	nop
 8009e24:	0800a031 	.word	0x0800a031
 8009e28:	0800a053 	.word	0x0800a053
 8009e2c:	0800a08b 	.word	0x0800a08b
 8009e30:	0800a0af 	.word	0x0800a0af
 8009e34:	20000cc0 	.word	0x20000cc0

08009e38 <stdio_exit_handler>:
 8009e38:	4a02      	ldr	r2, [pc, #8]	@ (8009e44 <stdio_exit_handler+0xc>)
 8009e3a:	4903      	ldr	r1, [pc, #12]	@ (8009e48 <stdio_exit_handler+0x10>)
 8009e3c:	4803      	ldr	r0, [pc, #12]	@ (8009e4c <stdio_exit_handler+0x14>)
 8009e3e:	f000 b869 	b.w	8009f14 <_fwalk_sglue>
 8009e42:	bf00      	nop
 8009e44:	20000030 	.word	0x20000030
 8009e48:	0800aa35 	.word	0x0800aa35
 8009e4c:	20000040 	.word	0x20000040

08009e50 <cleanup_stdio>:
 8009e50:	6841      	ldr	r1, [r0, #4]
 8009e52:	4b0c      	ldr	r3, [pc, #48]	@ (8009e84 <cleanup_stdio+0x34>)
 8009e54:	4299      	cmp	r1, r3
 8009e56:	b510      	push	{r4, lr}
 8009e58:	4604      	mov	r4, r0
 8009e5a:	d001      	beq.n	8009e60 <cleanup_stdio+0x10>
 8009e5c:	f000 fdea 	bl	800aa34 <_fflush_r>
 8009e60:	68a1      	ldr	r1, [r4, #8]
 8009e62:	4b09      	ldr	r3, [pc, #36]	@ (8009e88 <cleanup_stdio+0x38>)
 8009e64:	4299      	cmp	r1, r3
 8009e66:	d002      	beq.n	8009e6e <cleanup_stdio+0x1e>
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 fde3 	bl	800aa34 <_fflush_r>
 8009e6e:	68e1      	ldr	r1, [r4, #12]
 8009e70:	4b06      	ldr	r3, [pc, #24]	@ (8009e8c <cleanup_stdio+0x3c>)
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d004      	beq.n	8009e80 <cleanup_stdio+0x30>
 8009e76:	4620      	mov	r0, r4
 8009e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e7c:	f000 bdda 	b.w	800aa34 <_fflush_r>
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	bf00      	nop
 8009e84:	20000cc0 	.word	0x20000cc0
 8009e88:	20000d28 	.word	0x20000d28
 8009e8c:	20000d90 	.word	0x20000d90

08009e90 <global_stdio_init.part.0>:
 8009e90:	b510      	push	{r4, lr}
 8009e92:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec0 <global_stdio_init.part.0+0x30>)
 8009e94:	4c0b      	ldr	r4, [pc, #44]	@ (8009ec4 <global_stdio_init.part.0+0x34>)
 8009e96:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec8 <global_stdio_init.part.0+0x38>)
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2104      	movs	r1, #4
 8009ea0:	f7ff ff94 	bl	8009dcc <std>
 8009ea4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	2109      	movs	r1, #9
 8009eac:	f7ff ff8e 	bl	8009dcc <std>
 8009eb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eba:	2112      	movs	r1, #18
 8009ebc:	f7ff bf86 	b.w	8009dcc <std>
 8009ec0:	20000df8 	.word	0x20000df8
 8009ec4:	20000cc0 	.word	0x20000cc0
 8009ec8:	08009e39 	.word	0x08009e39

08009ecc <__sfp_lock_acquire>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	@ (8009ed4 <__sfp_lock_acquire+0x8>)
 8009ece:	f000 ba10 	b.w	800a2f2 <__retarget_lock_acquire_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20000e01 	.word	0x20000e01

08009ed8 <__sfp_lock_release>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	@ (8009ee0 <__sfp_lock_release+0x8>)
 8009eda:	f000 ba0b 	b.w	800a2f4 <__retarget_lock_release_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20000e01 	.word	0x20000e01

08009ee4 <__sinit>:
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	f7ff fff0 	bl	8009ecc <__sfp_lock_acquire>
 8009eec:	6a23      	ldr	r3, [r4, #32]
 8009eee:	b11b      	cbz	r3, 8009ef8 <__sinit+0x14>
 8009ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef4:	f7ff bff0 	b.w	8009ed8 <__sfp_lock_release>
 8009ef8:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <__sinit+0x28>)
 8009efa:	6223      	str	r3, [r4, #32]
 8009efc:	4b04      	ldr	r3, [pc, #16]	@ (8009f10 <__sinit+0x2c>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1f5      	bne.n	8009ef0 <__sinit+0xc>
 8009f04:	f7ff ffc4 	bl	8009e90 <global_stdio_init.part.0>
 8009f08:	e7f2      	b.n	8009ef0 <__sinit+0xc>
 8009f0a:	bf00      	nop
 8009f0c:	08009e51 	.word	0x08009e51
 8009f10:	20000df8 	.word	0x20000df8

08009f14 <_fwalk_sglue>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	4607      	mov	r7, r0
 8009f1a:	4688      	mov	r8, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	2600      	movs	r6, #0
 8009f20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f24:	f1b9 0901 	subs.w	r9, r9, #1
 8009f28:	d505      	bpl.n	8009f36 <_fwalk_sglue+0x22>
 8009f2a:	6824      	ldr	r4, [r4, #0]
 8009f2c:	2c00      	cmp	r4, #0
 8009f2e:	d1f7      	bne.n	8009f20 <_fwalk_sglue+0xc>
 8009f30:	4630      	mov	r0, r6
 8009f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d907      	bls.n	8009f4c <_fwalk_sglue+0x38>
 8009f3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f40:	3301      	adds	r3, #1
 8009f42:	d003      	beq.n	8009f4c <_fwalk_sglue+0x38>
 8009f44:	4629      	mov	r1, r5
 8009f46:	4638      	mov	r0, r7
 8009f48:	47c0      	blx	r8
 8009f4a:	4306      	orrs	r6, r0
 8009f4c:	3568      	adds	r5, #104	@ 0x68
 8009f4e:	e7e9      	b.n	8009f24 <_fwalk_sglue+0x10>

08009f50 <iprintf>:
 8009f50:	b40f      	push	{r0, r1, r2, r3}
 8009f52:	b507      	push	{r0, r1, r2, lr}
 8009f54:	4906      	ldr	r1, [pc, #24]	@ (8009f70 <iprintf+0x20>)
 8009f56:	ab04      	add	r3, sp, #16
 8009f58:	6808      	ldr	r0, [r1, #0]
 8009f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5e:	6881      	ldr	r1, [r0, #8]
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	f000 fa3d 	bl	800a3e0 <_vfiprintf_r>
 8009f66:	b003      	add	sp, #12
 8009f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f6c:	b004      	add	sp, #16
 8009f6e:	4770      	bx	lr
 8009f70:	2000003c 	.word	0x2000003c

08009f74 <_puts_r>:
 8009f74:	6a03      	ldr	r3, [r0, #32]
 8009f76:	b570      	push	{r4, r5, r6, lr}
 8009f78:	6884      	ldr	r4, [r0, #8]
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	460e      	mov	r6, r1
 8009f7e:	b90b      	cbnz	r3, 8009f84 <_puts_r+0x10>
 8009f80:	f7ff ffb0 	bl	8009ee4 <__sinit>
 8009f84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f86:	07db      	lsls	r3, r3, #31
 8009f88:	d405      	bmi.n	8009f96 <_puts_r+0x22>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	0598      	lsls	r0, r3, #22
 8009f8e:	d402      	bmi.n	8009f96 <_puts_r+0x22>
 8009f90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f92:	f000 f9ae 	bl	800a2f2 <__retarget_lock_acquire_recursive>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	0719      	lsls	r1, r3, #28
 8009f9a:	d502      	bpl.n	8009fa2 <_puts_r+0x2e>
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d135      	bne.n	800a00e <_puts_r+0x9a>
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f000 f8c5 	bl	800a134 <__swsetup_r>
 8009faa:	b380      	cbz	r0, 800a00e <_puts_r+0x9a>
 8009fac:	f04f 35ff 	mov.w	r5, #4294967295
 8009fb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fb2:	07da      	lsls	r2, r3, #31
 8009fb4:	d405      	bmi.n	8009fc2 <_puts_r+0x4e>
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	059b      	lsls	r3, r3, #22
 8009fba:	d402      	bmi.n	8009fc2 <_puts_r+0x4e>
 8009fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fbe:	f000 f999 	bl	800a2f4 <__retarget_lock_release_recursive>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	bd70      	pop	{r4, r5, r6, pc}
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da04      	bge.n	8009fd4 <_puts_r+0x60>
 8009fca:	69a2      	ldr	r2, [r4, #24]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	dc17      	bgt.n	800a000 <_puts_r+0x8c>
 8009fd0:	290a      	cmp	r1, #10
 8009fd2:	d015      	beq.n	800a000 <_puts_r+0x8c>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	1c5a      	adds	r2, r3, #1
 8009fd8:	6022      	str	r2, [r4, #0]
 8009fda:	7019      	strb	r1, [r3, #0]
 8009fdc:	68a3      	ldr	r3, [r4, #8]
 8009fde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	60a3      	str	r3, [r4, #8]
 8009fe6:	2900      	cmp	r1, #0
 8009fe8:	d1ed      	bne.n	8009fc6 <_puts_r+0x52>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	da11      	bge.n	800a012 <_puts_r+0x9e>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	210a      	movs	r1, #10
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 f85f 	bl	800a0b6 <__swbuf_r>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d0d7      	beq.n	8009fac <_puts_r+0x38>
 8009ffc:	250a      	movs	r5, #10
 8009ffe:	e7d7      	b.n	8009fb0 <_puts_r+0x3c>
 800a000:	4622      	mov	r2, r4
 800a002:	4628      	mov	r0, r5
 800a004:	f000 f857 	bl	800a0b6 <__swbuf_r>
 800a008:	3001      	adds	r0, #1
 800a00a:	d1e7      	bne.n	8009fdc <_puts_r+0x68>
 800a00c:	e7ce      	b.n	8009fac <_puts_r+0x38>
 800a00e:	3e01      	subs	r6, #1
 800a010:	e7e4      	b.n	8009fdc <_puts_r+0x68>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	6022      	str	r2, [r4, #0]
 800a018:	220a      	movs	r2, #10
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	e7ee      	b.n	8009ffc <_puts_r+0x88>
	...

0800a020 <puts>:
 800a020:	4b02      	ldr	r3, [pc, #8]	@ (800a02c <puts+0xc>)
 800a022:	4601      	mov	r1, r0
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f7ff bfa5 	b.w	8009f74 <_puts_r>
 800a02a:	bf00      	nop
 800a02c:	2000003c 	.word	0x2000003c

0800a030 <__sread>:
 800a030:	b510      	push	{r4, lr}
 800a032:	460c      	mov	r4, r1
 800a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a038:	f000 f8fc 	bl	800a234 <_read_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	bfab      	itete	ge
 800a040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a042:	89a3      	ldrhlt	r3, [r4, #12]
 800a044:	181b      	addge	r3, r3, r0
 800a046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a04a:	bfac      	ite	ge
 800a04c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a04e:	81a3      	strhlt	r3, [r4, #12]
 800a050:	bd10      	pop	{r4, pc}

0800a052 <__swrite>:
 800a052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a056:	461f      	mov	r7, r3
 800a058:	898b      	ldrh	r3, [r1, #12]
 800a05a:	05db      	lsls	r3, r3, #23
 800a05c:	4605      	mov	r5, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	4616      	mov	r6, r2
 800a062:	d505      	bpl.n	800a070 <__swrite+0x1e>
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	2302      	movs	r3, #2
 800a06a:	2200      	movs	r2, #0
 800a06c:	f000 f8d0 	bl	800a210 <_lseek_r>
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a07a:	81a3      	strh	r3, [r4, #12]
 800a07c:	4632      	mov	r2, r6
 800a07e:	463b      	mov	r3, r7
 800a080:	4628      	mov	r0, r5
 800a082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a086:	f000 b8f7 	b.w	800a278 <_write_r>

0800a08a <__sseek>:
 800a08a:	b510      	push	{r4, lr}
 800a08c:	460c      	mov	r4, r1
 800a08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a092:	f000 f8bd 	bl	800a210 <_lseek_r>
 800a096:	1c43      	adds	r3, r0, #1
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	bf15      	itete	ne
 800a09c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a09e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a0a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a0a6:	81a3      	strheq	r3, [r4, #12]
 800a0a8:	bf18      	it	ne
 800a0aa:	81a3      	strhne	r3, [r4, #12]
 800a0ac:	bd10      	pop	{r4, pc}

0800a0ae <__sclose>:
 800a0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b2:	f000 b89d 	b.w	800a1f0 <_close_r>

0800a0b6 <__swbuf_r>:
 800a0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b8:	460e      	mov	r6, r1
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	4605      	mov	r5, r0
 800a0be:	b118      	cbz	r0, 800a0c8 <__swbuf_r+0x12>
 800a0c0:	6a03      	ldr	r3, [r0, #32]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <__swbuf_r+0x12>
 800a0c4:	f7ff ff0e 	bl	8009ee4 <__sinit>
 800a0c8:	69a3      	ldr	r3, [r4, #24]
 800a0ca:	60a3      	str	r3, [r4, #8]
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	071a      	lsls	r2, r3, #28
 800a0d0:	d501      	bpl.n	800a0d6 <__swbuf_r+0x20>
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	b943      	cbnz	r3, 800a0e8 <__swbuf_r+0x32>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 f82b 	bl	800a134 <__swsetup_r>
 800a0de:	b118      	cbz	r0, 800a0e8 <__swbuf_r+0x32>
 800a0e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	6922      	ldr	r2, [r4, #16]
 800a0ec:	1a98      	subs	r0, r3, r2
 800a0ee:	6963      	ldr	r3, [r4, #20]
 800a0f0:	b2f6      	uxtb	r6, r6
 800a0f2:	4283      	cmp	r3, r0
 800a0f4:	4637      	mov	r7, r6
 800a0f6:	dc05      	bgt.n	800a104 <__swbuf_r+0x4e>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 fc9a 	bl	800aa34 <_fflush_r>
 800a100:	2800      	cmp	r0, #0
 800a102:	d1ed      	bne.n	800a0e0 <__swbuf_r+0x2a>
 800a104:	68a3      	ldr	r3, [r4, #8]
 800a106:	3b01      	subs	r3, #1
 800a108:	60a3      	str	r3, [r4, #8]
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	6022      	str	r2, [r4, #0]
 800a110:	701e      	strb	r6, [r3, #0]
 800a112:	6962      	ldr	r2, [r4, #20]
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	429a      	cmp	r2, r3
 800a118:	d004      	beq.n	800a124 <__swbuf_r+0x6e>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	07db      	lsls	r3, r3, #31
 800a11e:	d5e1      	bpl.n	800a0e4 <__swbuf_r+0x2e>
 800a120:	2e0a      	cmp	r6, #10
 800a122:	d1df      	bne.n	800a0e4 <__swbuf_r+0x2e>
 800a124:	4621      	mov	r1, r4
 800a126:	4628      	mov	r0, r5
 800a128:	f000 fc84 	bl	800aa34 <_fflush_r>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d0d9      	beq.n	800a0e4 <__swbuf_r+0x2e>
 800a130:	e7d6      	b.n	800a0e0 <__swbuf_r+0x2a>
	...

0800a134 <__swsetup_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4b29      	ldr	r3, [pc, #164]	@ (800a1dc <__swsetup_r+0xa8>)
 800a138:	4605      	mov	r5, r0
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	460c      	mov	r4, r1
 800a13e:	b118      	cbz	r0, 800a148 <__swsetup_r+0x14>
 800a140:	6a03      	ldr	r3, [r0, #32]
 800a142:	b90b      	cbnz	r3, 800a148 <__swsetup_r+0x14>
 800a144:	f7ff fece 	bl	8009ee4 <__sinit>
 800a148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14c:	0719      	lsls	r1, r3, #28
 800a14e:	d422      	bmi.n	800a196 <__swsetup_r+0x62>
 800a150:	06da      	lsls	r2, r3, #27
 800a152:	d407      	bmi.n	800a164 <__swsetup_r+0x30>
 800a154:	2209      	movs	r2, #9
 800a156:	602a      	str	r2, [r5, #0]
 800a158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a15c:	81a3      	strh	r3, [r4, #12]
 800a15e:	f04f 30ff 	mov.w	r0, #4294967295
 800a162:	e033      	b.n	800a1cc <__swsetup_r+0x98>
 800a164:	0758      	lsls	r0, r3, #29
 800a166:	d512      	bpl.n	800a18e <__swsetup_r+0x5a>
 800a168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a16a:	b141      	cbz	r1, 800a17e <__swsetup_r+0x4a>
 800a16c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a170:	4299      	cmp	r1, r3
 800a172:	d002      	beq.n	800a17a <__swsetup_r+0x46>
 800a174:	4628      	mov	r0, r5
 800a176:	f000 f8bf 	bl	800a2f8 <_free_r>
 800a17a:	2300      	movs	r3, #0
 800a17c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	2300      	movs	r3, #0
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	f043 0308 	orr.w	r3, r3, #8
 800a194:	81a3      	strh	r3, [r4, #12]
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	b94b      	cbnz	r3, 800a1ae <__swsetup_r+0x7a>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a4:	d003      	beq.n	800a1ae <__swsetup_r+0x7a>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 fc91 	bl	800aad0 <__smakebuf_r>
 800a1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1b2:	f013 0201 	ands.w	r2, r3, #1
 800a1b6:	d00a      	beq.n	800a1ce <__swsetup_r+0x9a>
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	60a2      	str	r2, [r4, #8]
 800a1bc:	6962      	ldr	r2, [r4, #20]
 800a1be:	4252      	negs	r2, r2
 800a1c0:	61a2      	str	r2, [r4, #24]
 800a1c2:	6922      	ldr	r2, [r4, #16]
 800a1c4:	b942      	cbnz	r2, 800a1d8 <__swsetup_r+0xa4>
 800a1c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1ca:	d1c5      	bne.n	800a158 <__swsetup_r+0x24>
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	0799      	lsls	r1, r3, #30
 800a1d0:	bf58      	it	pl
 800a1d2:	6962      	ldrpl	r2, [r4, #20]
 800a1d4:	60a2      	str	r2, [r4, #8]
 800a1d6:	e7f4      	b.n	800a1c2 <__swsetup_r+0x8e>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e7f7      	b.n	800a1cc <__swsetup_r+0x98>
 800a1dc:	2000003c 	.word	0x2000003c

0800a1e0 <memset>:
 800a1e0:	4402      	add	r2, r0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d100      	bne.n	800a1ea <memset+0xa>
 800a1e8:	4770      	bx	lr
 800a1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ee:	e7f9      	b.n	800a1e4 <memset+0x4>

0800a1f0 <_close_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4d06      	ldr	r5, [pc, #24]	@ (800a20c <_close_r+0x1c>)
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	602b      	str	r3, [r5, #0]
 800a1fc:	f7f6 feef 	bl	8000fde <_close>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_close_r+0x1a>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_close_r+0x1a>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	20000dfc 	.word	0x20000dfc

0800a210 <_lseek_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d07      	ldr	r5, [pc, #28]	@ (800a230 <_lseek_r+0x20>)
 800a214:	4604      	mov	r4, r0
 800a216:	4608      	mov	r0, r1
 800a218:	4611      	mov	r1, r2
 800a21a:	2200      	movs	r2, #0
 800a21c:	602a      	str	r2, [r5, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	f7f6 ff04 	bl	800102c <_lseek>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_lseek_r+0x1e>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_lseek_r+0x1e>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20000dfc 	.word	0x20000dfc

0800a234 <_read_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	@ (800a254 <_read_r+0x20>)
 800a238:	4604      	mov	r4, r0
 800a23a:	4608      	mov	r0, r1
 800a23c:	4611      	mov	r1, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	602a      	str	r2, [r5, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	f7f6 fe92 	bl	8000f6c <_read>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_read_r+0x1e>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_read_r+0x1e>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	20000dfc 	.word	0x20000dfc

0800a258 <_sbrk_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	@ (800a274 <_sbrk_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f6 fef0 	bl	8001048 <_sbrk>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_sbrk_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_sbrk_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000dfc 	.word	0x20000dfc

0800a278 <_write_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_write_r+0x20>)
 800a27c:	4604      	mov	r4, r0
 800a27e:	4608      	mov	r0, r1
 800a280:	4611      	mov	r1, r2
 800a282:	2200      	movs	r2, #0
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	f7f6 fe8d 	bl	8000fa6 <_write>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_write_r+0x1e>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_write_r+0x1e>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20000dfc 	.word	0x20000dfc

0800a29c <__errno>:
 800a29c:	4b01      	ldr	r3, [pc, #4]	@ (800a2a4 <__errno+0x8>)
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	2000003c 	.word	0x2000003c

0800a2a8 <__libc_init_array>:
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a2e0 <__libc_init_array+0x38>)
 800a2ac:	4c0d      	ldr	r4, [pc, #52]	@ (800a2e4 <__libc_init_array+0x3c>)
 800a2ae:	1b64      	subs	r4, r4, r5
 800a2b0:	10a4      	asrs	r4, r4, #2
 800a2b2:	2600      	movs	r6, #0
 800a2b4:	42a6      	cmp	r6, r4
 800a2b6:	d109      	bne.n	800a2cc <__libc_init_array+0x24>
 800a2b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a2e8 <__libc_init_array+0x40>)
 800a2ba:	4c0c      	ldr	r4, [pc, #48]	@ (800a2ec <__libc_init_array+0x44>)
 800a2bc:	f000 fc66 	bl	800ab8c <_init>
 800a2c0:	1b64      	subs	r4, r4, r5
 800a2c2:	10a4      	asrs	r4, r4, #2
 800a2c4:	2600      	movs	r6, #0
 800a2c6:	42a6      	cmp	r6, r4
 800a2c8:	d105      	bne.n	800a2d6 <__libc_init_array+0x2e>
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2d0:	4798      	blx	r3
 800a2d2:	3601      	adds	r6, #1
 800a2d4:	e7ee      	b.n	800a2b4 <__libc_init_array+0xc>
 800a2d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2da:	4798      	blx	r3
 800a2dc:	3601      	adds	r6, #1
 800a2de:	e7f2      	b.n	800a2c6 <__libc_init_array+0x1e>
 800a2e0:	0800ac84 	.word	0x0800ac84
 800a2e4:	0800ac84 	.word	0x0800ac84
 800a2e8:	0800ac84 	.word	0x0800ac84
 800a2ec:	0800ac88 	.word	0x0800ac88

0800a2f0 <__retarget_lock_init_recursive>:
 800a2f0:	4770      	bx	lr

0800a2f2 <__retarget_lock_acquire_recursive>:
 800a2f2:	4770      	bx	lr

0800a2f4 <__retarget_lock_release_recursive>:
 800a2f4:	4770      	bx	lr
	...

0800a2f8 <_free_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d041      	beq.n	800a384 <_free_r+0x8c>
 800a300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a304:	1f0c      	subs	r4, r1, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	bfb8      	it	lt
 800a30a:	18e4      	addlt	r4, r4, r3
 800a30c:	f7ff fd52 	bl	8009db4 <__malloc_lock>
 800a310:	4a1d      	ldr	r2, [pc, #116]	@ (800a388 <_free_r+0x90>)
 800a312:	6813      	ldr	r3, [r2, #0]
 800a314:	b933      	cbnz	r3, 800a324 <_free_r+0x2c>
 800a316:	6063      	str	r3, [r4, #4]
 800a318:	6014      	str	r4, [r2, #0]
 800a31a:	4628      	mov	r0, r5
 800a31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a320:	f7ff bd4e 	b.w	8009dc0 <__malloc_unlock>
 800a324:	42a3      	cmp	r3, r4
 800a326:	d908      	bls.n	800a33a <_free_r+0x42>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	1821      	adds	r1, r4, r0
 800a32c:	428b      	cmp	r3, r1
 800a32e:	bf01      	itttt	eq
 800a330:	6819      	ldreq	r1, [r3, #0]
 800a332:	685b      	ldreq	r3, [r3, #4]
 800a334:	1809      	addeq	r1, r1, r0
 800a336:	6021      	streq	r1, [r4, #0]
 800a338:	e7ed      	b.n	800a316 <_free_r+0x1e>
 800a33a:	461a      	mov	r2, r3
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b10b      	cbz	r3, 800a344 <_free_r+0x4c>
 800a340:	42a3      	cmp	r3, r4
 800a342:	d9fa      	bls.n	800a33a <_free_r+0x42>
 800a344:	6811      	ldr	r1, [r2, #0]
 800a346:	1850      	adds	r0, r2, r1
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d10b      	bne.n	800a364 <_free_r+0x6c>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	4401      	add	r1, r0
 800a350:	1850      	adds	r0, r2, r1
 800a352:	4283      	cmp	r3, r0
 800a354:	6011      	str	r1, [r2, #0]
 800a356:	d1e0      	bne.n	800a31a <_free_r+0x22>
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	6053      	str	r3, [r2, #4]
 800a35e:	4408      	add	r0, r1
 800a360:	6010      	str	r0, [r2, #0]
 800a362:	e7da      	b.n	800a31a <_free_r+0x22>
 800a364:	d902      	bls.n	800a36c <_free_r+0x74>
 800a366:	230c      	movs	r3, #12
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	e7d6      	b.n	800a31a <_free_r+0x22>
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	1821      	adds	r1, r4, r0
 800a370:	428b      	cmp	r3, r1
 800a372:	bf04      	itt	eq
 800a374:	6819      	ldreq	r1, [r3, #0]
 800a376:	685b      	ldreq	r3, [r3, #4]
 800a378:	6063      	str	r3, [r4, #4]
 800a37a:	bf04      	itt	eq
 800a37c:	1809      	addeq	r1, r1, r0
 800a37e:	6021      	streq	r1, [r4, #0]
 800a380:	6054      	str	r4, [r2, #4]
 800a382:	e7ca      	b.n	800a31a <_free_r+0x22>
 800a384:	bd38      	pop	{r3, r4, r5, pc}
 800a386:	bf00      	nop
 800a388:	20000cbc 	.word	0x20000cbc

0800a38c <__sfputc_r>:
 800a38c:	6893      	ldr	r3, [r2, #8]
 800a38e:	3b01      	subs	r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	b410      	push	{r4}
 800a394:	6093      	str	r3, [r2, #8]
 800a396:	da08      	bge.n	800a3aa <__sfputc_r+0x1e>
 800a398:	6994      	ldr	r4, [r2, #24]
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	db01      	blt.n	800a3a2 <__sfputc_r+0x16>
 800a39e:	290a      	cmp	r1, #10
 800a3a0:	d103      	bne.n	800a3aa <__sfputc_r+0x1e>
 800a3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a6:	f7ff be86 	b.w	800a0b6 <__swbuf_r>
 800a3aa:	6813      	ldr	r3, [r2, #0]
 800a3ac:	1c58      	adds	r0, r3, #1
 800a3ae:	6010      	str	r0, [r2, #0]
 800a3b0:	7019      	strb	r1, [r3, #0]
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <__sfputs_r>:
 800a3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460f      	mov	r7, r1
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	18d5      	adds	r5, r2, r3
 800a3c4:	42ac      	cmp	r4, r5
 800a3c6:	d101      	bne.n	800a3cc <__sfputs_r+0x12>
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	e007      	b.n	800a3dc <__sfputs_r+0x22>
 800a3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d0:	463a      	mov	r2, r7
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ffda 	bl	800a38c <__sfputc_r>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d1f3      	bne.n	800a3c4 <__sfputs_r+0xa>
 800a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3e0 <_vfiprintf_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	b09d      	sub	sp, #116	@ 0x74
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	4698      	mov	r8, r3
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	b118      	cbz	r0, 800a3f8 <_vfiprintf_r+0x18>
 800a3f0:	6a03      	ldr	r3, [r0, #32]
 800a3f2:	b90b      	cbnz	r3, 800a3f8 <_vfiprintf_r+0x18>
 800a3f4:	f7ff fd76 	bl	8009ee4 <__sinit>
 800a3f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3fa:	07d9      	lsls	r1, r3, #31
 800a3fc:	d405      	bmi.n	800a40a <_vfiprintf_r+0x2a>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	059a      	lsls	r2, r3, #22
 800a402:	d402      	bmi.n	800a40a <_vfiprintf_r+0x2a>
 800a404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a406:	f7ff ff74 	bl	800a2f2 <__retarget_lock_acquire_recursive>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	071b      	lsls	r3, r3, #28
 800a40e:	d501      	bpl.n	800a414 <_vfiprintf_r+0x34>
 800a410:	692b      	ldr	r3, [r5, #16]
 800a412:	b99b      	cbnz	r3, 800a43c <_vfiprintf_r+0x5c>
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff fe8c 	bl	800a134 <__swsetup_r>
 800a41c:	b170      	cbz	r0, 800a43c <_vfiprintf_r+0x5c>
 800a41e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a420:	07dc      	lsls	r4, r3, #31
 800a422:	d504      	bpl.n	800a42e <_vfiprintf_r+0x4e>
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	b01d      	add	sp, #116	@ 0x74
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	0598      	lsls	r0, r3, #22
 800a432:	d4f7      	bmi.n	800a424 <_vfiprintf_r+0x44>
 800a434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a436:	f7ff ff5d 	bl	800a2f4 <__retarget_lock_release_recursive>
 800a43a:	e7f3      	b.n	800a424 <_vfiprintf_r+0x44>
 800a43c:	2300      	movs	r3, #0
 800a43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a440:	2320      	movs	r3, #32
 800a442:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a446:	f8cd 800c 	str.w	r8, [sp, #12]
 800a44a:	2330      	movs	r3, #48	@ 0x30
 800a44c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5fc <_vfiprintf_r+0x21c>
 800a450:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a454:	f04f 0901 	mov.w	r9, #1
 800a458:	4623      	mov	r3, r4
 800a45a:	469a      	mov	sl, r3
 800a45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a460:	b10a      	cbz	r2, 800a466 <_vfiprintf_r+0x86>
 800a462:	2a25      	cmp	r2, #37	@ 0x25
 800a464:	d1f9      	bne.n	800a45a <_vfiprintf_r+0x7a>
 800a466:	ebba 0b04 	subs.w	fp, sl, r4
 800a46a:	d00b      	beq.n	800a484 <_vfiprintf_r+0xa4>
 800a46c:	465b      	mov	r3, fp
 800a46e:	4622      	mov	r2, r4
 800a470:	4629      	mov	r1, r5
 800a472:	4630      	mov	r0, r6
 800a474:	f7ff ffa1 	bl	800a3ba <__sfputs_r>
 800a478:	3001      	adds	r0, #1
 800a47a:	f000 80a7 	beq.w	800a5cc <_vfiprintf_r+0x1ec>
 800a47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a480:	445a      	add	r2, fp
 800a482:	9209      	str	r2, [sp, #36]	@ 0x24
 800a484:	f89a 3000 	ldrb.w	r3, [sl]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 809f 	beq.w	800a5cc <_vfiprintf_r+0x1ec>
 800a48e:	2300      	movs	r3, #0
 800a490:	f04f 32ff 	mov.w	r2, #4294967295
 800a494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a498:	f10a 0a01 	add.w	sl, sl, #1
 800a49c:	9304      	str	r3, [sp, #16]
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4a6:	4654      	mov	r4, sl
 800a4a8:	2205      	movs	r2, #5
 800a4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ae:	4853      	ldr	r0, [pc, #332]	@ (800a5fc <_vfiprintf_r+0x21c>)
 800a4b0:	f7f5 fe96 	bl	80001e0 <memchr>
 800a4b4:	9a04      	ldr	r2, [sp, #16]
 800a4b6:	b9d8      	cbnz	r0, 800a4f0 <_vfiprintf_r+0x110>
 800a4b8:	06d1      	lsls	r1, r2, #27
 800a4ba:	bf44      	itt	mi
 800a4bc:	2320      	movmi	r3, #32
 800a4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4c2:	0713      	lsls	r3, r2, #28
 800a4c4:	bf44      	itt	mi
 800a4c6:	232b      	movmi	r3, #43	@ 0x2b
 800a4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d2:	d015      	beq.n	800a500 <_vfiprintf_r+0x120>
 800a4d4:	9a07      	ldr	r2, [sp, #28]
 800a4d6:	4654      	mov	r4, sl
 800a4d8:	2000      	movs	r0, #0
 800a4da:	f04f 0c0a 	mov.w	ip, #10
 800a4de:	4621      	mov	r1, r4
 800a4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e4:	3b30      	subs	r3, #48	@ 0x30
 800a4e6:	2b09      	cmp	r3, #9
 800a4e8:	d94b      	bls.n	800a582 <_vfiprintf_r+0x1a2>
 800a4ea:	b1b0      	cbz	r0, 800a51a <_vfiprintf_r+0x13a>
 800a4ec:	9207      	str	r2, [sp, #28]
 800a4ee:	e014      	b.n	800a51a <_vfiprintf_r+0x13a>
 800a4f0:	eba0 0308 	sub.w	r3, r0, r8
 800a4f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	46a2      	mov	sl, r4
 800a4fe:	e7d2      	b.n	800a4a6 <_vfiprintf_r+0xc6>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	1d19      	adds	r1, r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	9103      	str	r1, [sp, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	bfbb      	ittet	lt
 800a50c:	425b      	neglt	r3, r3
 800a50e:	f042 0202 	orrlt.w	r2, r2, #2
 800a512:	9307      	strge	r3, [sp, #28]
 800a514:	9307      	strlt	r3, [sp, #28]
 800a516:	bfb8      	it	lt
 800a518:	9204      	strlt	r2, [sp, #16]
 800a51a:	7823      	ldrb	r3, [r4, #0]
 800a51c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a51e:	d10a      	bne.n	800a536 <_vfiprintf_r+0x156>
 800a520:	7863      	ldrb	r3, [r4, #1]
 800a522:	2b2a      	cmp	r3, #42	@ 0x2a
 800a524:	d132      	bne.n	800a58c <_vfiprintf_r+0x1ac>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	1d1a      	adds	r2, r3, #4
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	9203      	str	r2, [sp, #12]
 800a52e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a532:	3402      	adds	r4, #2
 800a534:	9305      	str	r3, [sp, #20]
 800a536:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a60c <_vfiprintf_r+0x22c>
 800a53a:	7821      	ldrb	r1, [r4, #0]
 800a53c:	2203      	movs	r2, #3
 800a53e:	4650      	mov	r0, sl
 800a540:	f7f5 fe4e 	bl	80001e0 <memchr>
 800a544:	b138      	cbz	r0, 800a556 <_vfiprintf_r+0x176>
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	eba0 000a 	sub.w	r0, r0, sl
 800a54c:	2240      	movs	r2, #64	@ 0x40
 800a54e:	4082      	lsls	r2, r0
 800a550:	4313      	orrs	r3, r2
 800a552:	3401      	adds	r4, #1
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55a:	4829      	ldr	r0, [pc, #164]	@ (800a600 <_vfiprintf_r+0x220>)
 800a55c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a560:	2206      	movs	r2, #6
 800a562:	f7f5 fe3d 	bl	80001e0 <memchr>
 800a566:	2800      	cmp	r0, #0
 800a568:	d03f      	beq.n	800a5ea <_vfiprintf_r+0x20a>
 800a56a:	4b26      	ldr	r3, [pc, #152]	@ (800a604 <_vfiprintf_r+0x224>)
 800a56c:	bb1b      	cbnz	r3, 800a5b6 <_vfiprintf_r+0x1d6>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	3307      	adds	r3, #7
 800a572:	f023 0307 	bic.w	r3, r3, #7
 800a576:	3308      	adds	r3, #8
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a57c:	443b      	add	r3, r7
 800a57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a580:	e76a      	b.n	800a458 <_vfiprintf_r+0x78>
 800a582:	fb0c 3202 	mla	r2, ip, r2, r3
 800a586:	460c      	mov	r4, r1
 800a588:	2001      	movs	r0, #1
 800a58a:	e7a8      	b.n	800a4de <_vfiprintf_r+0xfe>
 800a58c:	2300      	movs	r3, #0
 800a58e:	3401      	adds	r4, #1
 800a590:	9305      	str	r3, [sp, #20]
 800a592:	4619      	mov	r1, r3
 800a594:	f04f 0c0a 	mov.w	ip, #10
 800a598:	4620      	mov	r0, r4
 800a59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a59e:	3a30      	subs	r2, #48	@ 0x30
 800a5a0:	2a09      	cmp	r2, #9
 800a5a2:	d903      	bls.n	800a5ac <_vfiprintf_r+0x1cc>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0c6      	beq.n	800a536 <_vfiprintf_r+0x156>
 800a5a8:	9105      	str	r1, [sp, #20]
 800a5aa:	e7c4      	b.n	800a536 <_vfiprintf_r+0x156>
 800a5ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e7f0      	b.n	800a598 <_vfiprintf_r+0x1b8>
 800a5b6:	ab03      	add	r3, sp, #12
 800a5b8:	9300      	str	r3, [sp, #0]
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4b12      	ldr	r3, [pc, #72]	@ (800a608 <_vfiprintf_r+0x228>)
 800a5be:	a904      	add	r1, sp, #16
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f3af 8000 	nop.w
 800a5c6:	4607      	mov	r7, r0
 800a5c8:	1c78      	adds	r0, r7, #1
 800a5ca:	d1d6      	bne.n	800a57a <_vfiprintf_r+0x19a>
 800a5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ce:	07d9      	lsls	r1, r3, #31
 800a5d0:	d405      	bmi.n	800a5de <_vfiprintf_r+0x1fe>
 800a5d2:	89ab      	ldrh	r3, [r5, #12]
 800a5d4:	059a      	lsls	r2, r3, #22
 800a5d6:	d402      	bmi.n	800a5de <_vfiprintf_r+0x1fe>
 800a5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5da:	f7ff fe8b 	bl	800a2f4 <__retarget_lock_release_recursive>
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	065b      	lsls	r3, r3, #25
 800a5e2:	f53f af1f 	bmi.w	800a424 <_vfiprintf_r+0x44>
 800a5e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5e8:	e71e      	b.n	800a428 <_vfiprintf_r+0x48>
 800a5ea:	ab03      	add	r3, sp, #12
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <_vfiprintf_r+0x228>)
 800a5f2:	a904      	add	r1, sp, #16
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f000 f879 	bl	800a6ec <_printf_i>
 800a5fa:	e7e4      	b.n	800a5c6 <_vfiprintf_r+0x1e6>
 800a5fc:	0800ac48 	.word	0x0800ac48
 800a600:	0800ac52 	.word	0x0800ac52
 800a604:	00000000 	.word	0x00000000
 800a608:	0800a3bb 	.word	0x0800a3bb
 800a60c:	0800ac4e 	.word	0x0800ac4e

0800a610 <_printf_common>:
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	4616      	mov	r6, r2
 800a616:	4698      	mov	r8, r3
 800a618:	688a      	ldr	r2, [r1, #8]
 800a61a:	690b      	ldr	r3, [r1, #16]
 800a61c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a620:	4293      	cmp	r3, r2
 800a622:	bfb8      	it	lt
 800a624:	4613      	movlt	r3, r2
 800a626:	6033      	str	r3, [r6, #0]
 800a628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a62c:	4607      	mov	r7, r0
 800a62e:	460c      	mov	r4, r1
 800a630:	b10a      	cbz	r2, 800a636 <_printf_common+0x26>
 800a632:	3301      	adds	r3, #1
 800a634:	6033      	str	r3, [r6, #0]
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	0699      	lsls	r1, r3, #26
 800a63a:	bf42      	ittt	mi
 800a63c:	6833      	ldrmi	r3, [r6, #0]
 800a63e:	3302      	addmi	r3, #2
 800a640:	6033      	strmi	r3, [r6, #0]
 800a642:	6825      	ldr	r5, [r4, #0]
 800a644:	f015 0506 	ands.w	r5, r5, #6
 800a648:	d106      	bne.n	800a658 <_printf_common+0x48>
 800a64a:	f104 0a19 	add.w	sl, r4, #25
 800a64e:	68e3      	ldr	r3, [r4, #12]
 800a650:	6832      	ldr	r2, [r6, #0]
 800a652:	1a9b      	subs	r3, r3, r2
 800a654:	42ab      	cmp	r3, r5
 800a656:	dc26      	bgt.n	800a6a6 <_printf_common+0x96>
 800a658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a65c:	6822      	ldr	r2, [r4, #0]
 800a65e:	3b00      	subs	r3, #0
 800a660:	bf18      	it	ne
 800a662:	2301      	movne	r3, #1
 800a664:	0692      	lsls	r2, r2, #26
 800a666:	d42b      	bmi.n	800a6c0 <_printf_common+0xb0>
 800a668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a66c:	4641      	mov	r1, r8
 800a66e:	4638      	mov	r0, r7
 800a670:	47c8      	blx	r9
 800a672:	3001      	adds	r0, #1
 800a674:	d01e      	beq.n	800a6b4 <_printf_common+0xa4>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	6922      	ldr	r2, [r4, #16]
 800a67a:	f003 0306 	and.w	r3, r3, #6
 800a67e:	2b04      	cmp	r3, #4
 800a680:	bf02      	ittt	eq
 800a682:	68e5      	ldreq	r5, [r4, #12]
 800a684:	6833      	ldreq	r3, [r6, #0]
 800a686:	1aed      	subeq	r5, r5, r3
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	bf0c      	ite	eq
 800a68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a690:	2500      	movne	r5, #0
 800a692:	4293      	cmp	r3, r2
 800a694:	bfc4      	itt	gt
 800a696:	1a9b      	subgt	r3, r3, r2
 800a698:	18ed      	addgt	r5, r5, r3
 800a69a:	2600      	movs	r6, #0
 800a69c:	341a      	adds	r4, #26
 800a69e:	42b5      	cmp	r5, r6
 800a6a0:	d11a      	bne.n	800a6d8 <_printf_common+0xc8>
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e008      	b.n	800a6b8 <_printf_common+0xa8>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	4641      	mov	r1, r8
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	47c8      	blx	r9
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d103      	bne.n	800a6bc <_printf_common+0xac>
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6bc:	3501      	adds	r5, #1
 800a6be:	e7c6      	b.n	800a64e <_printf_common+0x3e>
 800a6c0:	18e1      	adds	r1, r4, r3
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	2030      	movs	r0, #48	@ 0x30
 800a6c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a6ca:	4422      	add	r2, r4
 800a6cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6d4:	3302      	adds	r3, #2
 800a6d6:	e7c7      	b.n	800a668 <_printf_common+0x58>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	4622      	mov	r2, r4
 800a6dc:	4641      	mov	r1, r8
 800a6de:	4638      	mov	r0, r7
 800a6e0:	47c8      	blx	r9
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	d0e6      	beq.n	800a6b4 <_printf_common+0xa4>
 800a6e6:	3601      	adds	r6, #1
 800a6e8:	e7d9      	b.n	800a69e <_printf_common+0x8e>
	...

0800a6ec <_printf_i>:
 800a6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	7e0f      	ldrb	r7, [r1, #24]
 800a6f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6f4:	2f78      	cmp	r7, #120	@ 0x78
 800a6f6:	4691      	mov	r9, r2
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	469a      	mov	sl, r3
 800a6fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a702:	d807      	bhi.n	800a714 <_printf_i+0x28>
 800a704:	2f62      	cmp	r7, #98	@ 0x62
 800a706:	d80a      	bhi.n	800a71e <_printf_i+0x32>
 800a708:	2f00      	cmp	r7, #0
 800a70a:	f000 80d2 	beq.w	800a8b2 <_printf_i+0x1c6>
 800a70e:	2f58      	cmp	r7, #88	@ 0x58
 800a710:	f000 80b9 	beq.w	800a886 <_printf_i+0x19a>
 800a714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a71c:	e03a      	b.n	800a794 <_printf_i+0xa8>
 800a71e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a722:	2b15      	cmp	r3, #21
 800a724:	d8f6      	bhi.n	800a714 <_printf_i+0x28>
 800a726:	a101      	add	r1, pc, #4	@ (adr r1, 800a72c <_printf_i+0x40>)
 800a728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a72c:	0800a785 	.word	0x0800a785
 800a730:	0800a799 	.word	0x0800a799
 800a734:	0800a715 	.word	0x0800a715
 800a738:	0800a715 	.word	0x0800a715
 800a73c:	0800a715 	.word	0x0800a715
 800a740:	0800a715 	.word	0x0800a715
 800a744:	0800a799 	.word	0x0800a799
 800a748:	0800a715 	.word	0x0800a715
 800a74c:	0800a715 	.word	0x0800a715
 800a750:	0800a715 	.word	0x0800a715
 800a754:	0800a715 	.word	0x0800a715
 800a758:	0800a899 	.word	0x0800a899
 800a75c:	0800a7c3 	.word	0x0800a7c3
 800a760:	0800a853 	.word	0x0800a853
 800a764:	0800a715 	.word	0x0800a715
 800a768:	0800a715 	.word	0x0800a715
 800a76c:	0800a8bb 	.word	0x0800a8bb
 800a770:	0800a715 	.word	0x0800a715
 800a774:	0800a7c3 	.word	0x0800a7c3
 800a778:	0800a715 	.word	0x0800a715
 800a77c:	0800a715 	.word	0x0800a715
 800a780:	0800a85b 	.word	0x0800a85b
 800a784:	6833      	ldr	r3, [r6, #0]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6032      	str	r2, [r6, #0]
 800a78c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a794:	2301      	movs	r3, #1
 800a796:	e09d      	b.n	800a8d4 <_printf_i+0x1e8>
 800a798:	6833      	ldr	r3, [r6, #0]
 800a79a:	6820      	ldr	r0, [r4, #0]
 800a79c:	1d19      	adds	r1, r3, #4
 800a79e:	6031      	str	r1, [r6, #0]
 800a7a0:	0606      	lsls	r6, r0, #24
 800a7a2:	d501      	bpl.n	800a7a8 <_printf_i+0xbc>
 800a7a4:	681d      	ldr	r5, [r3, #0]
 800a7a6:	e003      	b.n	800a7b0 <_printf_i+0xc4>
 800a7a8:	0645      	lsls	r5, r0, #25
 800a7aa:	d5fb      	bpl.n	800a7a4 <_printf_i+0xb8>
 800a7ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	da03      	bge.n	800a7bc <_printf_i+0xd0>
 800a7b4:	232d      	movs	r3, #45	@ 0x2d
 800a7b6:	426d      	negs	r5, r5
 800a7b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7bc:	4859      	ldr	r0, [pc, #356]	@ (800a924 <_printf_i+0x238>)
 800a7be:	230a      	movs	r3, #10
 800a7c0:	e011      	b.n	800a7e6 <_printf_i+0xfa>
 800a7c2:	6821      	ldr	r1, [r4, #0]
 800a7c4:	6833      	ldr	r3, [r6, #0]
 800a7c6:	0608      	lsls	r0, r1, #24
 800a7c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a7cc:	d402      	bmi.n	800a7d4 <_printf_i+0xe8>
 800a7ce:	0649      	lsls	r1, r1, #25
 800a7d0:	bf48      	it	mi
 800a7d2:	b2ad      	uxthmi	r5, r5
 800a7d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7d6:	4853      	ldr	r0, [pc, #332]	@ (800a924 <_printf_i+0x238>)
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	bf14      	ite	ne
 800a7dc:	230a      	movne	r3, #10
 800a7de:	2308      	moveq	r3, #8
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7e6:	6866      	ldr	r6, [r4, #4]
 800a7e8:	60a6      	str	r6, [r4, #8]
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	bfa2      	ittt	ge
 800a7ee:	6821      	ldrge	r1, [r4, #0]
 800a7f0:	f021 0104 	bicge.w	r1, r1, #4
 800a7f4:	6021      	strge	r1, [r4, #0]
 800a7f6:	b90d      	cbnz	r5, 800a7fc <_printf_i+0x110>
 800a7f8:	2e00      	cmp	r6, #0
 800a7fa:	d04b      	beq.n	800a894 <_printf_i+0x1a8>
 800a7fc:	4616      	mov	r6, r2
 800a7fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a802:	fb03 5711 	mls	r7, r3, r1, r5
 800a806:	5dc7      	ldrb	r7, [r0, r7]
 800a808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a80c:	462f      	mov	r7, r5
 800a80e:	42bb      	cmp	r3, r7
 800a810:	460d      	mov	r5, r1
 800a812:	d9f4      	bls.n	800a7fe <_printf_i+0x112>
 800a814:	2b08      	cmp	r3, #8
 800a816:	d10b      	bne.n	800a830 <_printf_i+0x144>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	07df      	lsls	r7, r3, #31
 800a81c:	d508      	bpl.n	800a830 <_printf_i+0x144>
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	4299      	cmp	r1, r3
 800a824:	bfde      	ittt	le
 800a826:	2330      	movle	r3, #48	@ 0x30
 800a828:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a82c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a830:	1b92      	subs	r2, r2, r6
 800a832:	6122      	str	r2, [r4, #16]
 800a834:	f8cd a000 	str.w	sl, [sp]
 800a838:	464b      	mov	r3, r9
 800a83a:	aa03      	add	r2, sp, #12
 800a83c:	4621      	mov	r1, r4
 800a83e:	4640      	mov	r0, r8
 800a840:	f7ff fee6 	bl	800a610 <_printf_common>
 800a844:	3001      	adds	r0, #1
 800a846:	d14a      	bne.n	800a8de <_printf_i+0x1f2>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	b004      	add	sp, #16
 800a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	f043 0320 	orr.w	r3, r3, #32
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	4833      	ldr	r0, [pc, #204]	@ (800a928 <_printf_i+0x23c>)
 800a85c:	2778      	movs	r7, #120	@ 0x78
 800a85e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	6831      	ldr	r1, [r6, #0]
 800a866:	061f      	lsls	r7, r3, #24
 800a868:	f851 5b04 	ldr.w	r5, [r1], #4
 800a86c:	d402      	bmi.n	800a874 <_printf_i+0x188>
 800a86e:	065f      	lsls	r7, r3, #25
 800a870:	bf48      	it	mi
 800a872:	b2ad      	uxthmi	r5, r5
 800a874:	6031      	str	r1, [r6, #0]
 800a876:	07d9      	lsls	r1, r3, #31
 800a878:	bf44      	itt	mi
 800a87a:	f043 0320 	orrmi.w	r3, r3, #32
 800a87e:	6023      	strmi	r3, [r4, #0]
 800a880:	b11d      	cbz	r5, 800a88a <_printf_i+0x19e>
 800a882:	2310      	movs	r3, #16
 800a884:	e7ac      	b.n	800a7e0 <_printf_i+0xf4>
 800a886:	4827      	ldr	r0, [pc, #156]	@ (800a924 <_printf_i+0x238>)
 800a888:	e7e9      	b.n	800a85e <_printf_i+0x172>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	f023 0320 	bic.w	r3, r3, #32
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	e7f6      	b.n	800a882 <_printf_i+0x196>
 800a894:	4616      	mov	r6, r2
 800a896:	e7bd      	b.n	800a814 <_printf_i+0x128>
 800a898:	6833      	ldr	r3, [r6, #0]
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	6961      	ldr	r1, [r4, #20]
 800a89e:	1d18      	adds	r0, r3, #4
 800a8a0:	6030      	str	r0, [r6, #0]
 800a8a2:	062e      	lsls	r6, r5, #24
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	d501      	bpl.n	800a8ac <_printf_i+0x1c0>
 800a8a8:	6019      	str	r1, [r3, #0]
 800a8aa:	e002      	b.n	800a8b2 <_printf_i+0x1c6>
 800a8ac:	0668      	lsls	r0, r5, #25
 800a8ae:	d5fb      	bpl.n	800a8a8 <_printf_i+0x1bc>
 800a8b0:	8019      	strh	r1, [r3, #0]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	4616      	mov	r6, r2
 800a8b8:	e7bc      	b.n	800a834 <_printf_i+0x148>
 800a8ba:	6833      	ldr	r3, [r6, #0]
 800a8bc:	1d1a      	adds	r2, r3, #4
 800a8be:	6032      	str	r2, [r6, #0]
 800a8c0:	681e      	ldr	r6, [r3, #0]
 800a8c2:	6862      	ldr	r2, [r4, #4]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f7f5 fc8a 	bl	80001e0 <memchr>
 800a8cc:	b108      	cbz	r0, 800a8d2 <_printf_i+0x1e6>
 800a8ce:	1b80      	subs	r0, r0, r6
 800a8d0:	6060      	str	r0, [r4, #4]
 800a8d2:	6863      	ldr	r3, [r4, #4]
 800a8d4:	6123      	str	r3, [r4, #16]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8dc:	e7aa      	b.n	800a834 <_printf_i+0x148>
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	47d0      	blx	sl
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d0ad      	beq.n	800a848 <_printf_i+0x15c>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	079b      	lsls	r3, r3, #30
 800a8f0:	d413      	bmi.n	800a91a <_printf_i+0x22e>
 800a8f2:	68e0      	ldr	r0, [r4, #12]
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	4298      	cmp	r0, r3
 800a8f8:	bfb8      	it	lt
 800a8fa:	4618      	movlt	r0, r3
 800a8fc:	e7a6      	b.n	800a84c <_printf_i+0x160>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4632      	mov	r2, r6
 800a902:	4649      	mov	r1, r9
 800a904:	4640      	mov	r0, r8
 800a906:	47d0      	blx	sl
 800a908:	3001      	adds	r0, #1
 800a90a:	d09d      	beq.n	800a848 <_printf_i+0x15c>
 800a90c:	3501      	adds	r5, #1
 800a90e:	68e3      	ldr	r3, [r4, #12]
 800a910:	9903      	ldr	r1, [sp, #12]
 800a912:	1a5b      	subs	r3, r3, r1
 800a914:	42ab      	cmp	r3, r5
 800a916:	dcf2      	bgt.n	800a8fe <_printf_i+0x212>
 800a918:	e7eb      	b.n	800a8f2 <_printf_i+0x206>
 800a91a:	2500      	movs	r5, #0
 800a91c:	f104 0619 	add.w	r6, r4, #25
 800a920:	e7f5      	b.n	800a90e <_printf_i+0x222>
 800a922:	bf00      	nop
 800a924:	0800ac59 	.word	0x0800ac59
 800a928:	0800ac6a 	.word	0x0800ac6a

0800a92c <__sflush_r>:
 800a92c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	0716      	lsls	r6, r2, #28
 800a936:	4605      	mov	r5, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	d454      	bmi.n	800a9e6 <__sflush_r+0xba>
 800a93c:	684b      	ldr	r3, [r1, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	dc02      	bgt.n	800a948 <__sflush_r+0x1c>
 800a942:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	dd48      	ble.n	800a9da <__sflush_r+0xae>
 800a948:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	d045      	beq.n	800a9da <__sflush_r+0xae>
 800a94e:	2300      	movs	r3, #0
 800a950:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a954:	682f      	ldr	r7, [r5, #0]
 800a956:	6a21      	ldr	r1, [r4, #32]
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	d030      	beq.n	800a9be <__sflush_r+0x92>
 800a95c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	0759      	lsls	r1, r3, #29
 800a962:	d505      	bpl.n	800a970 <__sflush_r+0x44>
 800a964:	6863      	ldr	r3, [r4, #4]
 800a966:	1ad2      	subs	r2, r2, r3
 800a968:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a96a:	b10b      	cbz	r3, 800a970 <__sflush_r+0x44>
 800a96c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a96e:	1ad2      	subs	r2, r2, r3
 800a970:	2300      	movs	r3, #0
 800a972:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a974:	6a21      	ldr	r1, [r4, #32]
 800a976:	4628      	mov	r0, r5
 800a978:	47b0      	blx	r6
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	d106      	bne.n	800a98e <__sflush_r+0x62>
 800a980:	6829      	ldr	r1, [r5, #0]
 800a982:	291d      	cmp	r1, #29
 800a984:	d82b      	bhi.n	800a9de <__sflush_r+0xb2>
 800a986:	4a2a      	ldr	r2, [pc, #168]	@ (800aa30 <__sflush_r+0x104>)
 800a988:	410a      	asrs	r2, r1
 800a98a:	07d6      	lsls	r6, r2, #31
 800a98c:	d427      	bmi.n	800a9de <__sflush_r+0xb2>
 800a98e:	2200      	movs	r2, #0
 800a990:	6062      	str	r2, [r4, #4]
 800a992:	04d9      	lsls	r1, r3, #19
 800a994:	6922      	ldr	r2, [r4, #16]
 800a996:	6022      	str	r2, [r4, #0]
 800a998:	d504      	bpl.n	800a9a4 <__sflush_r+0x78>
 800a99a:	1c42      	adds	r2, r0, #1
 800a99c:	d101      	bne.n	800a9a2 <__sflush_r+0x76>
 800a99e:	682b      	ldr	r3, [r5, #0]
 800a9a0:	b903      	cbnz	r3, 800a9a4 <__sflush_r+0x78>
 800a9a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9a6:	602f      	str	r7, [r5, #0]
 800a9a8:	b1b9      	cbz	r1, 800a9da <__sflush_r+0xae>
 800a9aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9ae:	4299      	cmp	r1, r3
 800a9b0:	d002      	beq.n	800a9b8 <__sflush_r+0x8c>
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7ff fca0 	bl	800a2f8 <_free_r>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9bc:	e00d      	b.n	800a9da <__sflush_r+0xae>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b0      	blx	r6
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	1c50      	adds	r0, r2, #1
 800a9c8:	d1c9      	bne.n	800a95e <__sflush_r+0x32>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0c6      	beq.n	800a95e <__sflush_r+0x32>
 800a9d0:	2b1d      	cmp	r3, #29
 800a9d2:	d001      	beq.n	800a9d8 <__sflush_r+0xac>
 800a9d4:	2b16      	cmp	r3, #22
 800a9d6:	d11e      	bne.n	800aa16 <__sflush_r+0xea>
 800a9d8:	602f      	str	r7, [r5, #0]
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e022      	b.n	800aa24 <__sflush_r+0xf8>
 800a9de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9e2:	b21b      	sxth	r3, r3
 800a9e4:	e01b      	b.n	800aa1e <__sflush_r+0xf2>
 800a9e6:	690f      	ldr	r7, [r1, #16]
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	d0f6      	beq.n	800a9da <__sflush_r+0xae>
 800a9ec:	0793      	lsls	r3, r2, #30
 800a9ee:	680e      	ldr	r6, [r1, #0]
 800a9f0:	bf08      	it	eq
 800a9f2:	694b      	ldreq	r3, [r1, #20]
 800a9f4:	600f      	str	r7, [r1, #0]
 800a9f6:	bf18      	it	ne
 800a9f8:	2300      	movne	r3, #0
 800a9fa:	eba6 0807 	sub.w	r8, r6, r7
 800a9fe:	608b      	str	r3, [r1, #8]
 800aa00:	f1b8 0f00 	cmp.w	r8, #0
 800aa04:	dde9      	ble.n	800a9da <__sflush_r+0xae>
 800aa06:	6a21      	ldr	r1, [r4, #32]
 800aa08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa0a:	4643      	mov	r3, r8
 800aa0c:	463a      	mov	r2, r7
 800aa0e:	4628      	mov	r0, r5
 800aa10:	47b0      	blx	r6
 800aa12:	2800      	cmp	r0, #0
 800aa14:	dc08      	bgt.n	800aa28 <__sflush_r+0xfc>
 800aa16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa1e:	81a3      	strh	r3, [r4, #12]
 800aa20:	f04f 30ff 	mov.w	r0, #4294967295
 800aa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa28:	4407      	add	r7, r0
 800aa2a:	eba8 0800 	sub.w	r8, r8, r0
 800aa2e:	e7e7      	b.n	800aa00 <__sflush_r+0xd4>
 800aa30:	dfbffffe 	.word	0xdfbffffe

0800aa34 <_fflush_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	4605      	mov	r5, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	b913      	cbnz	r3, 800aa44 <_fflush_r+0x10>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	4628      	mov	r0, r5
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	b118      	cbz	r0, 800aa4e <_fflush_r+0x1a>
 800aa46:	6a03      	ldr	r3, [r0, #32]
 800aa48:	b90b      	cbnz	r3, 800aa4e <_fflush_r+0x1a>
 800aa4a:	f7ff fa4b 	bl	8009ee4 <__sinit>
 800aa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0f3      	beq.n	800aa3e <_fflush_r+0xa>
 800aa56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa58:	07d0      	lsls	r0, r2, #31
 800aa5a:	d404      	bmi.n	800aa66 <_fflush_r+0x32>
 800aa5c:	0599      	lsls	r1, r3, #22
 800aa5e:	d402      	bmi.n	800aa66 <_fflush_r+0x32>
 800aa60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa62:	f7ff fc46 	bl	800a2f2 <__retarget_lock_acquire_recursive>
 800aa66:	4628      	mov	r0, r5
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f7ff ff5f 	bl	800a92c <__sflush_r>
 800aa6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa70:	07da      	lsls	r2, r3, #31
 800aa72:	4605      	mov	r5, r0
 800aa74:	d4e4      	bmi.n	800aa40 <_fflush_r+0xc>
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	059b      	lsls	r3, r3, #22
 800aa7a:	d4e1      	bmi.n	800aa40 <_fflush_r+0xc>
 800aa7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa7e:	f7ff fc39 	bl	800a2f4 <__retarget_lock_release_recursive>
 800aa82:	e7dd      	b.n	800aa40 <_fflush_r+0xc>

0800aa84 <__swhatbuf_r>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	460c      	mov	r4, r1
 800aa88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	b096      	sub	sp, #88	@ 0x58
 800aa90:	4615      	mov	r5, r2
 800aa92:	461e      	mov	r6, r3
 800aa94:	da0d      	bge.n	800aab2 <__swhatbuf_r+0x2e>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa9c:	f04f 0100 	mov.w	r1, #0
 800aaa0:	bf14      	ite	ne
 800aaa2:	2340      	movne	r3, #64	@ 0x40
 800aaa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	6031      	str	r1, [r6, #0]
 800aaac:	602b      	str	r3, [r5, #0]
 800aaae:	b016      	add	sp, #88	@ 0x58
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	466a      	mov	r2, sp
 800aab4:	f000 f848 	bl	800ab48 <_fstat_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dbec      	blt.n	800aa96 <__swhatbuf_r+0x12>
 800aabc:	9901      	ldr	r1, [sp, #4]
 800aabe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aac2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aac6:	4259      	negs	r1, r3
 800aac8:	4159      	adcs	r1, r3
 800aaca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aace:	e7eb      	b.n	800aaa8 <__swhatbuf_r+0x24>

0800aad0 <__smakebuf_r>:
 800aad0:	898b      	ldrh	r3, [r1, #12]
 800aad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aad4:	079d      	lsls	r5, r3, #30
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	d507      	bpl.n	800aaec <__smakebuf_r+0x1c>
 800aadc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	2301      	movs	r3, #1
 800aae6:	6163      	str	r3, [r4, #20]
 800aae8:	b003      	add	sp, #12
 800aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaec:	ab01      	add	r3, sp, #4
 800aaee:	466a      	mov	r2, sp
 800aaf0:	f7ff ffc8 	bl	800aa84 <__swhatbuf_r>
 800aaf4:	9f00      	ldr	r7, [sp, #0]
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	4639      	mov	r1, r7
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7ff f8da 	bl	8009cb4 <_malloc_r>
 800ab00:	b948      	cbnz	r0, 800ab16 <__smakebuf_r+0x46>
 800ab02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab06:	059a      	lsls	r2, r3, #22
 800ab08:	d4ee      	bmi.n	800aae8 <__smakebuf_r+0x18>
 800ab0a:	f023 0303 	bic.w	r3, r3, #3
 800ab0e:	f043 0302 	orr.w	r3, r3, #2
 800ab12:	81a3      	strh	r3, [r4, #12]
 800ab14:	e7e2      	b.n	800aadc <__smakebuf_r+0xc>
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	6020      	str	r0, [r4, #0]
 800ab1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	9b01      	ldr	r3, [sp, #4]
 800ab22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab26:	b15b      	cbz	r3, 800ab40 <__smakebuf_r+0x70>
 800ab28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f000 f81d 	bl	800ab6c <_isatty_r>
 800ab32:	b128      	cbz	r0, 800ab40 <__smakebuf_r+0x70>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f023 0303 	bic.w	r3, r3, #3
 800ab3a:	f043 0301 	orr.w	r3, r3, #1
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	431d      	orrs	r5, r3
 800ab44:	81a5      	strh	r5, [r4, #12]
 800ab46:	e7cf      	b.n	800aae8 <__smakebuf_r+0x18>

0800ab48 <_fstat_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d07      	ldr	r5, [pc, #28]	@ (800ab68 <_fstat_r+0x20>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	4611      	mov	r1, r2
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	f7f6 fa4e 	bl	8000ff6 <_fstat>
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	d102      	bne.n	800ab64 <_fstat_r+0x1c>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	b103      	cbz	r3, 800ab64 <_fstat_r+0x1c>
 800ab62:	6023      	str	r3, [r4, #0]
 800ab64:	bd38      	pop	{r3, r4, r5, pc}
 800ab66:	bf00      	nop
 800ab68:	20000dfc 	.word	0x20000dfc

0800ab6c <_isatty_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d06      	ldr	r5, [pc, #24]	@ (800ab88 <_isatty_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7f6 fa4d 	bl	8001016 <_isatty>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_isatty_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_isatty_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	20000dfc 	.word	0x20000dfc

0800ab8c <_init>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr

0800ab98 <_fini>:
 800ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9a:	bf00      	nop
 800ab9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab9e:	bc08      	pop	{r3}
 800aba0:	469e      	mov	lr, r3
 800aba2:	4770      	bx	lr
