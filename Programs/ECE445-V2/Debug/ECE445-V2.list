
ECE445-V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004500  08004500  00005500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004528  08004528  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000010  08004540  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08004540  0000636c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b793  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fba  00000000  00000000  000117d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00013790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000795  00000000  00000000  00014170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001ce9  00000000  00000000  00014905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d518  00000000  00000000  000165ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f0c1  00000000  00000000  00023b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  000b2c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000b5518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080044e8 	.word	0x080044e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080044e8 	.word	0x080044e8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96a 	b.w	8000cb0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460c      	mov	r4, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14e      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a00:	4694      	mov	ip, r2
 8000a02:	458c      	cmp	ip, r1
 8000a04:	4686      	mov	lr, r0
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	d962      	bls.n	8000ad2 <__udivmoddi4+0xde>
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0320 	rsb	r3, r2, #32
 8000a12:	4091      	lsls	r1, r2
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a26:	fa1f f68c 	uxth.w	r6, ip
 8000a2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a32:	fb07 1114 	mls	r1, r7, r4, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb04 f106 	mul.w	r1, r4, r6
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4a:	f080 8112 	bcs.w	8000c72 <__udivmoddi4+0x27e>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 810f 	bls.w	8000c72 <__udivmoddi4+0x27e>
 8000a54:	3c02      	subs	r4, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a62:	fb07 1110 	mls	r1, r7, r0, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb00 f606 	mul.w	r6, r0, r6
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7a:	f080 80fc 	bcs.w	8000c76 <__udivmoddi4+0x282>
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f240 80f9 	bls.w	8000c76 <__udivmoddi4+0x282>
 8000a84:	4463      	add	r3, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1b9b      	subs	r3, r3, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d905      	bls.n	8000aae <__udivmoddi4+0xba>
 8000aa2:	b10d      	cbz	r5, 8000aa8 <__udivmoddi4+0xb4>
 8000aa4:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e7f5      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000aae:	fab3 f183 	clz	r1, r3
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d146      	bne.n	8000b44 <__udivmoddi4+0x150>
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xcc>
 8000aba:	4290      	cmp	r0, r2
 8000abc:	f0c0 80f0 	bcc.w	8000ca0 <__udivmoddi4+0x2ac>
 8000ac0:	1a86      	subs	r6, r0, r2
 8000ac2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0e6      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000acc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad0:	e7e3      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x204>
 8000ad8:	eba1 040c 	sub.w	r4, r1, ip
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	fa1f f78c 	uxth.w	r7, ip
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aee:	fb08 4416 	mls	r4, r8, r6, r4
 8000af2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af6:	fb07 f006 	mul.w	r0, r7, r6
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x11c>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x11a>
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b0e:	4626      	mov	r6, r4
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb00 f707 	mul.w	r7, r0, r7
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x148>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x146>
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f200 80b0 	bhi.w	8000c9a <__udivmoddi4+0x2a6>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	1bdb      	subs	r3, r3, r7
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	e7a5      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b44:	f1c1 0620 	rsb	r6, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b54:	fa04 f301 	lsl.w	r3, r4, r1
 8000b58:	ea43 030c 	orr.w	r3, r3, ip
 8000b5c:	40f4      	lsrs	r4, r6
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	0c38      	lsrs	r0, r7, #16
 8000b64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b68:	fbb4 fef0 	udiv	lr, r4, r0
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	fb00 441e 	mls	r4, r0, lr, r4
 8000b74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b78:	fb0e f90c 	mul.w	r9, lr, ip
 8000b7c:	45a1      	cmp	r9, r4
 8000b7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x1a6>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8a:	f080 8084 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000b8e:	45a1      	cmp	r9, r4
 8000b90:	f240 8081 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000b94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	eba4 0409 	sub.w	r4, r4, r9
 8000b9e:	fa1f f983 	uxth.w	r9, r3
 8000ba2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ba6:	fb00 4413 	mls	r4, r0, r3, r4
 8000baa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x1d2>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bbc:	d267      	bcs.n	8000c8e <__udivmoddi4+0x29a>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0x29a>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bca:	fba0 9302 	umull	r9, r3, r0, r2
 8000bce:	eba4 040c 	sub.w	r4, r4, ip
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	46ce      	mov	lr, r9
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	d351      	bcc.n	8000c7e <__udivmoddi4+0x28a>
 8000bda:	d04e      	beq.n	8000c7a <__udivmoddi4+0x286>
 8000bdc:	b155      	cbz	r5, 8000bf4 <__udivmoddi4+0x200>
 8000bde:	ebb8 030e 	subs.w	r3, r8, lr
 8000be2:	eb64 040c 	sbc.w	r4, r4, ip
 8000be6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bea:	40cb      	lsrs	r3, r1
 8000bec:	431e      	orrs	r6, r3
 8000bee:	40cc      	lsrs	r4, r1
 8000bf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e750      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000bf8:	f1c2 0320 	rsb	r3, r2, #32
 8000bfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa24 f303 	lsr.w	r3, r4, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	430c      	orrs	r4, r1
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f107 	mul.w	r1, r0, r7
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x24c>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c36:	d22c      	bcs.n	8000c92 <__udivmoddi4+0x29e>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d92a      	bls.n	8000c92 <__udivmoddi4+0x29e>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c48:	fb08 3311 	mls	r3, r8, r1, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb01 f307 	mul.w	r3, r1, r7
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x276>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c60:	d213      	bcs.n	8000c8a <__udivmoddi4+0x296>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d911      	bls.n	8000c8a <__udivmoddi4+0x296>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1ae4      	subs	r4, r4, r3
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	e739      	b.n	8000ae6 <__udivmoddi4+0xf2>
 8000c72:	4604      	mov	r4, r0
 8000c74:	e6f0      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e706      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d2ae      	bcs.n	8000bdc <__udivmoddi4+0x1e8>
 8000c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7a8      	b.n	8000bdc <__udivmoddi4+0x1e8>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e7ed      	b.n	8000c6a <__udivmoddi4+0x276>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e799      	b.n	8000bc6 <__udivmoddi4+0x1d2>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e7d4      	b.n	8000c40 <__udivmoddi4+0x24c>
 8000c96:	46d6      	mov	lr, sl
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1a6>
 8000c9a:	4463      	add	r3, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e74d      	b.n	8000b3c <__udivmoddi4+0x148>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e70f      	b.n	8000ac8 <__udivmoddi4+0xd4>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	e730      	b.n	8000b10 <__udivmoddi4+0x11c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <HAL_I2S_TxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	audioBufferPtr = &audioBuffer[0];
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000cbe:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000cc0:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000164 	.word	0x20000164
 8000cdc:	20000364 	.word	0x20000364

08000ce0 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	audioBufferPtr = &audioBuffer[BUFFER_SIZE / 2];
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_I2S_TxCpltCallback+0x20>)
 8000cea:	4a06      	ldr	r2, [pc, #24]	@ (8000d04 <HAL_I2S_TxCpltCallback+0x24>)
 8000cec:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_I2S_TxCpltCallback+0x28>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000264 	.word	0x20000264
 8000d08:	20000364 	.word	0x20000364
 8000d0c:	00000000 	.word	0x00000000

08000d10 <GetNextBuffer>:

void GetNextBuffer()
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < (BUFFER_SIZE / 2) - 1; i += 2)
 8000d16:	2300      	movs	r3, #0
 8000d18:	81fb      	strh	r3, [r7, #14]
 8000d1a:	e031      	b.n	8000d80 <GetNextBuffer+0x70>
	{
		const double sample = (double)((1 << 16) - 1) * ((double)(i) / (double)(BUFFER_SIZE));
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fb9c 	bl	800045c <__aeabi_ui2d>
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <GetNextBuffer+0x90>)
 8000d2a:	f7ff fd3b 	bl	80007a4 <__aeabi_ddiv>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	a318      	add	r3, pc, #96	@ (adr r3, 8000d98 <GetNextBuffer+0x88>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fc08 	bl	8000550 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	e9c7 2300 	strd	r2, r3, [r7]
		audioBufferPtr[i]   = (int16_t)(sample); // left
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <GetNextBuffer+0x94>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	89fb      	ldrh	r3, [r7, #14]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	18d4      	adds	r4, r2, r3
 8000d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d56:	f7ff fe0d 	bl	8000974 <__aeabi_d2iz>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	8023      	strh	r3, [r4, #0]
		audioBufferPtr[i+1] = (int16_t)(sample); // right
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <GetNextBuffer+0x94>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	3301      	adds	r3, #1
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	18d4      	adds	r4, r2, r3
 8000d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d70:	f7ff fe00 	bl	8000974 <__aeabi_d2iz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	8023      	strh	r3, [r4, #0]
	for (uint16_t i = 0; i < (BUFFER_SIZE / 2) - 1; i += 2)
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	81fb      	strh	r3, [r7, #14]
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d84:	d9ca      	bls.n	8000d1c <GetNextBuffer+0xc>
	}
	dataReadyFlag = 0;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <GetNextBuffer+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	f3af 8000 	nop.w
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	40efffe0 	.word	0x40efffe0
 8000da0:	40700000 	.word	0x40700000
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000364 	.word	0x20000364

08000dac <Run>:

void Run()
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
//	if (status != HAL_OK) return;
//
//	status = HAL_I2S_RegisterCallback(&hi2s2, HAL_I2S_TX_COMPLETE_CB_ID, (void(*))HAL_I2S_TxCpltCallback);
//	if (status != HAL_OK) return;

	HAL_StatusTypeDef status = HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audioBufferPtr, BUFFER_SIZE);
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <Run+0x38>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480a      	ldr	r0, [pc, #40]	@ (8000de8 <Run+0x3c>)
 8000dbe:	f001 fe07 	bl	80029d0 <HAL_I2S_Transmit_DMA>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) return;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <Run+0x2e>

	while(1)
	{
		if (dataReadyFlag)
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <Run+0x40>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0fb      	beq.n	8000dcc <Run+0x20>
		{
			GetNextBuffer();
 8000dd4:	f7ff ff9c 	bl	8000d10 <GetNextBuffer>
		if (dataReadyFlag)
 8000dd8:	e7f8      	b.n	8000dcc <Run+0x20>
	if (status != HAL_OK) return;
 8000dda:	bf00      	nop
		}
	}
}
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000074 	.word	0x20000074
 8000dec:	20000364 	.word	0x20000364

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fbb8 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f810 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f94e 	bl	800109c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f000 f92c 	bl	800105c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e04:	f000 f900 	bl	8001008 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e08:	f000 f87e 	bl	8000f08 <MX_ADC1_Init>
  MX_I2S2_Init();
 8000e0c:	f000 f8ce 	bl	8000fac <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
Run();
 8000e10:	f7ff ffcc 	bl	8000dac <Run>
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b094      	sub	sp, #80	@ 0x50
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0320 	add.w	r3, r7, #32
 8000e26:	2230      	movs	r2, #48	@ 0x30
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 fb30 	bl	8004490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 8000e40:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e48:	4a2d      	ldr	r2, [pc, #180]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	4a2a      	ldr	r2, [pc, #168]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e56:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000e5a:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	4a26      	ldr	r2, [pc, #152]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6c:	4b24      	ldr	r3, [pc, #144]	@ (8000f00 <SystemClock_Config+0xe4>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <SystemClock_Config+0xe8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e84:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <SystemClock_Config+0xe8>)
 8000e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <SystemClock_Config+0xe8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea0:	2310      	movs	r3, #16
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f002 f9db 	bl	800326c <HAL_RCC_OscConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ebc:	f000 f96e 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fc3d 	bl	800375c <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ee8:	f000 f958 	bl	800119c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f002 fd19 	bl	8003928 <HAL_RCC_MCOConfig>
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	@ 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f1c:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <MX_ADC1_Init+0x9c>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f40:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f46:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f48:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <MX_ADC1_Init+0xa0>)
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f66:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f68:	f000 fb70 	bl	800164c <HAL_ADC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f72:	f000 f913 	bl	800119c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_ADC1_Init+0x98>)
 8000f88:	f000 fba4 	bl	80016d4 <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f92:	f000 f903 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000002c 	.word	0x2000002c
 8000fa4:	40012000 	.word	0x40012000
 8000fa8:	0f000001 	.word	0x0f000001

08000fac <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fb2:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <MX_I2S2_Init+0x58>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fbc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fd2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000fd6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000fde:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <MX_I2S2_Init+0x54>)
 8000fec:	f001 fbb0 	bl	8002750 <HAL_I2S_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000ff6:	f000 f8d1 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000074 	.word	0x20000074
 8001004:	40003800 	.word	0x40003800

08001008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <MX_USART2_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART2_UART_Init+0x4c>)
 8001040:	f002 ff62 	bl	8003f08 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f000 f8a7 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000011c 	.word	0x2000011c
 8001058:	40004400 	.word	0x40004400

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_DMA_Init+0x3c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <MX_DMA_Init+0x3c>)
 800106c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_DMA_Init+0x3c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200f      	movs	r0, #15
 8001084:	f000 fe1f 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001088:	200f      	movs	r0, #15
 800108a:	f000 fe38 	bl	8001cfe <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <MX_GPIO_Init+0xf4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_GPIO_Init+0xf4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a20      	ldr	r2, [pc, #128]	@ (8001190 <MX_GPIO_Init+0xf4>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_GPIO_Init+0xf4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_Out_GPIO_Port, Audio_Out_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	481b      	ldr	r0, [pc, #108]	@ (8001194 <MX_GPIO_Init+0xf8>)
 8001128:	f001 faf8 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001132:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4815      	ldr	r0, [pc, #84]	@ (8001198 <MX_GPIO_Init+0xfc>)
 8001144:	f001 f966 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Out_Pin */
  GPIO_InitStruct.Pin = Audio_Out_Pin;
 8001148:	2320      	movs	r3, #32
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Audio_Out_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	@ (8001194 <MX_GPIO_Init+0xf8>)
 8001160:	f001 f958 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_GPIO_Init+0xf8>)
 8001182:	f001 f947 	bl	8002414 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020800 	.word	0x40020800

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <Error_Handler+0x8>

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f000 fd62 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a17      	ldr	r2, [pc, #92]	@ (8001274 <HAL_ADC_MspInit+0x7c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d127      	bne.n	800126a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <HAL_ADC_MspInit+0x80>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <HAL_ADC_MspInit+0x80>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <HAL_ADC_MspInit+0x80>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_ADC_MspInit+0x80>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <HAL_ADC_MspInit+0x80>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_ADC_MspInit+0x80>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001252:	2303      	movs	r3, #3
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <HAL_ADC_MspInit+0x84>)
 8001266:	f001 f8d5 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40012000 	.word	0x40012000
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b090      	sub	sp, #64	@ 0x40
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a49      	ldr	r2, [pc, #292]	@ (80013d4 <HAL_I2S_MspInit+0x154>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	f040 808c 	bne.w	80013cc <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 194;
 80012b8:	23c2      	movs	r3, #194	@ 0xc2
 80012ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fcd1 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80012d0:	f7ff ff64 	bl	800119c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	4a3e      	ldr	r2, [pc, #248]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e4:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	4b38      	ldr	r3, [pc, #224]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f8:	4a37      	ldr	r2, [pc, #220]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001300:	4b35      	ldr	r3, [pc, #212]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a30      	ldr	r2, [pc, #192]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b2e      	ldr	r3, [pc, #184]	@ (80013d8 <HAL_I2S_MspInit+0x158>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001328:	2308      	movs	r3, #8
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001338:	2305      	movs	r3, #5
 800133a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001340:	4619      	mov	r1, r3
 8001342:	4826      	ldr	r0, [pc, #152]	@ (80013dc <HAL_I2S_MspInit+0x15c>)
 8001344:	f001 f866 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001348:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135a:	2305      	movs	r3, #5
 800135c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001362:	4619      	mov	r1, r3
 8001364:	481e      	ldr	r0, [pc, #120]	@ (80013e0 <HAL_I2S_MspInit+0x160>)
 8001366:	f001 f855 	bl	8002414 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_I2S_MspInit+0x168>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 8001378:	2240      	movs	r2, #64	@ 0x40
 800137a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 8001384:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001388:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800138a:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 800138c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001390:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 8001394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001398:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 800139c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 80013a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013a8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 80013b2:	f000 fcbf 	bl	8001d34 <HAL_DMA_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 80013bc:	f7ff feee 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <HAL_I2S_MspInit+0x164>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80013cc:	bf00      	nop
 80013ce:	3740      	adds	r7, #64	@ 0x40
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40003800 	.word	0x40003800
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020400 	.word	0x40020400
 80013e4:	200000bc 	.word	0x200000bc
 80013e8:	40026070 	.word	0x40026070

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_UART_MspInit+0x84>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d12b      	bne.n	8001466 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_UART_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <HAL_UART_MspInit+0x88>)
 8001418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_UART_MspInit+0x88>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <HAL_UART_MspInit+0x88>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_UART_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001446:	230c      	movs	r3, #12
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <HAL_UART_MspInit+0x8c>)
 8001462:	f000 ffd7 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001466:	bf00      	nop
 8001468:	3728      	adds	r7, #40	@ 0x28
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004400 	.word	0x40004400
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d2:	f000 f89b 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <DMA1_Stream4_IRQHandler+0x10>)
 80014e2:	f000 fd2d 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000bc 	.word	0x200000bc

080014f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800154c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001518:	f7ff ffea 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	@ (8001554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	@ (8001560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001542:	f002 ffad 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff fc53 	bl	8000df0 <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800154c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001558:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 800155c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001560:	2000036c 	.word	0x2000036c

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <HAL_Init+0x40>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_Init+0x40>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	@ (80015a8 <HAL_Init+0x40>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 fb8d 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fe04 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fba5 	bl	8001d1a <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 fb6d 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000004 	.word	0x20000004
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000368 	.word	0x20000368

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000368 	.word	0x20000368

0800164c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e033      	b.n	80016ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fdc4 	bl	80011f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001692:	f023 0302 	bic.w	r3, r3, #2
 8001696:	f043 0202 	orr.w	r2, r3, #2
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f93a 	bl	8001918 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ba:	e001      	b.n	80016c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1c>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e105      	b.n	80018fc <HAL_ADC_ConfigChannel+0x228>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d925      	bls.n	800174c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3b1e      	subs	r3, #30
 8001716:	2207      	movs	r2, #7
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68d9      	ldr	r1, [r3, #12]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	4603      	mov	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4403      	add	r3, r0
 800173e:	3b1e      	subs	r3, #30
 8001740:	409a      	lsls	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	e022      	b.n	8001792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	2207      	movs	r2, #7
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6919      	ldr	r1, [r3, #16]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	4603      	mov	r3, r0
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4403      	add	r3, r0
 8001788:	409a      	lsls	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b06      	cmp	r3, #6
 8001798:	d824      	bhi.n	80017e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b05      	subs	r3, #5
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	400a      	ands	r2, r1
 80017ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b05      	subs	r3, #5
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e2:	e04c      	b.n	800187e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d824      	bhi.n	8001836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b23      	subs	r3, #35	@ 0x23
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b23      	subs	r3, #35	@ 0x23
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
 8001834:	e023      	b.n	800187e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b41      	subs	r3, #65	@ 0x41
 8001848:	221f      	movs	r2, #31
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	400a      	ands	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b41      	subs	r3, #65	@ 0x41
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_ADC_ConfigChannel+0x234>)
 8001880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	@ (800190c <HAL_ADC_ConfigChannel+0x238>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d109      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1cc>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b12      	cmp	r3, #18
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	@ (800190c <HAL_ADC_ConfigChannel+0x238>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d123      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x21e>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d003      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x1e6>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b11      	cmp	r3, #17
 80018b8:	d11b      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d111      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_ADC_ConfigChannel+0x23c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a10      	ldr	r2, [pc, #64]	@ (8001914 <HAL_ADC_ConfigChannel+0x240>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9a      	lsrs	r2, r3, #18
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018e4:	e002      	b.n	80018ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f9      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40012300 	.word	0x40012300
 800190c:	40012000 	.word	0x40012000
 8001910:	20000004 	.word	0x20000004
 8001914:	431bde83 	.word	0x431bde83

08001918 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001920:	4b79      	ldr	r3, [pc, #484]	@ (8001b08 <ADC_Init+0x1f0>)
 8001922:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	431a      	orrs	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800194c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	021a      	lsls	r2, r3, #8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6899      	ldr	r1, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019aa:	4a58      	ldr	r2, [pc, #352]	@ (8001b0c <ADC_Init+0x1f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e00f      	b.n	8001a16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a14:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0202 	bic.w	r2, r2, #2
 8001a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e1b      	ldrb	r3, [r3, #24]
 8001a30:	005a      	lsls	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a52:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	035a      	lsls	r2, r3, #13
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e007      	b.n	8001a8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a8a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	051a      	lsls	r2, r3, #20
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ace:	025a      	lsls	r2, r3, #9
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	029a      	lsls	r2, r3, #10
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40012300 	.word	0x40012300
 8001b0c:	0f000001 	.word	0x0f000001

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	@ (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	@ 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff3e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff31 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff fc78 	bl	8001634 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e099      	b.n	8001e84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d70:	e00f      	b.n	8001d92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d72:	f7ff fc5f 	bl	8001634 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d908      	bls.n	8001d92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e078      	b.n	8001e84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1e8      	bne.n	8001d72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4b38      	ldr	r3, [pc, #224]	@ (8001e8c <HAL_DMA_Init+0x158>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	4313      	orrs	r3, r2
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f023 0307 	bic.w	r3, r3, #7
 8001e12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d117      	bne.n	8001e56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00e      	beq.n	8001e56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fa6f 	bl	800231c <DMA_CheckFifoParam>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2240      	movs	r2, #64	@ 0x40
 8001e48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e52:	2301      	movs	r3, #1
 8001e54:	e016      	b.n	8001e84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa26 	bl	80022b0 <DMA_CalcBaseAndBitshift>
 8001e64:	4603      	mov	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	223f      	movs	r2, #63	@ 0x3f
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	f010803f 	.word	0xf010803f

08001e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_DMA_Start_IT+0x26>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e040      	b.n	8001f38 <HAL_DMA_Start_IT+0xa8>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d12f      	bne.n	8001f2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f9b8 	bl	8002254 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	223f      	movs	r2, #63	@ 0x3f
 8001eea:	409a      	lsls	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0216 	orr.w	r2, r2, #22
 8001efe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0208 	orr.w	r2, r2, #8
 8001f16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e005      	b.n	8001f36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f32:	2302      	movs	r3, #2
 8001f34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8002188 <HAL_DMA_IRQHandler+0x248>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a8e      	ldr	r2, [pc, #568]	@ (800218c <HAL_DMA_IRQHandler+0x24c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01a      	beq.n	8001fac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f98:	2208      	movs	r2, #8
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f043 0202 	orr.w	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00b      	beq.n	8002018 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	2204      	movs	r2, #4
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002010:	f043 0204 	orr.w	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2210      	movs	r2, #16
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d043      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03c      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203a:	2210      	movs	r2, #16
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d018      	beq.n	8002082 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d024      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e01f      	b.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e016      	b.n	80020b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0208 	bic.w	r2, r2, #8
 800209e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	2220      	movs	r2, #32
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 808f 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8087 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d6:	2220      	movs	r2, #32
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d136      	bne.n	8002158 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0216 	bic.w	r2, r2, #22
 80020f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002108:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_DMA_IRQHandler+0x1da>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0208 	bic.w	r2, r2, #8
 8002128:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	223f      	movs	r2, #63	@ 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d07e      	beq.n	800224c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
        }
        return;
 8002156:	e079      	b.n	800224c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002178:	2b00      	cmp	r3, #0
 800217a:	d031      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e02c      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
 8002186:	bf00      	nop
 8002188:	20000004 	.word	0x20000004
 800218c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e01e      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10f      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d032      	beq.n	800224e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d022      	beq.n	800223a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2205      	movs	r2, #5
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	3301      	adds	r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	d307      	bcc.n	8002228 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f2      	bne.n	800220c <HAL_DMA_IRQHandler+0x2cc>
 8002226:	e000      	b.n	800222a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002228:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e000      	b.n	800224e <HAL_DMA_IRQHandler+0x30e>
        return;
 800224c:	bf00      	nop
    }
  }
}
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002270:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b40      	cmp	r3, #64	@ 0x40
 8002280:	d108      	bne.n	8002294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002292:	e007      	b.n	80022a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3b10      	subs	r3, #16
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <DMA_CalcBaseAndBitshift+0x64>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ca:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <DMA_CalcBaseAndBitshift+0x68>)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d909      	bls.n	80022f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	1d1a      	adds	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f0:	e007      	b.n	8002302 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	aaaaaaab 	.word	0xaaaaaaab
 8002318:	08004518 	.word	0x08004518

0800231c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11f      	bne.n	8002376 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d856      	bhi.n	80023ea <DMA_CheckFifoParam+0xce>
 800233c:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <DMA_CheckFifoParam+0x28>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002355 	.word	0x08002355
 8002348:	08002367 	.word	0x08002367
 800234c:	08002355 	.word	0x08002355
 8002350:	080023eb 	.word	0x080023eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d046      	beq.n	80023ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e043      	b.n	80023ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800236e:	d140      	bne.n	80023f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002374:	e03d      	b.n	80023f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800237e:	d121      	bne.n	80023c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d837      	bhi.n	80023f6 <DMA_CheckFifoParam+0xda>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <DMA_CheckFifoParam+0x70>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023a3 	.word	0x080023a3
 8002394:	0800239d 	.word	0x0800239d
 8002398:	080023b5 	.word	0x080023b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      break;
 80023a0:	e030      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d025      	beq.n	80023fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b2:	e022      	b.n	80023fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023bc:	d11f      	bne.n	80023fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c2:	e01c      	b.n	80023fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d903      	bls.n	80023d2 <DMA_CheckFifoParam+0xb6>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d003      	beq.n	80023d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d0:	e018      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      break;
 80023d6:	e015      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e00b      	b.n	8002402 <DMA_CheckFifoParam+0xe6>
      break;
 80023ea:	bf00      	nop
 80023ec:	e00a      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
 80023f0:	e008      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
 80023f4:	e006      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e004      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e002      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;   
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
    }
  } 
  
  return status; 
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e159      	b.n	80026e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8148 	bne.w	80026de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a2 	beq.w	80026de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b57      	ldr	r3, [pc, #348]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a56      	ldr	r2, [pc, #344]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x202>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1fe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_GPIO_Init+0x2f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1fa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a46      	ldr	r2, [pc, #280]	@ (8002710 <HAL_GPIO_Init+0x2fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1f6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1f2>
 8002602:	2304      	movs	r3, #4
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002606:	2307      	movs	r3, #7
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f aea2 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e128      	b.n	80029b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a90      	ldr	r2, [pc, #576]	@ (80029bc <HAL_I2S_Init+0x26c>)
 800277a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7fe fd7f 	bl	8001280 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2202      	movs	r2, #2
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002798:	f023 030f 	bic.w	r3, r3, #15
 800279c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2202      	movs	r2, #2
 80027a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d060      	beq.n	8002870 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027b6:	2310      	movs	r3, #16
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e001      	b.n	80027c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d802      	bhi.n	80027ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027ce:	2001      	movs	r0, #1
 80027d0:	f001 fb3a 	bl	8003e48 <HAL_RCCEx_GetPeriphCLKFreq>
 80027d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027de:	d125      	bne.n	800282c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	461a      	mov	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	3305      	adds	r3, #5
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e01f      	b.n	800284a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	461a      	mov	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	3305      	adds	r3, #5
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	e00e      	b.n	800284a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fbb2 f2f3 	udiv	r2, r2, r3
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	3305      	adds	r3, #5
 8002848:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4a5c      	ldr	r2, [pc, #368]	@ (80029c0 <HAL_I2S_Init+0x270>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	08db      	lsrs	r3, r3, #3
 8002854:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e003      	b.n	8002878 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002870:	2302      	movs	r3, #2
 8002872:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d902      	bls.n	8002884 <HAL_I2S_Init+0x134>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	2bff      	cmp	r3, #255	@ 0xff
 8002882:	d907      	bls.n	8002894 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e08f      	b.n	80029b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	ea42 0103 	orr.w	r1, r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80028b2:	f023 030f 	bic.w	r3, r3, #15
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6851      	ldr	r1, [r2, #4]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6892      	ldr	r2, [r2, #8]
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68d2      	ldr	r2, [r2, #12]
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6992      	ldr	r2, [r2, #24]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d161      	bne.n	80029a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a38      	ldr	r2, [pc, #224]	@ (80029c4 <HAL_I2S_Init+0x274>)
 80028e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a37      	ldr	r2, [pc, #220]	@ (80029c8 <HAL_I2S_Init+0x278>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_I2S_Init+0x1a4>
 80028f0:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_I2S_Init+0x27c>)
 80028f2:	e001      	b.n	80028f8 <HAL_I2S_Init+0x1a8>
 80028f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	4932      	ldr	r1, [pc, #200]	@ (80029c8 <HAL_I2S_Init+0x278>)
 8002900:	428a      	cmp	r2, r1
 8002902:	d101      	bne.n	8002908 <HAL_I2S_Init+0x1b8>
 8002904:	4a31      	ldr	r2, [pc, #196]	@ (80029cc <HAL_I2S_Init+0x27c>)
 8002906:	e001      	b.n	800290c <HAL_I2S_Init+0x1bc>
 8002908:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800290c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002910:	f023 030f 	bic.w	r3, r3, #15
 8002914:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a2b      	ldr	r2, [pc, #172]	@ (80029c8 <HAL_I2S_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_I2S_Init+0x1d4>
 8002920:	4b2a      	ldr	r3, [pc, #168]	@ (80029cc <HAL_I2S_Init+0x27c>)
 8002922:	e001      	b.n	8002928 <HAL_I2S_Init+0x1d8>
 8002924:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002928:	2202      	movs	r2, #2
 800292a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_I2S_Init+0x278>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_I2S_Init+0x1ea>
 8002936:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <HAL_I2S_Init+0x27c>)
 8002938:	e001      	b.n	800293e <HAL_I2S_Init+0x1ee>
 800293a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800294a:	d003      	beq.n	8002954 <HAL_I2S_Init+0x204>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002954:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	e001      	b.n	8002960 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800296a:	4313      	orrs	r3, r2
 800296c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002974:	4313      	orrs	r3, r2
 8002976:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800297e:	4313      	orrs	r3, r2
 8002980:	b29a      	uxth	r2, r3
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	4313      	orrs	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800298c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <HAL_I2S_Init+0x278>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_I2S_Init+0x24c>
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <HAL_I2S_Init+0x27c>)
 800299a:	e001      	b.n	80029a0 <HAL_I2S_Init+0x250>
 800299c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029a0:	897a      	ldrh	r2, [r7, #10]
 80029a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	08002ca5 	.word	0x08002ca5
 80029c0:	cccccccd 	.word	0xcccccccd
 80029c4:	08002db9 	.word	0x08002db9
 80029c8:	40003800 	.word	0x40003800
 80029cc:	40003400 	.word	0x40003400

080029d0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_I2S_Transmit_DMA+0x1a>
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e08a      	b.n	8002b04 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e082      	b.n	8002b04 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2S_Transmit_DMA+0x3e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e07a      	b.n	8002b04 <HAL_I2S_Transmit_DMA+0x134>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d002      	beq.n	8002a42 <HAL_I2S_Transmit_DMA+0x72>
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d10a      	bne.n	8002a58 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a56:	e005      	b.n	8002a64 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <HAL_I2S_Transmit_DMA+0x13c>)
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	4a27      	ldr	r2, [pc, #156]	@ (8002b10 <HAL_I2S_Transmit_DMA+0x140>)
 8002a72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a78:	4a26      	ldr	r2, [pc, #152]	@ (8002b14 <HAL_I2S_Transmit_DMA+0x144>)
 8002a7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a84:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a8c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002a94:	f7ff f9fc 	bl	8001e90 <HAL_DMA_Start_IT>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00f      	beq.n	8002abe <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f043 0208 	orr.w	r2, r3, #8
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e022      	b.n	8002b04 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0202 	orr.w	r2, r2, #2
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b00:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08002b83 	.word	0x08002b83
 8002b10:	08002b41 	.word	0x08002b41
 8002b14:	08002b9f 	.word	0x08002b9f

08002b18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10e      	bne.n	8002b74 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0202 	bic.w	r2, r2, #2
 8002b64:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7fe f8b3 	bl	8000ce0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7fe f88f 	bl	8000cb4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0203 	bic.w	r2, r2, #3
 8002bba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	f043 0208 	orr.w	r2, r3, #8
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff ffa5 	bl	8002b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	881a      	ldrh	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	1c9a      	adds	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10e      	bne.n	8002c3e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fe f851 	bl	8000ce0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ff3e 	bl	8002b18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d13a      	bne.n	8002d36 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d109      	bne.n	8002cde <I2S_IRQHandler+0x3a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d102      	bne.n	8002cde <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ffb4 	bl	8002c46 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d126      	bne.n	8002d36 <I2S_IRQHandler+0x92>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d11f      	bne.n	8002d36 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d04:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d28:	f043 0202 	orr.w	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff fefb 	bl	8002b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d136      	bne.n	8002db0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d109      	bne.n	8002d60 <I2S_IRQHandler+0xbc>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b80      	cmp	r3, #128	@ 0x80
 8002d58:	d102      	bne.n	8002d60 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ff45 	bl	8002bea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d122      	bne.n	8002db0 <I2S_IRQHandler+0x10c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d11b      	bne.n	8002db0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d86:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff febe 	bl	8002b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a92      	ldr	r2, [pc, #584]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002dd2:	4b92      	ldr	r3, [pc, #584]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd4:	e001      	b.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002dd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a8b      	ldr	r2, [pc, #556]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002df0:	4b8a      	ldr	r3, [pc, #552]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df2:	e001      	b.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e04:	d004      	beq.n	8002e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 8099 	bne.w	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d107      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f925 	bl	8003074 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9c8 	bl	80031d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b40      	cmp	r3, #64	@ 0x40
 8002e4c:	d13a      	bne.n	8002ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d035      	beq.n	8002ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002e62:	4b6e      	ldr	r3, [pc, #440]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e64:	e001      	b.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002e66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4969      	ldr	r1, [pc, #420]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e72:	428b      	cmp	r3, r1
 8002e74:	d101      	bne.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002e76:	4b69      	ldr	r3, [pc, #420]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e78:	e001      	b.n	8002e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e82:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	f043 0202 	orr.w	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fe34 	bl	8002b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	f040 80c3 	bne.w	8003056 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80bd 	beq.w	8003056 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002eea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a49      	ldr	r2, [pc, #292]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002ef6:	4b49      	ldr	r3, [pc, #292]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ef8:	e001      	b.n	8002efe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002efa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4944      	ldr	r1, [pc, #272]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f06:	428b      	cmp	r3, r1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002f0a:	4b44      	ldr	r3, [pc, #272]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f0c:	e001      	b.n	8002f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f16:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fdf6 	bl	8002b2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f40:	e089      	b.n	8003056 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d107      	bne.n	8002f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f8be 	bl	80030d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f8fd 	bl	8003170 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7c:	2b40      	cmp	r3, #64	@ 0x40
 8002f7e:	d12f      	bne.n	8002fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02a      	beq.n	8002fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f98:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fa6:	e001      	b.n	8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002fa8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4919      	ldr	r1, [pc, #100]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fb4:	428b      	cmp	r3, r1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fba:	e001      	b.n	8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002fbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fc4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fda6 	bl	8002b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d136      	bne.n	8003058 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d031      	beq.n	8003058 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a07      	ldr	r2, [pc, #28]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002ffe:	4b07      	ldr	r3, [pc, #28]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003000:	e001      	b.n	8003006 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003002:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4902      	ldr	r1, [pc, #8]	@ (8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800300e:	428b      	cmp	r3, r1
 8003010:	d106      	bne.n	8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003012:	4b02      	ldr	r3, [pc, #8]	@ (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003014:	e006      	b.n	8003024 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003016:	bf00      	nop
 8003018:	40003800 	.word	0x40003800
 800301c:	40003400 	.word	0x40003400
 8003020:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003024:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003028:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003038:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003046:	f043 0204 	orr.w	r2, r3, #4
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fd6c 	bl	8002b2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003054:	e000      	b.n	8003058 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003056:	bf00      	nop
}
 8003058:	bf00      	nop
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c99      	adds	r1, r3, #2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6251      	str	r1, [r2, #36]	@ 0x24
 8003086:	881a      	ldrh	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80030b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffc9 	bl	8003060 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	1c99      	adds	r1, r3, #2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80030ea:	8819      	ldrh	r1, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003168 <I2SEx_TxISR_I2SExt+0x90>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <I2SEx_TxISR_I2SExt+0x22>
 80030f6:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <I2SEx_TxISR_I2SExt+0x94>)
 80030f8:	e001      	b.n	80030fe <I2SEx_TxISR_I2SExt+0x26>
 80030fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030fe:	460a      	mov	r2, r1
 8003100:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d121      	bne.n	800315e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <I2SEx_TxISR_I2SExt+0x90>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <I2SEx_TxISR_I2SExt+0x50>
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <I2SEx_TxISR_I2SExt+0x94>)
 8003126:	e001      	b.n	800312c <I2SEx_TxISR_I2SExt+0x54>
 8003128:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	490d      	ldr	r1, [pc, #52]	@ (8003168 <I2SEx_TxISR_I2SExt+0x90>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d101      	bne.n	800313c <I2SEx_TxISR_I2SExt+0x64>
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <I2SEx_TxISR_I2SExt+0x94>)
 800313a:	e001      	b.n	8003140 <I2SEx_TxISR_I2SExt+0x68>
 800313c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003140:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003144:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff81 	bl	8003060 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40003800 	.word	0x40003800
 800316c:	40003400 	.word	0x40003400

08003170 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68d8      	ldr	r0, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	1c99      	adds	r1, r3, #2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003188:	b282      	uxth	r2, r0
 800318a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d113      	bne.n	80031cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff4a 	bl	8003060 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a20      	ldr	r2, [pc, #128]	@ (8003264 <I2SEx_RxISR_I2SExt+0x90>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <I2SEx_RxISR_I2SExt+0x16>
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <I2SEx_RxISR_I2SExt+0x94>)
 80031e8:	e001      	b.n	80031ee <I2SEx_RxISR_I2SExt+0x1a>
 80031ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031ee:	68d8      	ldr	r0, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f4:	1c99      	adds	r1, r3, #2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80031fa:	b282      	uxth	r2, r0
 80031fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a12      	ldr	r2, [pc, #72]	@ (8003264 <I2SEx_RxISR_I2SExt+0x90>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <I2SEx_RxISR_I2SExt+0x50>
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <I2SEx_RxISR_I2SExt+0x94>)
 8003222:	e001      	b.n	8003228 <I2SEx_RxISR_I2SExt+0x54>
 8003224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	490d      	ldr	r1, [pc, #52]	@ (8003264 <I2SEx_RxISR_I2SExt+0x90>)
 8003230:	428b      	cmp	r3, r1
 8003232:	d101      	bne.n	8003238 <I2SEx_RxISR_I2SExt+0x64>
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <I2SEx_RxISR_I2SExt+0x94>)
 8003236:	e001      	b.n	800323c <I2SEx_RxISR_I2SExt+0x68>
 8003238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800323c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003240:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff03 	bl	8003060 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40003800 	.word	0x40003800
 8003268:	40003400 	.word	0x40003400

0800326c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e267      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d075      	beq.n	8003376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800328a:	4b88      	ldr	r3, [pc, #544]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b04      	cmp	r3, #4
 8003294:	d00c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003296:	4b85      	ldr	r3, [pc, #532]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d112      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a2:	4b82      	ldr	r3, [pc, #520]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ae:	d10b      	bne.n	80032c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	4b7e      	ldr	r3, [pc, #504]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d05b      	beq.n	8003374 <HAL_RCC_OscConfig+0x108>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d157      	bne.n	8003374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e242      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x74>
 80032d2:	4b76      	ldr	r3, [pc, #472]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a75      	ldr	r2, [pc, #468]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e01d      	b.n	800331c <HAL_RCC_OscConfig+0xb0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x98>
 80032ea:	4b70      	ldr	r3, [pc, #448]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a6f      	ldr	r2, [pc, #444]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	4b6d      	ldr	r3, [pc, #436]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6c      	ldr	r2, [pc, #432]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0xb0>
 8003304:	4b69      	ldr	r3, [pc, #420]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a68      	ldr	r2, [pc, #416]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800330a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b66      	ldr	r3, [pc, #408]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a65      	ldr	r2, [pc, #404]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800331a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d013      	beq.n	800334c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe f986 	bl	8001634 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe f982 	bl	8001634 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	@ 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e207      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0xc0>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe f972 	bl	8001634 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe f96e 	bl	8001634 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1f3      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	4b51      	ldr	r3, [pc, #324]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0xe8>
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d063      	beq.n	800344a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003382:	4b4a      	ldr	r3, [pc, #296]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338e:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003396:	2b08      	cmp	r3, #8
 8003398:	d11c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800339a:	4b44      	ldr	r3, [pc, #272]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d116      	bne.n	80033d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a6:	4b41      	ldr	r3, [pc, #260]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <HAL_RCC_OscConfig+0x152>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1c7      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033be:	4b3b      	ldr	r3, [pc, #236]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4937      	ldr	r1, [pc, #220]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	e03a      	b.n	800344a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033dc:	4b34      	ldr	r3, [pc, #208]	@ (80034b0 <HAL_RCC_OscConfig+0x244>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe f927 	bl	8001634 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ea:	f7fe f923 	bl	8001634 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1a8      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	4b2b      	ldr	r3, [pc, #172]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003408:	4b28      	ldr	r3, [pc, #160]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4925      	ldr	r1, [pc, #148]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	e015      	b.n	800344a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341e:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <HAL_RCC_OscConfig+0x244>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fe f906 	bl	8001634 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800342c:	f7fe f902 	bl	8001634 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e187      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d036      	beq.n	80034c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345e:	4b15      	ldr	r3, [pc, #84]	@ (80034b4 <HAL_RCC_OscConfig+0x248>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe f8e6 	bl	8001634 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346c:	f7fe f8e2 	bl	8001634 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e167      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	4b0b      	ldr	r3, [pc, #44]	@ (80034ac <HAL_RCC_OscConfig+0x240>)
 8003480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x200>
 800348a:	e01b      	b.n	80034c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_RCC_OscConfig+0x248>)
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fe f8cf 	bl	8001634 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	e00e      	b.n	80034b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349a:	f7fe f8cb 	bl	8001634 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d907      	bls.n	80034b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e150      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
 80034ac:	40023800 	.word	0x40023800
 80034b0:	42470000 	.word	0x42470000
 80034b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	4b88      	ldr	r3, [pc, #544]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ea      	bne.n	800349a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8097 	beq.w	8003600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d6:	4b81      	ldr	r3, [pc, #516]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	4b7d      	ldr	r3, [pc, #500]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	4a7c      	ldr	r2, [pc, #496]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034f2:	4b7a      	ldr	r3, [pc, #488]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b77      	ldr	r3, [pc, #476]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d118      	bne.n	8003540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350e:	4b74      	ldr	r3, [pc, #464]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a73      	ldr	r2, [pc, #460]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351a:	f7fe f88b 	bl	8001634 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003522:	f7fe f887 	bl	8001634 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e10c      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCC_OscConfig+0x474>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x2ea>
 8003548:	4b64      	ldr	r3, [pc, #400]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	4a63      	ldr	r2, [pc, #396]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6713      	str	r3, [r2, #112]	@ 0x70
 8003554:	e01c      	b.n	8003590 <HAL_RCC_OscConfig+0x324>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b05      	cmp	r3, #5
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0x30c>
 800355e:	4b5f      	ldr	r3, [pc, #380]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a5e      	ldr	r2, [pc, #376]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70
 800356a:	4b5c      	ldr	r3, [pc, #368]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800356c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356e:	4a5b      	ldr	r2, [pc, #364]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6713      	str	r3, [r2, #112]	@ 0x70
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0x324>
 8003578:	4b58      	ldr	r3, [pc, #352]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	4a57      	ldr	r2, [pc, #348]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	@ 0x70
 8003584:	4b55      	ldr	r3, [pc, #340]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	4a54      	ldr	r2, [pc, #336]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800358a:	f023 0304 	bic.w	r3, r3, #4
 800358e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d015      	beq.n	80035c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe f84c 	bl	8001634 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fe f848 	bl	8001634 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0cb      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b6:	4b49      	ldr	r3, [pc, #292]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ee      	beq.n	80035a0 <HAL_RCC_OscConfig+0x334>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fe f836 	bl	8001634 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7fe f832 	bl	8001634 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0b5      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e2:	4b3e      	ldr	r3, [pc, #248]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ee      	bne.n	80035cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f4:	4b39      	ldr	r3, [pc, #228]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	4a38      	ldr	r2, [pc, #224]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a1 	beq.w	800374c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b08      	cmp	r3, #8
 8003614:	d05c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d141      	bne.n	80036a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <HAL_RCC_OscConfig+0x478>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fe f806 	bl	8001634 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe f802 	bl	8001634 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e087      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	4b27      	ldr	r3, [pc, #156]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	491b      	ldr	r1, [pc, #108]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003674:	4b1b      	ldr	r3, [pc, #108]	@ (80036e4 <HAL_RCC_OscConfig+0x478>)
 8003676:	2201      	movs	r2, #1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7fd ffdb 	bl	8001634 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003682:	f7fd ffd7 	bl	8001634 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e05c      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003694:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x416>
 80036a0:	e054      	b.n	800374c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <HAL_RCC_OscConfig+0x478>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fd ffc4 	bl	8001634 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b0:	f7fd ffc0 	bl	8001634 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e045      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_RCC_OscConfig+0x470>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x444>
 80036ce:	e03d      	b.n	800374c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e038      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40007000 	.word	0x40007000
 80036e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_RCC_OscConfig+0x4ec>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d028      	beq.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d121      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d11a      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800371e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	3b01      	subs	r3, #1
 8003732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800

0800375c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0cc      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b68      	ldr	r3, [pc, #416]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d90c      	bls.n	8003798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b65      	ldr	r3, [pc, #404]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b63      	ldr	r3, [pc, #396]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0b8      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d020      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037b0:	4b59      	ldr	r3, [pc, #356]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a58      	ldr	r2, [pc, #352]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c8:	4b53      	ldr	r3, [pc, #332]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a52      	ldr	r2, [pc, #328]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d4:	4b50      	ldr	r3, [pc, #320]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	494d      	ldr	r1, [pc, #308]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d044      	beq.n	800387c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d119      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e07f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d003      	beq.n	800381a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003816:	2b03      	cmp	r3, #3
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381a:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e06f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382a:	4b3b      	ldr	r3, [pc, #236]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e067      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383a:	4b37      	ldr	r3, [pc, #220]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 0203 	bic.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4934      	ldr	r1, [pc, #208]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800384c:	f7fd fef2 	bl	8001634 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fd feee 	bl	8001634 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e04f      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2b      	ldr	r3, [pc, #172]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 020c 	and.w	r2, r3, #12
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	429a      	cmp	r2, r3
 800387a:	d1eb      	bne.n	8003854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b25      	ldr	r3, [pc, #148]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d20c      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b22      	ldr	r3, [pc, #136]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b20      	ldr	r3, [pc, #128]	@ (8003914 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e032      	b.n	800390a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4916      	ldr	r1, [pc, #88]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b12      	ldr	r3, [pc, #72]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	490e      	ldr	r1, [pc, #56]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038e2:	f000 f889 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490a      	ldr	r1, [pc, #40]	@ (800391c <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	fa22 f303 	lsr.w	r3, r2, r3
 80038fa:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038fe:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fe52 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023c00 	.word	0x40023c00
 8003918:	40023800 	.word	0x40023800
 800391c:	08004500 	.word	0x08004500
 8003920:	20000004 	.word	0x20000004
 8003924:	20000008 	.word	0x20000008

08003928 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08c      	sub	sp, #48	@ 0x30
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d129      	bne.n	800398e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	4a2a      	ldr	r2, [pc, #168]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6313      	str	r3, [r2, #48]	@ 0x30
 800394a:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003956:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003964:	2300      	movs	r3, #0
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	4619      	mov	r1, r3
 8003972:	481f      	ldr	r0, [pc, #124]	@ (80039f0 <HAL_RCC_MCOConfig+0xc8>)
 8003974:	f7fe fd4e 	bl	8002414 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003978:	4b1c      	ldr	r3, [pc, #112]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	430b      	orrs	r3, r1
 8003986:	4919      	ldr	r1, [pc, #100]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800398c:	e029      	b.n	80039e2 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a15      	ldr	r2, [pc, #84]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b13      	ldr	r3, [pc, #76]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80039aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80039bc:	2300      	movs	r3, #0
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80039c0:	f107 031c 	add.w	r3, r7, #28
 80039c4:	4619      	mov	r1, r3
 80039c6:	480b      	ldr	r0, [pc, #44]	@ (80039f4 <HAL_RCC_MCOConfig+0xcc>)
 80039c8:	f7fe fd24 	bl	8002414 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80039cc:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	00d9      	lsls	r1, r3, #3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	430b      	orrs	r3, r1
 80039dc:	4903      	ldr	r1, [pc, #12]	@ (80039ec <HAL_RCC_MCOConfig+0xc4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
}
 80039e2:	bf00      	nop
 80039e4:	3730      	adds	r7, #48	@ 0x30
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020800 	.word	0x40020800

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b094      	sub	sp, #80	@ 0x50
 80039fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a10:	4b79      	ldr	r3, [pc, #484]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d00d      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x40>
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	f200 80e1 	bhi.w	8003be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x34>
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a2a:	e0db      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4b73      	ldr	r3, [pc, #460]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8003a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a30:	e0db      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a32:	4b73      	ldr	r3, [pc, #460]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a36:	e0d8      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a38:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a42:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d063      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	099b      	lsrs	r3, r3, #6
 8003a54:	2200      	movs	r2, #0
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a62:	2300      	movs	r3, #0
 8003a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	f04f 0000 	mov.w	r0, #0
 8003a72:	f04f 0100 	mov.w	r1, #0
 8003a76:	0159      	lsls	r1, r3, #5
 8003a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a7c:	0150      	lsls	r0, r2, #5
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4621      	mov	r1, r4
 8003a84:	1a51      	subs	r1, r2, r1
 8003a86:	6139      	str	r1, [r7, #16]
 8003a88:	4629      	mov	r1, r5
 8003a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	018b      	lsls	r3, r1, #6
 8003aa0:	4651      	mov	r1, sl
 8003aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aa6:	4651      	mov	r1, sl
 8003aa8:	018a      	lsls	r2, r1, #6
 8003aaa:	4651      	mov	r1, sl
 8003aac:	ebb2 0801 	subs.w	r8, r2, r1
 8003ab0:	4659      	mov	r1, fp
 8003ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aca:	4690      	mov	r8, r2
 8003acc:	4699      	mov	r9, r3
 8003ace:	4623      	mov	r3, r4
 8003ad0:	eb18 0303 	adds.w	r3, r8, r3
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	462b      	mov	r3, r5
 8003ad8:	eb49 0303 	adc.w	r3, r9, r3
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aea:	4629      	mov	r1, r5
 8003aec:	024b      	lsls	r3, r1, #9
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003af4:	4621      	mov	r1, r4
 8003af6:	024a      	lsls	r2, r1, #9
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003afe:	2200      	movs	r2, #0
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b08:	f7fc ff5c 	bl	80009c4 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b14:	e058      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b16:	4b38      	ldr	r3, [pc, #224]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	4611      	mov	r1, r2
 8003b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b30:	4642      	mov	r2, r8
 8003b32:	464b      	mov	r3, r9
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	0159      	lsls	r1, r3, #5
 8003b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b42:	0150      	lsls	r0, r2, #5
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4641      	mov	r1, r8
 8003b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b4e:	4649      	mov	r1, r9
 8003b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b68:	ebb2 040a 	subs.w	r4, r2, sl
 8003b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	00eb      	lsls	r3, r5, #3
 8003b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7e:	00e2      	lsls	r2, r4, #3
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	4643      	mov	r3, r8
 8003b86:	18e3      	adds	r3, r4, r3
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	eb45 0303 	adc.w	r3, r5, r3
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	028b      	lsls	r3, r1, #10
 8003ba2:	4621      	mov	r1, r4
 8003ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba8:	4621      	mov	r1, r4
 8003baa:	028a      	lsls	r2, r1, #10
 8003bac:	4610      	mov	r0, r2
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	61fa      	str	r2, [r7, #28]
 8003bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bbc:	f7fc ff02 	bl	80009c4 <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003bd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be2:	e002      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8003be6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3750      	adds	r7, #80	@ 0x50
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	007a1200 	.word	0x007a1200

08003c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c20:	f7ff fff0 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0a9b      	lsrs	r3, r3, #10
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4903      	ldr	r1, [pc, #12]	@ (8003c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	08004510 	.word	0x08004510

08003c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c48:	f7ff ffdc 	bl	8003c04 <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0b5b      	lsrs	r3, r3, #13
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	@ (8003c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	08004510 	.word	0x08004510

08003c6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d035      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c94:	4b67      	ldr	r3, [pc, #412]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fccb 	bl	8001634 <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ca2:	f7fd fcc7 	bl	8001634 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0ba      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb4:	4b60      	ldr	r3, [pc, #384]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	019a      	lsls	r2, r3, #6
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	071b      	lsls	r3, r3, #28
 8003ccc:	495a      	ldr	r1, [pc, #360]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd4:	4b57      	ldr	r3, [pc, #348]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fcab 	bl	8001634 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ce2:	f7fd fca7 	bl	8001634 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e09a      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8083 	beq.w	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b49      	ldr	r3, [pc, #292]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	4a48      	ldr	r2, [pc, #288]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1e:	4b46      	ldr	r3, [pc, #280]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d2a:	4b44      	ldr	r3, [pc, #272]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a43      	ldr	r2, [pc, #268]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fc7d 	bl	8001634 <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fc79 	bl	8001634 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e06c      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d50:	4b3a      	ldr	r3, [pc, #232]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5c:	4b36      	ldr	r3, [pc, #216]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d64:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d028      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b2e      	ldr	r3, [pc, #184]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d90:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d96:	4b28      	ldr	r3, [pc, #160]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d114      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd fc47 	bl	8001634 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fc43 	bl	8001634 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e034      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dda:	4b17      	ldr	r3, [pc, #92]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dee:	4912      	ldr	r1, [pc, #72]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	4b0d      	ldr	r3, [pc, #52]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0e:	490a      	ldr	r1, [pc, #40]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	7c1a      	ldrb	r2, [r3, #16]
 8003e24:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e26:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	42470068 	.word	0x42470068
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42470e40 	.word	0x42470e40
 8003e44:	424711e0 	.word	0x424711e0

08003e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d13f      	bne.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e66:	4b24      	ldr	r3, [pc, #144]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e7c:	d12f      	bne.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e80:	617b      	str	r3, [r7, #20]
          break;
 8003e82:	e02f      	b.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e90:	d108      	bne.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e92:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e9a:	4a19      	ldr	r2, [pc, #100]	@ (8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e007      	b.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ea4:	4b14      	ldr	r3, [pc, #80]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003eb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ece:	0f1b      	lsrs	r3, r3, #28
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
          break;
 8003edc:	e002      	b.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
          break;
 8003ee2:	bf00      	nop
        }
      }
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003ee6:	bf00      	nop
    }
  }
  return frequency;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	00bb8000 	.word	0x00bb8000
 8003f00:	007a1200 	.word	0x007a1200
 8003f04:	00f42400 	.word	0x00f42400

08003f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e042      	b.n	8003fa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd fa5c 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	@ 0x24
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f82b 	bl	8003fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b0c0      	sub	sp, #256	@ 0x100
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	ea40 0301 	orr.w	r3, r0, r1
 8003fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004000:	f021 010c 	bic.w	r1, r1, #12
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800400e:	430b      	orrs	r3, r1
 8004010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004022:	6999      	ldr	r1, [r3, #24]
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	ea40 0301 	orr.w	r3, r0, r1
 800402e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b8f      	ldr	r3, [pc, #572]	@ (8004274 <UART_SetConfig+0x2cc>)
 8004038:	429a      	cmp	r2, r3
 800403a:	d005      	beq.n	8004048 <UART_SetConfig+0xa0>
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b8d      	ldr	r3, [pc, #564]	@ (8004278 <UART_SetConfig+0x2d0>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d104      	bne.n	8004052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7ff fdfc 	bl	8003c44 <HAL_RCC_GetPCLK2Freq>
 800404c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004050:	e003      	b.n	800405a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004052:	f7ff fde3 	bl	8003c1c <HAL_RCC_GetPCLK1Freq>
 8004056:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004064:	f040 810c 	bne.w	8004280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406c:	2200      	movs	r2, #0
 800406e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004072:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800407a:	4622      	mov	r2, r4
 800407c:	462b      	mov	r3, r5
 800407e:	1891      	adds	r1, r2, r2
 8004080:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004082:	415b      	adcs	r3, r3
 8004084:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800408a:	4621      	mov	r1, r4
 800408c:	eb12 0801 	adds.w	r8, r2, r1
 8004090:	4629      	mov	r1, r5
 8004092:	eb43 0901 	adc.w	r9, r3, r1
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040aa:	4690      	mov	r8, r2
 80040ac:	4699      	mov	r9, r3
 80040ae:	4623      	mov	r3, r4
 80040b0:	eb18 0303 	adds.w	r3, r8, r3
 80040b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040b8:	462b      	mov	r3, r5
 80040ba:	eb49 0303 	adc.w	r3, r9, r3
 80040be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040d6:	460b      	mov	r3, r1
 80040d8:	18db      	adds	r3, r3, r3
 80040da:	653b      	str	r3, [r7, #80]	@ 0x50
 80040dc:	4613      	mov	r3, r2
 80040de:	eb42 0303 	adc.w	r3, r2, r3
 80040e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040ec:	f7fc fc6a 	bl	80009c4 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4b61      	ldr	r3, [pc, #388]	@ (800427c <UART_SetConfig+0x2d4>)
 80040f6:	fba3 2302 	umull	r2, r3, r3, r2
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	011c      	lsls	r4, r3, #4
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004108:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800410c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004118:	415b      	adcs	r3, r3
 800411a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800411c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004120:	4641      	mov	r1, r8
 8004122:	eb12 0a01 	adds.w	sl, r2, r1
 8004126:	4649      	mov	r1, r9
 8004128:	eb43 0b01 	adc.w	fp, r3, r1
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800413c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004140:	4692      	mov	sl, r2
 8004142:	469b      	mov	fp, r3
 8004144:	4643      	mov	r3, r8
 8004146:	eb1a 0303 	adds.w	r3, sl, r3
 800414a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800414e:	464b      	mov	r3, r9
 8004150:	eb4b 0303 	adc.w	r3, fp, r3
 8004154:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004164:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800416c:	460b      	mov	r3, r1
 800416e:	18db      	adds	r3, r3, r3
 8004170:	643b      	str	r3, [r7, #64]	@ 0x40
 8004172:	4613      	mov	r3, r2
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	647b      	str	r3, [r7, #68]	@ 0x44
 800417a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800417e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004182:	f7fc fc1f 	bl	80009c4 <__aeabi_uldivmod>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4611      	mov	r1, r2
 800418c:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <UART_SetConfig+0x2d4>)
 800418e:	fba3 2301 	umull	r2, r3, r3, r1
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	2264      	movs	r2, #100	@ 0x64
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	1acb      	subs	r3, r1, r3
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041a2:	4b36      	ldr	r3, [pc, #216]	@ (800427c <UART_SetConfig+0x2d4>)
 80041a4:	fba3 2302 	umull	r2, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041b0:	441c      	add	r4, r3
 80041b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041cc:	415b      	adcs	r3, r3
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004208:	464b      	mov	r3, r9
 800420a:	460a      	mov	r2, r1
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004220:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004228:	460b      	mov	r3, r1
 800422a:	18db      	adds	r3, r3, r3
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800422e:	4613      	mov	r3, r2
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800423a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800423e:	f7fc fbc1 	bl	80009c4 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <UART_SetConfig+0x2d4>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	@ 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	3332      	adds	r3, #50	@ 0x32
 800425a:	4a08      	ldr	r2, [pc, #32]	@ (800427c <UART_SetConfig+0x2d4>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 0207 	and.w	r2, r3, #7
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4422      	add	r2, r4
 800426e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004270:	e106      	b.n	8004480 <UART_SetConfig+0x4d8>
 8004272:	bf00      	nop
 8004274:	40011000 	.word	0x40011000
 8004278:	40011400 	.word	0x40011400
 800427c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004284:	2200      	movs	r2, #0
 8004286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800428a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800428e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004292:	4642      	mov	r2, r8
 8004294:	464b      	mov	r3, r9
 8004296:	1891      	adds	r1, r2, r2
 8004298:	6239      	str	r1, [r7, #32]
 800429a:	415b      	adcs	r3, r3
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
 800429e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042a2:	4641      	mov	r1, r8
 80042a4:	1854      	adds	r4, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb43 0501 	adc.w	r5, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	00eb      	lsls	r3, r5, #3
 80042b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ba:	00e2      	lsls	r2, r4, #3
 80042bc:	4614      	mov	r4, r2
 80042be:	461d      	mov	r5, r3
 80042c0:	4643      	mov	r3, r8
 80042c2:	18e3      	adds	r3, r4, r3
 80042c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042c8:	464b      	mov	r3, r9
 80042ca:	eb45 0303 	adc.w	r3, r5, r3
 80042ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042ee:	4629      	mov	r1, r5
 80042f0:	008b      	lsls	r3, r1, #2
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f8:	4621      	mov	r1, r4
 80042fa:	008a      	lsls	r2, r1, #2
 80042fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004300:	f7fc fb60 	bl	80009c4 <__aeabi_uldivmod>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4b60      	ldr	r3, [pc, #384]	@ (800448c <UART_SetConfig+0x4e4>)
 800430a:	fba3 2302 	umull	r2, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	011c      	lsls	r4, r3, #4
 8004312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800431c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	61b9      	str	r1, [r7, #24]
 800432c:	415b      	adcs	r3, r3
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	4641      	mov	r1, r8
 8004336:	1851      	adds	r1, r2, r1
 8004338:	6139      	str	r1, [r7, #16]
 800433a:	4649      	mov	r1, r9
 800433c:	414b      	adcs	r3, r1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800434c:	4659      	mov	r1, fp
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4651      	mov	r1, sl
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4642      	mov	r2, r8
 8004362:	189b      	adds	r3, r3, r2
 8004364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004368:	464b      	mov	r3, r9
 800436a:	460a      	mov	r2, r1
 800436c:	eb42 0303 	adc.w	r3, r2, r3
 8004370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800437e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800438c:	4649      	mov	r1, r9
 800438e:	008b      	lsls	r3, r1, #2
 8004390:	4641      	mov	r1, r8
 8004392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004396:	4641      	mov	r1, r8
 8004398:	008a      	lsls	r2, r1, #2
 800439a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800439e:	f7fc fb11 	bl	80009c4 <__aeabi_uldivmod>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	4b38      	ldr	r3, [pc, #224]	@ (800448c <UART_SetConfig+0x4e4>)
 80043aa:	fba3 2301 	umull	r2, r3, r3, r1
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2264      	movs	r2, #100	@ 0x64
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	1acb      	subs	r3, r1, r3
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	3332      	adds	r3, #50	@ 0x32
 80043bc:	4a33      	ldr	r2, [pc, #204]	@ (800448c <UART_SetConfig+0x4e4>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043c8:	441c      	add	r4, r3
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80043d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80043d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	1891      	adds	r1, r2, r2
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	415b      	adcs	r3, r3
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e8:	4641      	mov	r1, r8
 80043ea:	1851      	adds	r1, r2, r1
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	4649      	mov	r1, r9
 80043f0:	414b      	adcs	r3, r1
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004400:	4659      	mov	r1, fp
 8004402:	00cb      	lsls	r3, r1, #3
 8004404:	4651      	mov	r1, sl
 8004406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800440a:	4651      	mov	r1, sl
 800440c:	00ca      	lsls	r2, r1, #3
 800440e:	4610      	mov	r0, r2
 8004410:	4619      	mov	r1, r3
 8004412:	4603      	mov	r3, r0
 8004414:	4642      	mov	r2, r8
 8004416:	189b      	adds	r3, r3, r2
 8004418:	66bb      	str	r3, [r7, #104]	@ 0x68
 800441a:	464b      	mov	r3, r9
 800441c:	460a      	mov	r2, r1
 800441e:	eb42 0303 	adc.w	r3, r2, r3
 8004422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	663b      	str	r3, [r7, #96]	@ 0x60
 800442e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800443c:	4649      	mov	r1, r9
 800443e:	008b      	lsls	r3, r1, #2
 8004440:	4641      	mov	r1, r8
 8004442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004446:	4641      	mov	r1, r8
 8004448:	008a      	lsls	r2, r1, #2
 800444a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800444e:	f7fc fab9 	bl	80009c4 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <UART_SetConfig+0x4e4>)
 8004458:	fba3 1302 	umull	r1, r3, r3, r2
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	2164      	movs	r1, #100	@ 0x64
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	3332      	adds	r3, #50	@ 0x32
 800446a:	4a08      	ldr	r2, [pc, #32]	@ (800448c <UART_SetConfig+0x4e4>)
 800446c:	fba2 2303 	umull	r2, r3, r2, r3
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4422      	add	r2, r4
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004486:	46bd      	mov	sp, r7
 8004488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448c:	51eb851f 	.word	0x51eb851f

08004490 <memset>:
 8004490:	4402      	add	r2, r0
 8004492:	4603      	mov	r3, r0
 8004494:	4293      	cmp	r3, r2
 8004496:	d100      	bne.n	800449a <memset+0xa>
 8004498:	4770      	bx	lr
 800449a:	f803 1b01 	strb.w	r1, [r3], #1
 800449e:	e7f9      	b.n	8004494 <memset+0x4>

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4d0d      	ldr	r5, [pc, #52]	@ (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	@ (80044dc <__libc_init_array+0x3c>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2600      	movs	r6, #0
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4d0b      	ldr	r5, [pc, #44]	@ (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	@ (80044e4 <__libc_init_array+0x44>)
 80044b4:	f000 f818 	bl	80044e8 <_init>
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2600      	movs	r6, #0
 80044be:	42a6      	cmp	r6, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c8:	4798      	blx	r3
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d2:	4798      	blx	r3
 80044d4:	3601      	adds	r6, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	08004528 	.word	0x08004528
 80044dc:	08004528 	.word	0x08004528
 80044e0:	08004528 	.word	0x08004528
 80044e4:	0800452c 	.word	0x0800452c

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
