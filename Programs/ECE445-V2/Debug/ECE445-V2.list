
ECE445-V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800ae38  0800ae38  0000be38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1dc  0800b1dc  0000d08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1dc  0800b1dc  0000c1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1e4  0800b1e4  0000d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1e4  0800b1e4  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1e8  0800b1e8  0000c1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800b1ec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  2000008c  0800b278  0000d08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  0800b278  0000de04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016802  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fbf  00000000  00000000  000238be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d03  00000000  00000000  000289b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000064e9  00000000  00000000  000296bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189f0  00000000  00000000  0002fba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ea7  00000000  00000000  00048594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e243b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  000e2480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000e7260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae20 	.word	0x0800ae20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	0800ae20 	.word	0x0800ae20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_I2S_TxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	audioBufferPtr = &audioBuffer[0];
 8000578:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <HAL_I2S_TxHalfCpltCallback+0x20>)
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <HAL_I2S_TxHalfCpltCallback+0x24>)
 800057c:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000000 	.word	0x20000000
 8000594:	200001e0 	.word	0x200001e0
 8000598:	200003e0 	.word	0x200003e0

0800059c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	audioBufferPtr = &audioBuffer[BUFFER_SIZE / 2];
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <HAL_I2S_TxCpltCallback+0x20>)
 80005a6:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <HAL_I2S_TxCpltCallback+0x24>)
 80005a8:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_I2S_TxCpltCallback+0x28>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000000 	.word	0x20000000
 80005c0:	200002e0 	.word	0x200002e0
 80005c4:	200003e0 	.word	0x200003e0

080005c8 <GetNextBuffer>:

void GetNextBuffer()
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
	const uint16_t NumSamples = (BUFFER_SIZE / 2) - 1;
 80005ce:	237f      	movs	r3, #127	@ 0x7f
 80005d0:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < NumSamples; i += 2)
 80005d2:	2300      	movs	r3, #0
 80005d4:	80fb      	strh	r3, [r7, #6]
 80005d6:	e013      	b.n	8000600 <GetNextBuffer+0x38>
	{
//		const int16_t sample = (int16_t)((double)((1 << 16) - 1) * ((double)(i) / (double)(NumSamples) - 0.5));
		const uint16_t sample = 0xff;//(1 << 16) - 1;
 80005d8:	23ff      	movs	r3, #255	@ 0xff
 80005da:	807b      	strh	r3, [r7, #2]
		audioBufferPtr[i]   = sample; // left
 80005dc:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <GetNextBuffer+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	887a      	ldrh	r2, [r7, #2]
 80005e8:	801a      	strh	r2, [r3, #0]
		audioBufferPtr[i+1] = sample; // right
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <GetNextBuffer+0x54>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	3301      	adds	r3, #1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	887a      	ldrh	r2, [r7, #2]
 80005f8:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < NumSamples; i += 2)
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	3302      	adds	r3, #2
 80005fe:	80fb      	strh	r3, [r7, #6]
 8000600:	88fa      	ldrh	r2, [r7, #6]
 8000602:	88bb      	ldrh	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3e7      	bcc.n	80005d8 <GetNextBuffer+0x10>
	}
	dataReadyFlag = 0;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <GetNextBuffer+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	200003e0 	.word	0x200003e0

08000624 <Run>:

void Run()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)audioBufferPtr, BUFFER_SIZE);
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <Run+0x70>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000632:	4619      	mov	r1, r3
 8000634:	4818      	ldr	r0, [pc, #96]	@ (8000698 <Run+0x74>)
 8000636:	f004 f903 	bl	8004840 <HAL_I2S_Transmit_DMA>
 800063a:	4603      	mov	r3, r0
 800063c:	71bb      	strb	r3, [r7, #6]
	if (status != HAL_OK) return;
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d122      	bne.n	800068a <Run+0x66>

	ApplicationTypeDef last_Appli_state = Appli_state;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <Run+0x78>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		if (dataReadyFlag)
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <Run+0x7c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <Run+0x32>
		{
			GetNextBuffer();
 8000652:	f7ff ffb9 	bl	80005c8 <GetNextBuffer>
		}
		MX_USB_HOST_Process();
 8000656:	f009 f993 	bl	8009980 <MX_USB_HOST_Process>
		if(last_Appli_state != Appli_state) {
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <Run+0x78>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	429a      	cmp	r2, r3
 8000662:	d0f2      	beq.n	800064a <Run+0x26>
		  printf("USB Application State: %d\r\n", Appli_state);
 8000664:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <Run+0x78>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <Run+0x80>)
 800066c:	f009 fdba 	bl	800a1e4 <iprintf>
		  last_Appli_state = Appli_state;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <Run+0x78>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	71fb      	strb	r3, [r7, #7]

		  if(Appli_state == APPLICATION_READY) {
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <Run+0x78>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d1e5      	bne.n	800064a <Run+0x26>
			start_midi();
 800067e:	f000 fa03 	bl	8000a88 <start_midi>
			printf("Midisynth Started ----------------------------\r\n");
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <Run+0x84>)
 8000684:	f009 fe16 	bl	800a2b4 <puts>
		if (dataReadyFlag)
 8000688:	e7df      	b.n	800064a <Run+0x26>
	if (status != HAL_OK) return;
 800068a:	bf00      	nop
		  }

		}
	}
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	200000f0 	.word	0x200000f0
 800069c:	200008d4 	.word	0x200008d4
 80006a0:	200003e0 	.word	0x200003e0
 80006a4:	0800ae38 	.word	0x0800ae38
 80006a8:	0800ae54 	.word	0x0800ae54

080006ac <__io_putchar>:
  * @brief  Redirects printf output to UART.
  * @param  ch: The character to output.
  * @retval The character written to the UART.
  */
int __io_putchar(int ch)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  // Send the character via UART
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b4:	1d39      	adds	r1, r7, #4
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2201      	movs	r2, #1
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <__io_putchar+0x20>)
 80006be:	f005 fbab 	bl	8005e18 <HAL_UART_Transmit>
  return ch;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000198 	.word	0x20000198

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fd28 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f812 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f94e 	bl	800097c <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f000 f92c 	bl	800093c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 f900 	bl	80008e8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006e8:	f000 f87e 	bl	80007e8 <MX_ADC1_Init>
  MX_I2S2_Init();
 80006ec:	f000 f8ce 	bl	800088c <MX_I2S2_Init>
  MX_USB_HOST_Init();
 80006f0:	f009 f920 	bl	8009934 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Run();
 80006f4:	f7ff ff96 	bl	8000624 <Run>
 80006f8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	@ 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f009 feb0 	bl	800a474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemClock_Config+0xe0>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a2c      	ldr	r2, [pc, #176]	@ (80007e0 <SystemClock_Config+0xe0>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemClock_Config+0xe0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <SystemClock_Config+0xe4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800074c:	4a25      	ldr	r2, [pc, #148]	@ (80007e4 <SystemClock_Config+0xe4>)
 800074e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <SystemClock_Config+0xe4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000760:	2303      	movs	r3, #3
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000780:	2360      	movs	r3, #96	@ 0x60
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000784:	2304      	movs	r3, #4
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f004 fca3 	bl	80050dc <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800079c:	f000 f96e 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 ff05 	bl	80055cc <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c8:	f000 f958 	bl	8000a7c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f004 ffe1 	bl	8005798 <HAL_RCC_MCOConfig>
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0x98>)
 80007fc:	4a21      	ldr	r2, [pc, #132]	@ (8000884 <MX_ADC1_Init+0x9c>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000814:	2201      	movs	r2, #1
 8000816:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC1_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000828:	4a17      	ldr	r2, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xa0>)
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000834:	2201      	movs	r2, #1
 8000836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000842:	2201      	movs	r2, #1
 8000844:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000848:	f000 fd04 	bl	8001254 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f913 	bl	8000a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC1_Init+0x98>)
 8000868:	f000 fd38 	bl	80012dc <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000872:	f000 f903 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000a8 	.word	0x200000a8
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_I2S2_Init+0x54>)
 8000892:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <MX_I2S2_Init+0x58>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2S2_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008b0:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008b2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80008b6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_I2S2_Init+0x54>)
 80008cc:	f003 fe78 	bl	80045c0 <HAL_I2S_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80008d6:	f000 f8d1 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000f0 	.word	0x200000f0
 80008e4:	40003800 	.word	0x40003800

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <MX_USART2_UART_Init+0x50>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b10      	ldr	r3, [pc, #64]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	@ (8000934 <MX_USART2_UART_Init+0x4c>)
 8000920:	f005 fa2a 	bl	8005d78 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 f8a7 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000198 	.word	0x20000198
 8000938:	40004400 	.word	0x40004400

0800093c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_DMA_Init+0x3c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a0b      	ldr	r2, [pc, #44]	@ (8000978 <MX_DMA_Init+0x3c>)
 800094c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_DMA_Init+0x3c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200f      	movs	r0, #15
 8000964:	f000 ffb3 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000968:	200f      	movs	r0, #15
 800096a:	f000 ffcc 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b36      	ldr	r3, [pc, #216]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a35      	ldr	r2, [pc, #212]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b33      	ldr	r3, [pc, #204]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_GPIO_Init+0xf4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_Out_GPIO_Port, Audio_Out_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2120      	movs	r1, #32
 8000a06:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <MX_GPIO_Init+0xf8>)
 8000a08:	f001 fc8c 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a12:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4815      	ldr	r0, [pc, #84]	@ (8000a78 <MX_GPIO_Init+0xfc>)
 8000a24:	f001 fafa 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Out_Pin */
  GPIO_InitStruct.Pin = Audio_Out_Pin;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Audio_Out_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <MX_GPIO_Init+0xf8>)
 8000a40:	f001 faec 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4804      	ldr	r0, [pc, #16]	@ (8000a74 <MX_GPIO_Init+0xf8>)
 8000a62:	f001 fadb 	bl	800201c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	@ 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020800 	.word	0x40020800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <start_midi>:
// user code

// ======================================================================
// start the process of receiving midi info into the MIDI_RX_Buffer
void start_midi(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8000a8c:	2240      	movs	r2, #64	@ 0x40
 8000a8e:	4903      	ldr	r1, [pc, #12]	@ (8000a9c <start_midi+0x14>)
 8000a90:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <start_midi+0x18>)
 8000a92:	f007 f817 	bl	8007ac4 <USBH_MIDI_Receive>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200003e4 	.word	0x200003e4
 8000aa0:	2000042c 	.word	0x2000042c

08000aa4 <USBH_MIDI_ReceiveCallback>:

// ======================================================================
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  // each USB midi package is 4 bytes long
  uint16_t numberOfPackets = USBH_MIDI_GetLastReceivedDataSize(&hUsbHostFS) / 4;
 8000aac:	481d      	ldr	r0, [pc, #116]	@ (8000b24 <USBH_MIDI_ReceiveCallback+0x80>)
 8000aae:	f006 ffed 	bl	8007a8c <USBH_MIDI_GetLastReceivedDataSize>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	81bb      	strh	r3, [r7, #12]
  //printf("midi received %d packets.\r\n", numberOfPackets);
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	81fb      	strh	r3, [r7, #14]
 8000abc:	e024      	b.n	8000b08 <USBH_MIDI_ReceiveCallback+0x64>
    uint8_t cin_cable   = MIDI_RX_Buffer[4*i+0];
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4a19      	ldr	r2, [pc, #100]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x84>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	72fb      	strb	r3, [r7, #11]
    uint8_t midi_cmd    = MIDI_RX_Buffer[4*i+1];
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	3301      	adds	r3, #1
 8000ace:	4a16      	ldr	r2, [pc, #88]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x84>)
 8000ad0:	5cd3      	ldrb	r3, [r2, r3]
 8000ad2:	72bb      	strb	r3, [r7, #10]
    uint8_t midi_param0 = MIDI_RX_Buffer[4*i+2];
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	3302      	adds	r3, #2
 8000ada:	4a13      	ldr	r2, [pc, #76]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x84>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	727b      	strb	r3, [r7, #9]
    uint8_t midi_param1 = MIDI_RX_Buffer[4*i+3];
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	3303      	adds	r3, #3
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x84>)
 8000ae8:	5cd3      	ldrb	r3, [r2, r3]
 8000aea:	723b      	strb	r3, [r7, #8]
    if(cin_cable == 0) {
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <USBH_MIDI_ReceiveCallback+0x5c>
      continue;
    }
    decode_midi(i, midi_cmd, midi_param0, midi_param1);
 8000af2:	7a3b      	ldrb	r3, [r7, #8]
 8000af4:	7a7a      	ldrb	r2, [r7, #9]
 8000af6:	7ab9      	ldrb	r1, [r7, #10]
 8000af8:	89f8      	ldrh	r0, [r7, #14]
 8000afa:	f000 f817 	bl	8000b2c <decode_midi>
 8000afe:	e000      	b.n	8000b02 <USBH_MIDI_ReceiveCallback+0x5e>
      continue;
 8000b00:	bf00      	nop
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	3301      	adds	r3, #1
 8000b06:	81fb      	strh	r3, [r7, #14]
 8000b08:	89fa      	ldrh	r2, [r7, #14]
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d3d6      	bcc.n	8000abe <USBH_MIDI_ReceiveCallback+0x1a>
  }
  // start a new reception
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8000b10:	2240      	movs	r2, #64	@ 0x40
 8000b12:	4905      	ldr	r1, [pc, #20]	@ (8000b28 <USBH_MIDI_ReceiveCallback+0x84>)
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <USBH_MIDI_ReceiveCallback+0x80>)
 8000b16:	f006 ffd5 	bl	8007ac4 <USBH_MIDI_Receive>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000042c 	.word	0x2000042c
 8000b28:	200003e4 	.word	0x200003e4

08000b2c <decode_midi>:

// ======================================================================
// decode midi input, react to note on/off commands
void decode_midi(uint16_t i, uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	4604      	mov	r4, r0
 8000b34:	4608      	mov	r0, r1
 8000b36:	4611      	mov	r1, r2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	80fb      	strh	r3, [r7, #6]
 8000b3e:	4603      	mov	r3, r0
 8000b40:	717b      	strb	r3, [r7, #5]
 8000b42:	460b      	mov	r3, r1
 8000b44:	713b      	strb	r3, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	70fb      	strb	r3, [r7, #3]

  switch(midi_cmd & 0xf0) {
 8000b4a:	797b      	ldrb	r3, [r7, #5]
 8000b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000b50:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b52:	d028      	beq.n	8000ba6 <decode_midi+0x7a>
 8000b54:	2bf0      	cmp	r3, #240	@ 0xf0
 8000b56:	dc33      	bgt.n	8000bc0 <decode_midi+0x94>
 8000b58:	2be0      	cmp	r3, #224	@ 0xe0
 8000b5a:	d024      	beq.n	8000ba6 <decode_midi+0x7a>
 8000b5c:	2be0      	cmp	r3, #224	@ 0xe0
 8000b5e:	dc2f      	bgt.n	8000bc0 <decode_midi+0x94>
 8000b60:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b62:	d020      	beq.n	8000ba6 <decode_midi+0x7a>
 8000b64:	2bd0      	cmp	r3, #208	@ 0xd0
 8000b66:	dc2b      	bgt.n	8000bc0 <decode_midi+0x94>
 8000b68:	2bc0      	cmp	r3, #192	@ 0xc0
 8000b6a:	d01c      	beq.n	8000ba6 <decode_midi+0x7a>
 8000b6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8000b6e:	dc27      	bgt.n	8000bc0 <decode_midi+0x94>
 8000b70:	2bb0      	cmp	r3, #176	@ 0xb0
 8000b72:	d018      	beq.n	8000ba6 <decode_midi+0x7a>
 8000b74:	2bb0      	cmp	r3, #176	@ 0xb0
 8000b76:	dc23      	bgt.n	8000bc0 <decode_midi+0x94>
 8000b78:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b7a:	d014      	beq.n	8000ba6 <decode_midi+0x7a>
 8000b7c:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b7e:	dc1f      	bgt.n	8000bc0 <decode_midi+0x94>
 8000b80:	2b80      	cmp	r3, #128	@ 0x80
 8000b82:	d002      	beq.n	8000b8a <decode_midi+0x5e>
 8000b84:	2b90      	cmp	r3, #144	@ 0x90
 8000b86:	d007      	beq.n	8000b98 <decode_midi+0x6c>
    printf("%d: %02x %02x %02x\r\n", i, midi_cmd, midi_param0, midi_param1);
    printf("command not handled\r\n");
    break;
  }

}
 8000b88:	e01a      	b.n	8000bc0 <decode_midi+0x94>
    note_off(midi_cmd, midi_param0, midi_param1);
 8000b8a:	78fa      	ldrb	r2, [r7, #3]
 8000b8c:	7939      	ldrb	r1, [r7, #4]
 8000b8e:	797b      	ldrb	r3, [r7, #5]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f9cb 	bl	8000f2c <note_off>
    break;
 8000b96:	e013      	b.n	8000bc0 <decode_midi+0x94>
    note_on(midi_cmd, midi_param0, midi_param1);
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	7939      	ldrb	r1, [r7, #4]
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f9d3 	bl	8000f4a <note_on>
    break;
 8000ba4:	e00c      	b.n	8000bc0 <decode_midi+0x94>
    printf("%d: %02x %02x %02x\r\n", i, midi_cmd, midi_param0, midi_param1);
 8000ba6:	88f9      	ldrh	r1, [r7, #6]
 8000ba8:	797a      	ldrb	r2, [r7, #5]
 8000baa:	7938      	ldrb	r0, [r7, #4]
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <decode_midi+0x9c>)
 8000bb4:	f009 fb16 	bl	800a1e4 <iprintf>
    printf("command not handled\r\n");
 8000bb8:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <decode_midi+0xa0>)
 8000bba:	f009 fb7b 	bl	800a2b4 <puts>
    break;
 8000bbe:	bf00      	nop
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	0800ae84 	.word	0x0800ae84
 8000bcc:	0800ae9c 	.word	0x0800ae9c

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fe52 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <HAL_ADC_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d127      	bne.n	8000c92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_ADC_MspInit+0x80>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <HAL_ADC_MspInit+0x84>)
 8000c8e:	f001 f9c5 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40012000 	.word	0x40012000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	@ 0x40
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a49      	ldr	r2, [pc, #292]	@ (8000dfc <HAL_I2S_MspInit+0x154>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 808c 	bne.w	8000df4 <HAL_I2S_MspInit+0x14c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000ce0:	2332      	movs	r3, #50	@ 0x32
 8000ce2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce8:	f107 0318 	add.w	r3, r7, #24
 8000cec:	4618      	mov	r0, r3
 8000cee:	f004 fef5 	bl	8005adc <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8000cf8:	f7ff fec0 	bl	8000a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	4a3e      	ldr	r2, [pc, #248]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	4b38      	ldr	r3, [pc, #224]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d20:	4a37      	ldr	r2, [pc, #220]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d28:	4b35      	ldr	r3, [pc, #212]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	4a30      	ldr	r2, [pc, #192]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d44:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <HAL_I2S_MspInit+0x158>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d50:	2308      	movs	r3, #8
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4826      	ldr	r0, [pc, #152]	@ (8000e04 <HAL_I2S_MspInit+0x15c>)
 8000d6c:	f001 f956 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000d70:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d82:	2305      	movs	r3, #5
 8000d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481e      	ldr	r0, [pc, #120]	@ (8000e08 <HAL_I2S_MspInit+0x160>)
 8000d8e:	f001 f945 	bl	800201c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000d94:	4a1e      	ldr	r2, [pc, #120]	@ (8000e10 <HAL_I2S_MspInit+0x168>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000da0:	2240      	movs	r2, #64	@ 0x40
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db2:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000db4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000dc2:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dcc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000dd0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dda:	f000 fdaf 	bl	800193c <HAL_DMA_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2S_MspInit+0x140>
    {
      Error_Handler();
 8000de4:	f7ff fe4a 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000dec:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dee:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_I2S_MspInit+0x164>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000df4:	bf00      	nop
 8000df6:	3740      	adds	r7, #64	@ 0x40
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40003800 	.word	0x40003800
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	20000138 	.word	0x20000138
 8000e10:	40026070 	.word	0x40026070

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_UART_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e8a:	f001 f8c7 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	@ 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <NMI_Handler+0x4>

08000eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <MemManage_Handler+0x4>

08000ebc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f967 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <DMA1_Stream4_IRQHandler+0x10>)
 8000f0a:	f000 fe1d 	bl	8001b48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000138 	.word	0x20000138

08000f18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <OTG_FS_IRQHandler+0x10>)
 8000f1e:	f001 fcfb 	bl	8002918 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200008d8 	.word	0x200008d8

08000f2c <note_off>:
#include "synth.h"


// ======================================================================
void note_off(uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	460b      	mov	r3, r1
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	717b      	strb	r3, [r7, #5]

}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <note_on>:

// ======================================================================
void note_on(uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	460b      	mov	r3, r1
 8000f56:	71bb      	strb	r3, [r7, #6]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	717b      	strb	r3, [r7, #5]

}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
  }

  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e009      	b.n	8000fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fb75 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <_write+0x12>
  }
  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f009 fa5c 	bl	800a530 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	4a05      	ldr	r2, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20018000 	.word	0x20018000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000424 	.word	0x20000424
 80010ac:	20000e08 	.word	0x20000e08

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800110c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010d8:	f7ff ffea 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	@ (8001114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001102:	f009 fa1b 	bl	800a53c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff fae3 	bl	80006d0 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001118:	0800b1ec 	.word	0x0800b1ec
  ldr r2, =_sbss
 800111c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001120:	20000e04 	.word	0x20000e04

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 fbb1 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fd38 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fbc9 	bl	8001922 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 fb91 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000004 	.word	0x20000004
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000428 	.word	0x20000428

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000428 	.word	0x20000428

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000000c 	.word	0x2000000c

08001254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e033      	b.n	80012d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fcd4 	bl	8000c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800129a:	f023 0302 	bic.w	r3, r3, #2
 800129e:	f043 0202 	orr.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f93a 	bl	8001520 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1c>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e105      	b.n	8001504 <HAL_ADC_ConfigChannel+0x228>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d925      	bls.n	8001354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	3b1e      	subs	r3, #30
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	4603      	mov	r3, r0
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4403      	add	r3, r0
 8001346:	3b1e      	subs	r3, #30
 8001348:	409a      	lsls	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	e022      	b.n	800139a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4403      	add	r3, r0
 8001390:	409a      	lsls	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d824      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3b05      	subs	r3, #5
 80013b4:	221f      	movs	r2, #31
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	400a      	ands	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b05      	subs	r3, #5
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ea:	e04c      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d824      	bhi.n	800143e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b23      	subs	r3, #35	@ 0x23
 8001406:	221f      	movs	r2, #31
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43da      	mvns	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	400a      	ands	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b23      	subs	r3, #35	@ 0x23
 8001430:	fa00 f203 	lsl.w	r2, r0, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
 800143c:	e023      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b41      	subs	r3, #65	@ 0x41
 8001450:	221f      	movs	r2, #31
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b41      	subs	r3, #65	@ 0x41
 800147a:	fa00 f203 	lsl.w	r2, r0, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <HAL_ADC_ConfigChannel+0x234>)
 8001488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_ADC_ConfigChannel+0x238>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d109      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d105      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <HAL_ADC_ConfigChannel+0x238>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d123      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b10      	cmp	r3, #16
 80014b8:	d003      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0x1e6>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b11      	cmp	r3, #17
 80014c0:	d11b      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d111      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_ADC_ConfigChannel+0x23c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <HAL_ADC_ConfigChannel+0x240>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9a      	lsrs	r2, r3, #18
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014ec:	e002      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40012300 	.word	0x40012300
 8001514:	40012000 	.word	0x40012000
 8001518:	20000004 	.word	0x20000004
 800151c:	431bde83 	.word	0x431bde83

08001520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001528:	4b79      	ldr	r3, [pc, #484]	@ (8001710 <ADC_Init+0x1f0>)
 800152a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001554:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	021a      	lsls	r2, r3, #8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001578:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800159a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6899      	ldr	r1, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b2:	4a58      	ldr	r2, [pc, #352]	@ (8001714 <ADC_Init+0x1f4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d022      	beq.n	80015fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e00f      	b.n	800161e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800160c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800161c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0202 	bic.w	r2, r2, #2
 800162c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
 8001638:	005a      	lsls	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d01b      	beq.n	8001684 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800165a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800166a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	3b01      	subs	r3, #1
 8001678:	035a      	lsls	r2, r3, #13
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	e007      	b.n	8001694 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001692:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	051a      	lsls	r2, r3, #20
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016d6:	025a      	lsls	r2, r3, #9
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6899      	ldr	r1, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	029a      	lsls	r2, r3, #10
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40012300 	.word	0x40012300
 8001714:	0f000001 	.word	0x0f000001

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	@ (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	@ (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	@ (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	@ (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff29 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff3e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff31 	bl	800177c <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff fc54 	bl	80011f4 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e099      	b.n	8001a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001978:	e00f      	b.n	800199a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197a:	f7ff fc3b 	bl	80011f4 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b05      	cmp	r3, #5
 8001986:	d908      	bls.n	800199a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2220      	movs	r2, #32
 800198c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e078      	b.n	8001a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e8      	bne.n	800197a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4b38      	ldr	r3, [pc, #224]	@ (8001a94 <HAL_DMA_Init+0x158>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d107      	bne.n	8001a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	4313      	orrs	r3, r2
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d117      	bne.n	8001a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fa6f 	bl	8001f24 <DMA_CheckFifoParam>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2240      	movs	r2, #64	@ 0x40
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e016      	b.n	8001a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fa26 	bl	8001eb8 <DMA_CalcBaseAndBitshift>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a74:	223f      	movs	r2, #63	@ 0x3f
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	f010803f 	.word	0xf010803f

08001a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_DMA_Start_IT+0x26>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e040      	b.n	8001b40 <HAL_DMA_Start_IT+0xa8>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d12f      	bne.n	8001b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f9b8 	bl	8001e5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af0:	223f      	movs	r2, #63	@ 0x3f
 8001af2:	409a      	lsls	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0216 	orr.w	r2, r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0208 	orr.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e005      	b.n	8001b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b54:	4b8e      	ldr	r3, [pc, #568]	@ (8001d90 <HAL_DMA_IRQHandler+0x248>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a8e      	ldr	r2, [pc, #568]	@ (8001d94 <HAL_DMA_IRQHandler+0x24c>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b72:	2208      	movs	r2, #8
 8001b74:	409a      	lsls	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d01a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb8:	2201      	movs	r2, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bee:	2204      	movs	r2, #4
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d012      	beq.n	8001c20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00b      	beq.n	8001c20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c18:	f043 0204 	orr.w	r2, r3, #4
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c24:	2210      	movs	r2, #16
 8001c26:	409a      	lsls	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d043      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d03c      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	2210      	movs	r2, #16
 8001c44:	409a      	lsls	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d018      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d108      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d024      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
 8001c76:	e01f      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
 8001c88:	e016      	b.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0208 	bic.w	r2, r2, #8
 8001ca6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 808f 	beq.w	8001de8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 8087 	beq.w	8001de8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cde:	2220      	movs	r2, #32
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d136      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0216 	bic.w	r2, r2, #22
 8001d00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_DMA_IRQHandler+0x1da>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0208 	bic.w	r2, r2, #8
 8001d30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d36:	223f      	movs	r2, #63	@ 0x3f
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d07e      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
        }
        return;
 8001d5e:	e079      	b.n	8001e54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01d      	beq.n	8001daa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10d      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d031      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e02c      	b.n	8001de8 <HAL_DMA_IRQHandler+0x2a0>
 8001d8e:	bf00      	nop
 8001d90:	20000004 	.word	0x20000004
 8001d94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	4798      	blx	r3
 8001da8:	e01e      	b.n	8001de8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10f      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0210 	bic.w	r2, r2, #16
 8001dc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d032      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d022      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2205      	movs	r2, #5
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	3301      	adds	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d307      	bcc.n	8001e30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f2      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x2cc>
 8001e2e:	e000      	b.n	8001e32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
 8001e52:	e000      	b.n	8001e56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e54:	bf00      	nop
    }
  }
}
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b40      	cmp	r3, #64	@ 0x40
 8001e88:	d108      	bne.n	8001e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e9a:	e007      	b.n	8001eac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3b10      	subs	r3, #16
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <DMA_CalcBaseAndBitshift+0x64>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ed2:	4a13      	ldr	r2, [pc, #76]	@ (8001f20 <DMA_CalcBaseAndBitshift+0x68>)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d909      	bls.n	8001efa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	1d1a      	adds	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ef8:	e007      	b.n	8001f0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	aaaaaaab 	.word	0xaaaaaaab
 8001f20:	0800b1a0 	.word	0x0800b1a0

08001f24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11f      	bne.n	8001f7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d856      	bhi.n	8001ff2 <DMA_CheckFifoParam+0xce>
 8001f44:	a201      	add	r2, pc, #4	@ (adr r2, 8001f4c <DMA_CheckFifoParam+0x28>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08001f5d 	.word	0x08001f5d
 8001f50:	08001f6f 	.word	0x08001f6f
 8001f54:	08001f5d 	.word	0x08001f5d
 8001f58:	08001ff3 	.word	0x08001ff3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d046      	beq.n	8001ff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6c:	e043      	b.n	8001ff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f76:	d140      	bne.n	8001ffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f7c:	e03d      	b.n	8001ffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f86:	d121      	bne.n	8001fcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d837      	bhi.n	8001ffe <DMA_CheckFifoParam+0xda>
 8001f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f94 <DMA_CheckFifoParam+0x70>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fab 	.word	0x08001fab
 8001f9c:	08001fa5 	.word	0x08001fa5
 8001fa0:	08001fbd 	.word	0x08001fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa8:	e030      	b.n	800200c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d025      	beq.n	8002002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fba:	e022      	b.n	8002002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fc4:	d11f      	bne.n	8002006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fca:	e01c      	b.n	8002006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d903      	bls.n	8001fda <DMA_CheckFifoParam+0xb6>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d003      	beq.n	8001fe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fd8:	e018      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8001fde:	e015      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00e      	beq.n	800200a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e00b      	b.n	800200a <DMA_CheckFifoParam+0xe6>
      break;
 8001ff2:	bf00      	nop
 8001ff4:	e00a      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8001ff6:	bf00      	nop
 8001ff8:	e008      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e006      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8001ffe:	bf00      	nop
 8002000:	e004      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;   
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
    }
  } 
  
  return status; 
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e159      	b.n	80022ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4013      	ands	r3, r2
 800204a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	429a      	cmp	r2, r3
 8002052:	f040 8148 	bne.w	80022e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d005      	beq.n	800206e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	2b02      	cmp	r3, #2
 800206c:	d130      	bne.n	80020d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0201 	and.w	r2, r3, #1
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d017      	beq.n	800210c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d123      	bne.n	8002160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	08da      	lsrs	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3208      	adds	r2, #8
 8002120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	220f      	movs	r2, #15
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	08da      	lsrs	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3208      	adds	r2, #8
 800215a:	69b9      	ldr	r1, [r7, #24]
 800215c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0203 	and.w	r2, r3, #3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80a2 	beq.w	80022e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b57      	ldr	r3, [pc, #348]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a56      	ldr	r2, [pc, #344]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b54      	ldr	r3, [pc, #336]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021be:	4a52      	ldr	r2, [pc, #328]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a49      	ldr	r2, [pc, #292]	@ (800230c <HAL_GPIO_Init+0x2f0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x202>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a48      	ldr	r2, [pc, #288]	@ (8002310 <HAL_GPIO_Init+0x2f4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x1fe>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a47      	ldr	r2, [pc, #284]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x1fa>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <HAL_GPIO_Init+0x2fc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a45      	ldr	r2, [pc, #276]	@ (800231c <HAL_GPIO_Init+0x300>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x1f2>
 800220a:	2304      	movs	r3, #4
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800220e:	2307      	movs	r3, #7
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x204>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x204>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x204>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b38      	ldr	r3, [pc, #224]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a2f      	ldr	r2, [pc, #188]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <HAL_GPIO_Init+0x304>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <HAL_GPIO_Init+0x304>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <HAL_GPIO_Init+0x304>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f aea2 	bls.w	8002038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	@ 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af02      	add	r7, sp, #8
 800235c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e059      	b.n	800241c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f007 fb34 	bl	80099f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2203      	movs	r2, #3
 800238c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002396:	d102      	bne.n	800239e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 f969 	bl	800667a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7c1a      	ldrb	r2, [r3, #16]
 80023b0:	f88d 2000 	strb.w	r2, [sp]
 80023b4:	3304      	adds	r3, #4
 80023b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b8:	f004 f8ea 	bl	8006590 <USB_CoreInit>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d005      	beq.n	80023ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e026      	b.n	800241c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f961 	bl	800669c <USB_SetCurrentMode>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e017      	b.n	800241c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7c1a      	ldrb	r2, [r3, #16]
 80023f4:	f88d 2000 	strb.w	r2, [sp]
 80023f8:	3304      	adds	r3, #4
 80023fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fc:	f004 fb04 	bl	8006a08 <USB_HostInit>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e004      	b.n	800241c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b08b      	sub	sp, #44	@ 0x2c
 8002428:	af04      	add	r7, sp, #16
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	70fb      	strb	r3, [r7, #3]
 8002436:	460b      	mov	r3, r1
 8002438:	70bb      	strb	r3, [r7, #2]
 800243a:	4613      	mov	r3, r2
 800243c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800243e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002440:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_HCD_HC_Init+0x2c>
 800244c:	2302      	movs	r3, #2
 800244e:	e09d      	b.n	800258c <HAL_HCD_HC_Init+0x168>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3319      	adds	r3, #25
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	3314      	adds	r3, #20
 800247c:	787a      	ldrb	r2, [r7, #1]
 800247e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3315      	adds	r3, #21
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3326      	adds	r3, #38	@ 0x26
 80024a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80024a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	78bb      	ldrb	r3, [r7, #2]
 80024ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	3316      	adds	r3, #22
 80024c2:	4602      	mov	r2, r0
 80024c4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fbc8 	bl	8002c60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80024d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da0a      	bge.n	80024ee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3317      	adds	r3, #23
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e009      	b.n	8002502 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	3317      	adds	r3, #23
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 fbcc 	bl	8006ca4 <USB_GetHostSpeed>
 800250c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800250e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d10b      	bne.n	800252e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002516:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_HCD_HC_Init+0x10a>
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2bbc      	cmp	r3, #188	@ 0xbc
 8002528:	d901      	bls.n	800252e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800252a:	23bc      	movs	r3, #188	@ 0xbc
 800252c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3318      	adds	r3, #24
 800253e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	b298      	uxth	r0, r3
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	3328      	adds	r3, #40	@ 0x28
 8002558:	4602      	mov	r2, r0
 800255a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	b29b      	uxth	r3, r3
 8002564:	787c      	ldrb	r4, [r7, #1]
 8002566:	78ba      	ldrb	r2, [r7, #2]
 8002568:	78f9      	ldrb	r1, [r7, #3]
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4623      	mov	r3, r4
 800257a:	f004 fbbb 	bl	8006cf4 <USB_HC_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800258a:	7bfb      	ldrb	r3, [r7, #15]
}
 800258c:	4618      	mov	r0, r3
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd90      	pop	{r4, r7, pc}

08002594 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_HCD_HC_Halt+0x1e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e00f      	b.n	80025d2 <HAL_HCD_HC_Halt+0x3e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 ff01 	bl	80073ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	70fb      	strb	r3, [r7, #3]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70bb      	strb	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3317      	adds	r3, #23
 8002606:	78ba      	ldrb	r2, [r7, #2]
 8002608:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3326      	adds	r3, #38	@ 0x26
 800261a:	787a      	ldrb	r2, [r7, #1]
 800261c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800261e:	7c3b      	ldrb	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d114      	bne.n	800264e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	332a      	adds	r3, #42	@ 0x2a
 8002634:	2203      	movs	r2, #3
 8002636:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3319      	adds	r3, #25
 8002648:	7f3a      	ldrb	r2, [r7, #28]
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e009      	b.n	8002662 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800264e:	78fa      	ldrb	r2, [r7, #3]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4613      	mov	r3, r2
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	332a      	adds	r3, #42	@ 0x2a
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002662:	787b      	ldrb	r3, [r7, #1]
 8002664:	2b03      	cmp	r3, #3
 8002666:	f200 8102 	bhi.w	800286e <HAL_HCD_HC_SubmitRequest+0x292>
 800266a:	a201      	add	r2, pc, #4	@ (adr r2, 8002670 <HAL_HCD_HC_SubmitRequest+0x94>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002681 	.word	0x08002681
 8002674:	08002859 	.word	0x08002859
 8002678:	08002745 	.word	0x08002745
 800267c:	080027cf 	.word	0x080027cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002680:	7c3b      	ldrb	r3, [r7, #16]
 8002682:	2b01      	cmp	r3, #1
 8002684:	f040 80f5 	bne.w	8002872 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002688:	78bb      	ldrb	r3, [r7, #2]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d12d      	bne.n	80026ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800268e:	8b3b      	ldrh	r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	333d      	adds	r3, #61	@ 0x3d
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	333d      	adds	r3, #61	@ 0x3d
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	332a      	adds	r3, #42	@ 0x2a
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80026d2:	e0ce      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	332a      	adds	r3, #42	@ 0x2a
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
      break;
 80026e8:	e0c3      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	331a      	adds	r3, #26
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 80b8 	bne.w	8002872 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	333c      	adds	r3, #60	@ 0x3c
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	332a      	adds	r3, #42	@ 0x2a
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
      break;
 800272c:	e0a1      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	332a      	adds	r3, #42	@ 0x2a
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
      break;
 8002742:	e096      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d120      	bne.n	800278c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	333d      	adds	r3, #61	@ 0x3d
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	332a      	adds	r3, #42	@ 0x2a
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002774:	e07e      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	332a      	adds	r3, #42	@ 0x2a
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
      break;
 800278a:	e073      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	333c      	adds	r3, #60	@ 0x3c
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	332a      	adds	r3, #42	@ 0x2a
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
      break;
 80027b6:	e05d      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	332a      	adds	r3, #42	@ 0x2a
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
      break;
 80027cc:	e052      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027ce:	78bb      	ldrb	r3, [r7, #2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d120      	bne.n	8002816 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	333d      	adds	r3, #61	@ 0x3d
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	332a      	adds	r3, #42	@ 0x2a
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027fe:	e039      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	332a      	adds	r3, #42	@ 0x2a
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
      break;
 8002814:	e02e      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	333c      	adds	r3, #60	@ 0x3c
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	332a      	adds	r3, #42	@ 0x2a
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
      break;
 8002840:	e018      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	332a      	adds	r3, #42	@ 0x2a
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
      break;
 8002856:	e00d      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	332a      	adds	r3, #42	@ 0x2a
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
      break;
 800286c:	e002      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002872:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	332c      	adds	r3, #44	@ 0x2c
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	8b39      	ldrh	r1, [r7, #24]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4403      	add	r3, r0
 8002898:	3334      	adds	r3, #52	@ 0x34
 800289a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334c      	adds	r3, #76	@ 0x4c
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3338      	adds	r3, #56	@ 0x38
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	3315      	adds	r3, #21
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334d      	adds	r3, #77	@ 0x4d
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3310      	adds	r3, #16
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	1d19      	adds	r1, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	799b      	ldrb	r3, [r3, #6]
 8002906:	461a      	mov	r2, r3
 8002908:	f004 fb0a 	bl	8006f20 <USB_HC_StartXfer>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop

08002918 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f004 f82a 	bl	8006988 <USB_GetMode>
 8002934:	4603      	mov	r3, r0
 8002936:	2b01      	cmp	r3, #1
 8002938:	f040 80fb 	bne.w	8002b32 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 ffed 	bl	8006920 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80f1 	beq.w	8002b30 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f003 ffe4 	bl	8006920 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800295e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002962:	d104      	bne.n	800296e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800296c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f003 ffd4 	bl	8006920 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002982:	d104      	bne.n	800298e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800298c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 ffc4 	bl	8006920 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800299e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a2:	d104      	bne.n	80029ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 ffb4 	bl	8006920 <USB_ReadInterrupts>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d103      	bne.n	80029ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2202      	movs	r2, #2
 80029c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 ffa6 	bl	8006920 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029de:	d120      	bne.n	8002a22 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80029e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d113      	bne.n	8002a22 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029fa:	2110      	movs	r1, #16
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f003 fe99 	bl	8006734 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a02:	6938      	ldr	r0, [r7, #16]
 8002a04:	f003 fec8 	bl	8006798 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7a5b      	ldrb	r3, [r3, #9]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d105      	bne.n	8002a1c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 f8a4 	bl	8006b64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f007 f857 	bl	8009ad0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 ff7a 	bl	8006920 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a36:	d102      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 fd4d 	bl	80044d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 ff6c 	bl	8006920 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d106      	bne.n	8002a60 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f007 f820 	bl	8009a98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 ff5b 	bl	8006920 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a74:	d139      	bne.n	8002aea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fc94 	bl	80073a8 <USB_HC_ReadInterrupt>
 8002a80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	e025      	b.n	8002ad4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d018      	beq.n	8002ace <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f905 	bl	8002cca <HCD_HC_IN_IRQHandler>
 8002ac0:	e005      	b.n	8002ace <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 ff67 	bl	800399c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	795b      	ldrb	r3, [r3, #5]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d3d3      	bcc.n	8002a88 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 ff16 	bl	8006920 <USB_ReadInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d101      	bne.n	8002b02 <HAL_HCD_IRQHandler+0x1ea>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_HCD_IRQHandler+0x1ec>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d014      	beq.n	8002b32 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f001 fbfe 	bl	800431a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0210 	orr.w	r2, r2, #16
 8002b2c:	619a      	str	r2, [r3, #24]
 8002b2e:	e000      	b.n	8002b32 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002b30:	bf00      	nop
    }
  }
}
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_HCD_Start+0x16>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e013      	b.n	8002b76 <HAL_HCD_Start+0x3e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 f868 	bl	8006c32 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fd76 	bl	8006658 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_HCD_Stop+0x16>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e00d      	b.n	8002bb0 <HAL_HCD_Stop+0x32>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fd32 	bl	800760a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 f80a 	bl	8006bde <USB_ResetPort>
 8002bca:	4603      	mov	r3, r0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	334c      	adds	r3, #76	@ 0x4c
 8002bf0:	781b      	ldrb	r3, [r3, #0]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	1a9b      	subs	r3, r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3338      	adds	r3, #56	@ 0x38
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 f84c 	bl	8006cd2 <USB_GetCurrentFrame>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 f827 	bl	8006ca4 <USB_GetHostSpeed>
 8002c56:	4603      	mov	r3, r0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	331a      	adds	r3, #26
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	331b      	adds	r3, #27
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3325      	adds	r3, #37	@ 0x25
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3324      	adds	r3, #36	@ 0x24
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fe2c 	bl	8006946 <USB_ReadChInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11a      	bne.n	8002d2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	2304      	movs	r3, #4
 8002d08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	334d      	adds	r3, #77	@ 0x4d
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fb4f 	bl	80073ca <USB_HC_Halt>
 8002d2c:	e09e      	b.n	8002e6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fe05 	bl	8006946 <USB_ReadChInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d46:	d11b      	bne.n	8002d80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	334d      	adds	r3, #77	@ 0x4d
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 fb26 	bl	80073ca <USB_HC_Halt>
 8002d7e:	e075      	b.n	8002e6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fddc 	bl	8006946 <USB_ReadChInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d11a      	bne.n	8002dce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	2308      	movs	r3, #8
 8002da8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	334d      	adds	r3, #77	@ 0x4d
 8002dba:	2206      	movs	r2, #6
 8002dbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 faff 	bl	80073ca <USB_HC_Halt>
 8002dcc:	e04e      	b.n	8002e6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 fdb5 	bl	8006946 <USB_ReadChInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de6:	d11b      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334d      	adds	r3, #77	@ 0x4d
 8002e0c:	2209      	movs	r2, #9
 8002e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 fad6 	bl	80073ca <USB_HC_Halt>
 8002e1e:	e025      	b.n	8002e6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fd8c 	bl	8006946 <USB_ReadChInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	d119      	bne.n	8002e6c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	334d      	adds	r3, #77	@ 0x4d
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 faaf 	bl	80073ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 fd66 	bl	8006946 <USB_ReadChInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e84:	d112      	bne.n	8002eac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 fa9b 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea6:	6093      	str	r3, [r2, #8]
 8002ea8:	f000 bd75 	b.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fd46 	bl	8006946 <USB_ReadChInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f040 8128 	bne.w	8003116 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	331b      	adds	r3, #27
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d119      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	331b      	adds	r3, #27
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	0151      	lsls	r1, r2, #5
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	440a      	add	r2, r1
 8002f18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f20:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	799b      	ldrb	r3, [r3, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01b      	beq.n	8002f62 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3330      	adds	r3, #48	@ 0x30
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	1ac9      	subs	r1, r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4403      	add	r3, r0
 8002f5e:	3338      	adds	r3, #56	@ 0x38
 8002f60:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	334d      	adds	r3, #77	@ 0x4d
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3344      	adds	r3, #68	@ 0x44
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f96:	461a      	mov	r2, r3
 8002f98:	2301      	movs	r3, #1
 8002f9a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3326      	adds	r3, #38	@ 0x26
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3326      	adds	r3, #38	@ 0x26
 8002fc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d110      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 f9fa 	bl	80073ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	6093      	str	r3, [r2, #8]
 8002fe8:	e03d      	b.n	8003066 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3326      	adds	r3, #38	@ 0x26
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d00a      	beq.n	8003016 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3326      	adds	r3, #38	@ 0x26
 8003010:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003012:	2b01      	cmp	r3, #1
 8003014:	d127      	bne.n	8003066 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	0151      	lsls	r1, r2, #5
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	440a      	add	r2, r1
 800302c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003030:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003034:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334c      	adds	r3, #76	@ 0x4c
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334c      	adds	r3, #76	@ 0x4c
 800305a:	781a      	ldrb	r2, [r3, #0]
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f006 fd43 	bl	8009aec <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	799b      	ldrb	r3, [r3, #6]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d13b      	bne.n	80030e6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3338      	adds	r3, #56	@ 0x38
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4403      	add	r3, r0
 800308e:	3328      	adds	r3, #40	@ 0x28
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	440b      	add	r3, r1
 8003094:	1e59      	subs	r1, r3, #1
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4403      	add	r3, r0
 80030a4:	3328      	adds	r3, #40	@ 0x28
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8470 	beq.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	333c      	adds	r3, #60	@ 0x3c
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	f083 0301 	eor.w	r3, r3, #1
 80030ce:	b2d8      	uxtb	r0, r3
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	333c      	adds	r3, #60	@ 0x3c
 80030de:	4602      	mov	r2, r0
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	f000 bc58 	b.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	333c      	adds	r3, #60	@ 0x3c
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2d8      	uxtb	r0, r3
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	333c      	adds	r3, #60	@ 0x3c
 800310e:	4602      	mov	r2, r0
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	f000 bc40 	b.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fc11 	bl	8006946 <USB_ReadChInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d131      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	2320      	movs	r3, #32
 800313e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	331a      	adds	r3, #26
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	f040 841f 	bne.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	331b      	adds	r3, #27
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2203      	movs	r2, #3
 800317e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f004 f91e 	bl	80073ca <USB_HC_Halt>
 800318e:	f000 bc02 	b.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f003 fbd3 	bl	8006946 <USB_ReadChInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	f040 8305 	bne.w	80037b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	2302      	movs	r3, #2
 80031bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	334d      	adds	r3, #77	@ 0x4d
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d114      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	334d      	adds	r3, #77	@ 0x4d
 80031e4:	2202      	movs	r2, #2
 80031e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	334c      	adds	r3, #76	@ 0x4c
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e2cc      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334d      	adds	r3, #77	@ 0x4d
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d114      	bne.n	800323e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	334d      	adds	r3, #77	@ 0x4d
 8003224:	2202      	movs	r2, #2
 8003226:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334c      	adds	r3, #76	@ 0x4c
 8003238:	2205      	movs	r2, #5
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e2ac      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	334d      	adds	r3, #77	@ 0x4d
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b07      	cmp	r3, #7
 8003252:	d00b      	beq.n	800326c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003266:	2b09      	cmp	r3, #9
 8003268:	f040 80a6 	bne.w	80033b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3344      	adds	r3, #68	@ 0x44
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4403      	add	r3, r0
 80032a0:	3344      	adds	r3, #68	@ 0x44
 80032a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	3344      	adds	r3, #68	@ 0x44
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d943      	bls.n	8003342 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3344      	adds	r3, #68	@ 0x44
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	331a      	adds	r3, #26
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d123      	bne.n	800332c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	331b      	adds	r3, #27
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	331c      	adds	r3, #28
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	0151      	lsls	r1, r2, #5
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	440a      	add	r2, r1
 8003322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334c      	adds	r3, #76	@ 0x4c
 800333c:	2204      	movs	r2, #4
 800333e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003340:	e229      	b.n	8003796 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334c      	adds	r3, #76	@ 0x4c
 8003352:	2202      	movs	r2, #2
 8003354:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	3326      	adds	r3, #38	@ 0x26
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3326      	adds	r3, #38	@ 0x26
 800337c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800337e:	2b02      	cmp	r3, #2
 8003380:	f040 8209 	bne.w	8003796 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800339a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033b6:	e1ee      	b.n	8003796 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	f040 80c8 	bne.w	8003560 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	2202      	movs	r2, #2
 80033e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	331b      	adds	r3, #27
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	f040 81ce 	bne.w	8003798 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3326      	adds	r3, #38	@ 0x26
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d16b      	bne.n	80034ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3348      	adds	r3, #72	@ 0x48
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	1c59      	adds	r1, r3, #1
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	3348      	adds	r3, #72	@ 0x48
 8003434:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3348      	adds	r3, #72	@ 0x48
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d943      	bls.n	80034d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3348      	adds	r3, #72	@ 0x48
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	331b      	adds	r3, #27
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3344      	adds	r3, #68	@ 0x44
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d809      	bhi.n	800349e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	331c      	adds	r3, #28
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	0151      	lsls	r1, r2, #5
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	440a      	add	r2, r1
 80034b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334c      	adds	r3, #76	@ 0x4c
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e014      	b.n	80034fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334c      	adds	r3, #76	@ 0x4c
 80034e4:	2202      	movs	r2, #2
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e009      	b.n	80034fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	@ 0x4c
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3326      	adds	r3, #38	@ 0x26
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3326      	adds	r3, #38	@ 0x26
 8003524:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003526:	2b02      	cmp	r3, #2
 8003528:	f040 8136 	bne.w	8003798 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003542:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800354a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e11b      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	334d      	adds	r3, #77	@ 0x4d
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b03      	cmp	r3, #3
 8003574:	f040 8081 	bne.w	800367a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334d      	adds	r3, #77	@ 0x4d
 8003588:	2202      	movs	r2, #2
 800358a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	331b      	adds	r3, #27
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 80fa 	bne.w	8003798 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334c      	adds	r3, #76	@ 0x4c
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	0151      	lsls	r1, r2, #5
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	440a      	add	r2, r1
 80035ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	0151      	lsls	r1, r2, #5
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	440a      	add	r2, r1
 800360e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003612:	f023 0320 	bic.w	r3, r3, #32
 8003616:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	@ 0x26
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3326      	adds	r3, #38	@ 0x26
 800363e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003640:	2b02      	cmp	r3, #2
 8003642:	f040 80a9 	bne.w	8003798 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800365c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003664:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e08e      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	334d      	adds	r3, #77	@ 0x4d
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d143      	bne.n	8003718 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	334d      	adds	r3, #77	@ 0x4d
 80036a0:	2202      	movs	r2, #2
 80036a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	334c      	adds	r3, #76	@ 0x4c
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3326      	adds	r3, #38	@ 0x26
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3326      	adds	r3, #38	@ 0x26
 80036de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d159      	bne.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003702:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e03f      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	334d      	adds	r3, #77	@ 0x4d
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b08      	cmp	r3, #8
 800372c:	d126      	bne.n	800377c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	334d      	adds	r3, #77	@ 0x4d
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	3344      	adds	r3, #68	@ 0x44
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4403      	add	r3, r0
 8003762:	3344      	adds	r3, #68	@ 0x44
 8003764:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	334c      	adds	r3, #76	@ 0x4c
 8003776:	2204      	movs	r2, #4
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e00d      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	334d      	adds	r3, #77	@ 0x4d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b02      	cmp	r3, #2
 8003790:	f000 8100 	beq.w	8003994 <HCD_HC_IN_IRQHandler+0xcca>
 8003794:	e000      	b.n	8003798 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003796:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334c      	adds	r3, #76	@ 0x4c
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f006 f99c 	bl	8009aec <HAL_HCD_HC_NotifyURBChange_Callback>
 80037b4:	e0ef      	b.n	8003996 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 f8c1 	bl	8006946 <USB_ReadChInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d12f      	bne.n	800382e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2340      	movs	r3, #64	@ 0x40
 80037de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	334d      	adds	r3, #77	@ 0x4d
 80037f0:	2205      	movs	r2, #5
 80037f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	331a      	adds	r3, #26
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3344      	adds	r3, #68	@ 0x44
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fdcf 	bl	80073ca <USB_HC_Halt>
 800382c:	e0b3      	b.n	8003996 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	4611      	mov	r1, r2
 8003836:	4618      	mov	r0, r3
 8003838:	f003 f885 	bl	8006946 <USB_ReadChInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b10      	cmp	r3, #16
 8003844:	f040 80a7 	bne.w	8003996 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3326      	adds	r3, #38	@ 0x26
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d11b      	bne.n	8003896 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3344      	adds	r3, #68	@ 0x44
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	334d      	adds	r3, #77	@ 0x4d
 8003882:	2204      	movs	r2, #4
 8003884:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fd9b 	bl	80073ca <USB_HC_Halt>
 8003894:	e03f      	b.n	8003916 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3326      	adds	r3, #38	@ 0x26
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3326      	adds	r3, #38	@ 0x26
 80038bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d129      	bne.n	8003916 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	3344      	adds	r3, #68	@ 0x44
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	799b      	ldrb	r3, [r3, #6]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HCD_HC_IN_IRQHandler+0xc2a>
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	331b      	adds	r3, #27
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d110      	bne.n	8003916 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	334d      	adds	r3, #77	@ 0x4d
 8003904:	2204      	movs	r2, #4
 8003906:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fd5a 	bl	80073ca <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	331b      	adds	r3, #27
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d129      	bne.n	8003980 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	331b      	adds	r3, #27
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	0151      	lsls	r1, r2, #5
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	440a      	add	r2, r1
 8003956:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800395a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	440a      	add	r2, r1
 8003976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800397a:	f043 0320 	orr.w	r3, r3, #32
 800397e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398c:	461a      	mov	r2, r3
 800398e:	2310      	movs	r3, #16
 8003990:	6093      	str	r3, [r2, #8]
 8003992:	e000      	b.n	8003996 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003994:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 ffc3 	bl	8006946 <USB_ReadChInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d11b      	bne.n	8003a02 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d6:	461a      	mov	r2, r3
 80039d8:	2304      	movs	r3, #4
 80039da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	334d      	adds	r3, #77	@ 0x4d
 80039ec:	2207      	movs	r2, #7
 80039ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f003 fce6 	bl	80073ca <USB_HC_Halt>
 80039fe:	f000 bc89 	b.w	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 ff9b 	bl	8006946 <USB_ReadChInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	f040 8082 	bne.w	8003b20 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3319      	adds	r3, #25
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d124      	bne.n	8003a8e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3319      	adds	r3, #25
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	334c      	adds	r3, #76	@ 0x4c
 8003a68:	2202      	movs	r2, #2
 8003a6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	334d      	adds	r3, #77	@ 0x4d
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 fc9e 	bl	80073ca <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	331a      	adds	r3, #26
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 8437 	bne.w	8004314 <HCD_HC_OUT_IRQHandler+0x978>
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	331b      	adds	r3, #27
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 842b 	bne.w	8004314 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3326      	adds	r3, #38	@ 0x26
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d009      	beq.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	331b      	adds	r3, #27
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	334d      	adds	r3, #77	@ 0x4d
 8003af8:	2203      	movs	r2, #3
 8003afa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f003 fc60 	bl	80073ca <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3344      	adds	r3, #68	@ 0x44
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e3f9      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 ff0c 	bl	8006946 <USB_ReadChInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b38:	d111      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b46:	461a      	mov	r2, r3
 8003b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 fc37 	bl	80073ca <USB_HC_Halt>
 8003b5c:	e3da      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 feed 	bl	8006946 <USB_ReadChInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d168      	bne.n	8003c48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3344      	adds	r3, #68	@ 0x44
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f002 fed7 	bl	8006946 <USB_ReadChInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ba0:	d112      	bne.n	8003bc8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3319      	adds	r3, #25
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2340      	movs	r3, #64	@ 0x40
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	331b      	adds	r3, #27
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d019      	beq.n	8003c12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	331b      	adds	r3, #27
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2301      	movs	r3, #1
 8003c22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	334d      	adds	r3, #77	@ 0x4d
 8003c34:	2201      	movs	r2, #1
 8003c36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fbc2 	bl	80073ca <USB_HC_Halt>
 8003c46:	e365      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f002 fe78 	bl	8006946 <USB_ReadChInterrupts>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d139      	bne.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	@ 0x4d
 8003c70:	2205      	movs	r2, #5
 8003c72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	331a      	adds	r3, #26
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3319      	adds	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3344      	adds	r3, #68	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 fb85 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2340      	movs	r3, #64	@ 0x40
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	e31f      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 fe32 	bl	8006946 <USB_ReadChInterrupts>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d11a      	bne.n	8003d22 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334d      	adds	r3, #77	@ 0x4d
 8003d0e:	2206      	movs	r2, #6
 8003d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fb55 	bl	80073ca <USB_HC_Halt>
 8003d20:	e2f8      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f002 fe0b 	bl	8006946 <USB_ReadChInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d144      	bne.n	8003dc4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3344      	adds	r3, #68	@ 0x44
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003d4e:	78fa      	ldrb	r2, [r7, #3]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	334d      	adds	r3, #77	@ 0x4d
 8003d5e:	2204      	movs	r2, #4
 8003d60:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3319      	adds	r3, #25
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d114      	bne.n	8003da2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3318      	adds	r3, #24
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3319      	adds	r3, #25
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 fb0d 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	6093      	str	r3, [r2, #8]
 8003dc2:	e2a7      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 fdba 	bl	8006946 <USB_ReadChInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	2b80      	cmp	r3, #128	@ 0x80
 8003dda:	f040 8083 	bne.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	799b      	ldrb	r3, [r3, #6]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d111      	bne.n	8003e0a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	334d      	adds	r3, #77	@ 0x4d
 8003df6:	2207      	movs	r2, #7
 8003df8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f003 fae1 	bl	80073ca <USB_HC_Halt>
 8003e08:	e062      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3344      	adds	r3, #68	@ 0x44
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4403      	add	r3, r0
 8003e2a:	3344      	adds	r3, #68	@ 0x44
 8003e2c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3344      	adds	r3, #68	@ 0x44
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d922      	bls.n	8003e8a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3344      	adds	r3, #68	@ 0x44
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334c      	adds	r3, #76	@ 0x4c
 8003e68:	2204      	movs	r2, #4
 8003e6a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	334c      	adds	r3, #76	@ 0x4c
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f005 fe32 	bl	8009aec <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e88:	e022      	b.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334c      	adds	r3, #76	@ 0x4c
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eb4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ebc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	6093      	str	r3, [r2, #8]
 8003ee2:	e217      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 fd2a 	bl	8006946 <USB_ReadChInterrupts>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efc:	d11b      	bne.n	8003f36 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	334d      	adds	r3, #77	@ 0x4d
 8003f0e:	2209      	movs	r2, #9
 8003f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 fa55 	bl	80073ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f32:	6093      	str	r3, [r2, #8]
 8003f34:	e1ee      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f002 fd01 	bl	8006946 <USB_ReadChInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	f040 81df 	bne.w	800430e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2302      	movs	r3, #2
 8003f60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	334d      	adds	r3, #77	@ 0x4d
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	f040 8093 	bne.w	80040a0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	334d      	adds	r3, #77	@ 0x4d
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334c      	adds	r3, #76	@ 0x4c
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3326      	adds	r3, #38	@ 0x26
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d00b      	beq.n	8003fd0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3326      	adds	r3, #38	@ 0x26
 8003fc8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	f040 8190 	bne.w	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	799b      	ldrb	r3, [r3, #6]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d115      	bne.n	8004004 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	333d      	adds	r3, #61	@ 0x3d
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	f083 0301 	eor.w	r3, r3, #1
 8003ff0:	b2d8      	uxtb	r0, r3
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333d      	adds	r3, #61	@ 0x3d
 8004000:	4602      	mov	r2, r0
 8004002:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	799b      	ldrb	r3, [r3, #6]
 8004008:	2b01      	cmp	r3, #1
 800400a:	f040 8171 	bne.w	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3334      	adds	r3, #52	@ 0x34
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8165 	beq.w	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3334      	adds	r3, #52	@ 0x34
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4403      	add	r3, r0
 8004046:	3328      	adds	r3, #40	@ 0x28
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	440b      	add	r3, r1
 800404c:	1e59      	subs	r1, r3, #1
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4403      	add	r3, r0
 800405c:	3328      	adds	r3, #40	@ 0x28
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	fbb1 f3f3 	udiv	r3, r1, r3
 8004064:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 813f 	beq.w	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	333d      	adds	r3, #61	@ 0x3d
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	f083 0301 	eor.w	r3, r3, #1
 800408a:	b2d8      	uxtb	r0, r3
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	333d      	adds	r3, #61	@ 0x3d
 800409a:	4602      	mov	r2, r0
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e127      	b.n	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334d      	adds	r3, #77	@ 0x4d
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d120      	bne.n	80040f8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334d      	adds	r3, #77	@ 0x4d
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	331b      	adds	r3, #27
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	f040 8107 	bne.w	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334c      	adds	r3, #76	@ 0x4c
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e0fb      	b.n	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	334d      	adds	r3, #77	@ 0x4d
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d13a      	bne.n	8004184 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800410e:	78fa      	ldrb	r2, [r7, #3]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	334d      	adds	r3, #77	@ 0x4d
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	334c      	adds	r3, #76	@ 0x4c
 8004132:	2202      	movs	r2, #2
 8004134:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	331b      	adds	r3, #27
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 80d1 	bne.w	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	331b      	adds	r3, #27
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800417c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004180:	6053      	str	r3, [r2, #4]
 8004182:	e0b5      	b.n	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334d      	adds	r3, #77	@ 0x4d
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d114      	bne.n	80041c4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	334d      	adds	r3, #77	@ 0x4d
 80041aa:	2202      	movs	r2, #2
 80041ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	334c      	adds	r3, #76	@ 0x4c
 80041be:	2202      	movs	r2, #2
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e095      	b.n	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	334d      	adds	r3, #77	@ 0x4d
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b06      	cmp	r3, #6
 80041d8:	d114      	bne.n	8004204 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	334d      	adds	r3, #77	@ 0x4d
 80041ea:	2202      	movs	r2, #2
 80041ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	334c      	adds	r3, #76	@ 0x4c
 80041fe:	2205      	movs	r2, #5
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e075      	b.n	80042f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334d      	adds	r3, #77	@ 0x4d
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b07      	cmp	r3, #7
 8004218:	d00a      	beq.n	8004230 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	334d      	adds	r3, #77	@ 0x4d
 800422a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800422c:	2b09      	cmp	r3, #9
 800422e:	d170      	bne.n	8004312 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334d      	adds	r3, #77	@ 0x4d
 8004240:	2202      	movs	r2, #2
 8004242:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	3344      	adds	r3, #68	@ 0x44
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c59      	adds	r1, r3, #1
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4403      	add	r3, r0
 8004264:	3344      	adds	r3, #68	@ 0x44
 8004266:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3344      	adds	r3, #68	@ 0x44
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d914      	bls.n	80042a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	3344      	adds	r3, #68	@ 0x44
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	334c      	adds	r3, #76	@ 0x4c
 80042a2:	2204      	movs	r2, #4
 80042a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042a6:	e022      	b.n	80042ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	334c      	adds	r3, #76	@ 0x4c
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e8:	461a      	mov	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	334c      	adds	r3, #76	@ 0x4c
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f005 fbf0 	bl	8009aec <HAL_HCD_HC_NotifyURBChange_Callback>
 800430c:	e002      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004312:	bf00      	nop
  }
}
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b08a      	sub	sp, #40	@ 0x28
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	0c5b      	lsrs	r3, r3, #17
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800434e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d004      	beq.n	8004360 <HCD_RXQLVL_IRQHandler+0x46>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b05      	cmp	r3, #5
 800435a:	f000 80b6 	beq.w	80044ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800435e:	e0b7      	b.n	80044d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80b3 	beq.w	80044ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	332c      	adds	r3, #44	@ 0x2c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80a7 	beq.w	80044ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	3338      	adds	r3, #56	@ 0x38
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	18d1      	adds	r1, r2, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4403      	add	r3, r0
 80043a4:	3334      	adds	r3, #52	@ 0x34
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4299      	cmp	r1, r3
 80043aa:	f200 8083 	bhi.w	80044b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	332c      	adds	r3, #44	@ 0x2c
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	b292      	uxth	r2, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f002 fa51 	bl	8006870 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	332c      	adds	r3, #44	@ 0x2c
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	18d1      	adds	r1, r2, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4403      	add	r3, r0
 80043f2:	332c      	adds	r3, #44	@ 0x2c
 80043f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3338      	adds	r3, #56	@ 0x38
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	18d1      	adds	r1, r2, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4403      	add	r3, r0
 800441a:	3338      	adds	r3, #56	@ 0x38
 800441c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	0cdb      	lsrs	r3, r3, #19
 800442e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004432:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3328      	adds	r3, #40	@ 0x28
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4293      	cmp	r3, r2
 800444c:	d13f      	bne.n	80044ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03c      	beq.n	80044ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004472:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	333c      	adds	r3, #60	@ 0x3c
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	f083 0301 	eor.w	r3, r3, #1
 800449c:	b2d8      	uxtb	r0, r3
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	333c      	adds	r3, #60	@ 0x3c
 80044ae:	4602      	mov	r2, r0
 80044b0:	701a      	strb	r2, [r3, #0]
      break;
 80044b2:	e00c      	b.n	80044ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334c      	adds	r3, #76	@ 0x4c
 80044c4:	2204      	movs	r2, #4
 80044c6:	701a      	strb	r2, [r3, #0]
      break;
 80044c8:	e001      	b.n	80044ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80044ce:	bf00      	nop
  }
}
 80044d0:	bf00      	nop
 80044d2:	3728      	adds	r7, #40	@ 0x28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004504:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b02      	cmp	r3, #2
 800450e:	d10b      	bne.n	8004528 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d102      	bne.n	8004520 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f005 faca 	bl	8009ab4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b08      	cmp	r3, #8
 8004530:	d132      	bne.n	8004598 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d126      	bne.n	8004592 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7a5b      	ldrb	r3, [r3, #9]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d113      	bne.n	8004574 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004552:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004556:	d106      	bne.n	8004566 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2102      	movs	r1, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f002 fb00 	bl	8006b64 <USB_InitFSLSPClkSel>
 8004564:	e011      	b.n	800458a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f002 faf9 	bl	8006b64 <USB_InitFSLSPClkSel>
 8004572:	e00a      	b.n	800458a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	79db      	ldrb	r3, [r3, #7]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004582:	461a      	mov	r2, r3
 8004584:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004588:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f005 fabc 	bl	8009b08 <HAL_HCD_PortEnabled_Callback>
 8004590:	e002      	b.n	8004598 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f005 fac6 	bl	8009b24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b20      	cmp	r3, #32
 80045a0:	d103      	bne.n	80045aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f043 0320 	orr.w	r3, r3, #32
 80045a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80045b0:	461a      	mov	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e128      	b.n	8004824 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a90      	ldr	r2, [pc, #576]	@ (800482c <HAL_I2S_Init+0x26c>)
 80045ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fc fb5b 	bl	8000ca8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004608:	f023 030f 	bic.w	r3, r3, #15
 800460c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2202      	movs	r2, #2
 8004614:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d060      	beq.n	80046e0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004626:	2310      	movs	r3, #16
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e001      	b.n	8004630 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800462c:	2320      	movs	r3, #32
 800462e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b20      	cmp	r3, #32
 8004636:	d802      	bhi.n	800463e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800463e:	2001      	movs	r0, #1
 8004640:	f001 fb3a 	bl	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004644:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464e:	d125      	bne.n	800469c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d010      	beq.n	800467a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	461a      	mov	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	3305      	adds	r3, #5
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	e01f      	b.n	80046ba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	461a      	mov	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	3305      	adds	r3, #5
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e00e      	b.n	80046ba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	3305      	adds	r3, #5
 80046b8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004830 <HAL_I2S_Init+0x270>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	08db      	lsrs	r3, r3, #3
 80046c4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e003      	b.n	80046e8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80046e0:	2302      	movs	r3, #2
 80046e2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d902      	bls.n	80046f4 <HAL_I2S_Init+0x134>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2bff      	cmp	r3, #255	@ 0xff
 80046f2:	d907      	bls.n	8004704 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f8:	f043 0210 	orr.w	r2, r3, #16
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e08f      	b.n	8004824 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	ea42 0103 	orr.w	r1, r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	430a      	orrs	r2, r1
 8004716:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004722:	f023 030f 	bic.w	r3, r3, #15
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6851      	ldr	r1, [r2, #4]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6892      	ldr	r2, [r2, #8]
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	68d2      	ldr	r2, [r2, #12]
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6992      	ldr	r2, [r2, #24]
 800473a:	430a      	orrs	r2, r1
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004746:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d161      	bne.n	8004814 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a38      	ldr	r2, [pc, #224]	@ (8004834 <HAL_I2S_Init+0x274>)
 8004754:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a37      	ldr	r2, [pc, #220]	@ (8004838 <HAL_I2S_Init+0x278>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_I2S_Init+0x1a4>
 8004760:	4b36      	ldr	r3, [pc, #216]	@ (800483c <HAL_I2S_Init+0x27c>)
 8004762:	e001      	b.n	8004768 <HAL_I2S_Init+0x1a8>
 8004764:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	4932      	ldr	r1, [pc, #200]	@ (8004838 <HAL_I2S_Init+0x278>)
 8004770:	428a      	cmp	r2, r1
 8004772:	d101      	bne.n	8004778 <HAL_I2S_Init+0x1b8>
 8004774:	4a31      	ldr	r2, [pc, #196]	@ (800483c <HAL_I2S_Init+0x27c>)
 8004776:	e001      	b.n	800477c <HAL_I2S_Init+0x1bc>
 8004778:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800477c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004780:	f023 030f 	bic.w	r3, r3, #15
 8004784:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2b      	ldr	r2, [pc, #172]	@ (8004838 <HAL_I2S_Init+0x278>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d101      	bne.n	8004794 <HAL_I2S_Init+0x1d4>
 8004790:	4b2a      	ldr	r3, [pc, #168]	@ (800483c <HAL_I2S_Init+0x27c>)
 8004792:	e001      	b.n	8004798 <HAL_I2S_Init+0x1d8>
 8004794:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004798:	2202      	movs	r2, #2
 800479a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a25      	ldr	r2, [pc, #148]	@ (8004838 <HAL_I2S_Init+0x278>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <HAL_I2S_Init+0x1ea>
 80047a6:	4b25      	ldr	r3, [pc, #148]	@ (800483c <HAL_I2S_Init+0x27c>)
 80047a8:	e001      	b.n	80047ae <HAL_I2S_Init+0x1ee>
 80047aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ba:	d003      	beq.n	80047c4 <HAL_I2S_Init+0x204>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80047c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e001      	b.n	80047d0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047da:	4313      	orrs	r3, r2
 80047dc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047fc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a0d      	ldr	r2, [pc, #52]	@ (8004838 <HAL_I2S_Init+0x278>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <HAL_I2S_Init+0x24c>
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <HAL_I2S_Init+0x27c>)
 800480a:	e001      	b.n	8004810 <HAL_I2S_Init+0x250>
 800480c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004810:	897a      	ldrh	r2, [r7, #10]
 8004812:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	08004b15 	.word	0x08004b15
 8004830:	cccccccd 	.word	0xcccccccd
 8004834:	08004c29 	.word	0x08004c29
 8004838:	40003800 	.word	0x40003800
 800483c:	40003400 	.word	0x40003400

08004840 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_I2S_Transmit_DMA+0x1a>
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e08a      	b.n	8004974 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
 800486c:	e082      	b.n	8004974 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_I2S_Transmit_DMA+0x3e>
 800487a:	2302      	movs	r3, #2
 800487c:	e07a      	b.n	8004974 <HAL_I2S_Transmit_DMA+0x134>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2203      	movs	r2, #3
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d002      	beq.n	80048b2 <HAL_I2S_Transmit_DMA+0x72>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d10a      	bne.n	80048c8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048c6:	e005      	b.n	80048d4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	88fa      	ldrh	r2, [r7, #6]
 80048cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	88fa      	ldrh	r2, [r7, #6]
 80048d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d8:	4a28      	ldr	r2, [pc, #160]	@ (800497c <HAL_I2S_Transmit_DMA+0x13c>)
 80048da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	4a27      	ldr	r2, [pc, #156]	@ (8004980 <HAL_I2S_Transmit_DMA+0x140>)
 80048e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e8:	4a26      	ldr	r2, [pc, #152]	@ (8004984 <HAL_I2S_Transmit_DMA+0x144>)
 80048ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80048f4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80048fc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004902:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004904:	f7fd f8c8 	bl	8001a98 <HAL_DMA_Start_IT>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0208 	orr.w	r2, r3, #8
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e022      	b.n	8004974 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d107      	bne.n	8004954 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0202 	orr.w	r2, r2, #2
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004970:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	080049f3 	.word	0x080049f3
 8004980:	080049b1 	.word	0x080049b1
 8004984:	08004a0f 	.word	0x08004a0f

08004988 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049bc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10e      	bne.n	80049e4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0202 	bic.w	r2, r2, #2
 80049d4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7fb fdd9 	bl	800059c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7fb fdb5 	bl	8000570 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0203 	bic.w	r2, r2, #3
 8004a2a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	f043 0208 	orr.w	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ffa5 	bl	800499c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10e      	bne.n	8004aae <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fb fd77 	bl	800059c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac8:	b292      	uxth	r2, r2
 8004aca:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10e      	bne.n	8004b0c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004afc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ff3e 	bl	8004988 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d13a      	bne.n	8004ba6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d109      	bne.n	8004b4e <I2S_IRQHandler+0x3a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b44:	2b40      	cmp	r3, #64	@ 0x40
 8004b46:	d102      	bne.n	8004b4e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ffb4 	bl	8004ab6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d126      	bne.n	8004ba6 <I2S_IRQHandler+0x92>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d11f      	bne.n	8004ba6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b74:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b98:	f043 0202 	orr.w	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fefb 	bl	800499c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d136      	bne.n	8004c20 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d109      	bne.n	8004bd0 <I2S_IRQHandler+0xbc>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d102      	bne.n	8004bd0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ff45 	bl	8004a5a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d122      	bne.n	8004c20 <I2S_IRQHandler+0x10c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d11b      	bne.n	8004c20 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bf6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	f043 0204 	orr.w	r2, r3, #4
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff febe 	bl	800499c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a92      	ldr	r2, [pc, #584]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d101      	bne.n	8004c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c42:	4b92      	ldr	r3, [pc, #584]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c44:	e001      	b.n	8004c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a8b      	ldr	r2, [pc, #556]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c60:	4b8a      	ldr	r3, [pc, #552]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c62:	e001      	b.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c74:	d004      	beq.n	8004c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 8099 	bne.w	8004db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d107      	bne.n	8004c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f925 	bl	8004ee4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9c8 	bl	8005044 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	d13a      	bne.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d035      	beq.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd4:	e001      	b.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4969      	ldr	r1, [pc, #420]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ce2:	428b      	cmp	r3, r1
 8004ce4:	d101      	bne.n	8004cea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004ce6:	4b69      	ldr	r3, [pc, #420]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ce8:	e001      	b.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cf2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fe34 	bl	800499c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	f040 80c3 	bne.w	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80bd 	beq.w	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a49      	ldr	r2, [pc, #292]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d101      	bne.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d66:	4b49      	ldr	r3, [pc, #292]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d68:	e001      	b.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4944      	ldr	r1, [pc, #272]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d76:	428b      	cmp	r3, r1
 8004d78:	d101      	bne.n	8004d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d7a:	4b44      	ldr	r3, [pc, #272]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d7c:	e001      	b.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff fdf6 	bl	800499c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004db0:	e089      	b.n	8004ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d107      	bne.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8be 	bl	8004f48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f8fd 	bl	8004fe0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d12f      	bne.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d02a      	beq.n	8004e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d101      	bne.n	8004e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e14:	4b1d      	ldr	r3, [pc, #116]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e16:	e001      	b.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4919      	ldr	r1, [pc, #100]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	d101      	bne.n	8004e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e28:	4b18      	ldr	r3, [pc, #96]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e2a:	e001      	b.n	8004e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e42:	f043 0202 	orr.w	r2, r3, #2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff fda6 	bl	800499c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d136      	bne.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d031      	beq.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a07      	ldr	r2, [pc, #28]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d101      	bne.n	8004e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e6e:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e70:	e001      	b.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4902      	ldr	r1, [pc, #8]	@ (8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e7e:	428b      	cmp	r3, r1
 8004e80:	d106      	bne.n	8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e82:	4b02      	ldr	r3, [pc, #8]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e84:	e006      	b.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e86:	bf00      	nop
 8004e88:	40003800 	.word	0x40003800
 8004e8c:	40003400 	.word	0x40003400
 8004e90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fd6c 	bl	800499c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec4:	e000      	b.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ec6:	bf00      	nop
}
 8004ec8:	bf00      	nop
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	1c99      	adds	r1, r3, #2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6251      	str	r1, [r2, #36]	@ 0x24
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d113      	bne.n	8004f3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ffc9 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	1c99      	adds	r1, r3, #2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6251      	str	r1, [r2, #36]	@ 0x24
 8004f5a:	8819      	ldrh	r1, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <I2SEx_TxISR_I2SExt+0x22>
 8004f66:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x94>)
 8004f68:	e001      	b.n	8004f6e <I2SEx_TxISR_I2SExt+0x26>
 8004f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f6e:	460a      	mov	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d121      	bne.n	8004fce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a12      	ldr	r2, [pc, #72]	@ (8004fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <I2SEx_TxISR_I2SExt+0x50>
 8004f94:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x94>)
 8004f96:	e001      	b.n	8004f9c <I2SEx_TxISR_I2SExt+0x54>
 8004f98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	490d      	ldr	r1, [pc, #52]	@ (8004fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	d101      	bne.n	8004fac <I2SEx_TxISR_I2SExt+0x64>
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x94>)
 8004faa:	e001      	b.n	8004fb0 <I2SEx_TxISR_I2SExt+0x68>
 8004fac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff81 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40003800 	.word	0x40003800
 8004fdc:	40003400 	.word	0x40003400

08004fe0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68d8      	ldr	r0, [r3, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	1c99      	adds	r1, r3, #2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ff8:	b282      	uxth	r2, r0
 8004ffa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d113      	bne.n	800503c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005022:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff4a 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a20      	ldr	r2, [pc, #128]	@ (80050d4 <I2SEx_RxISR_I2SExt+0x90>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <I2SEx_RxISR_I2SExt+0x16>
 8005056:	4b20      	ldr	r3, [pc, #128]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x94>)
 8005058:	e001      	b.n	800505e <I2SEx_RxISR_I2SExt+0x1a>
 800505a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800505e:	68d8      	ldr	r0, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	1c99      	adds	r1, r3, #2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800506a:	b282      	uxth	r2, r0
 800506c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d121      	bne.n	80050ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <I2SEx_RxISR_I2SExt+0x90>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <I2SEx_RxISR_I2SExt+0x50>
 8005090:	4b11      	ldr	r3, [pc, #68]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x94>)
 8005092:	e001      	b.n	8005098 <I2SEx_RxISR_I2SExt+0x54>
 8005094:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	490d      	ldr	r1, [pc, #52]	@ (80050d4 <I2SEx_RxISR_I2SExt+0x90>)
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d101      	bne.n	80050a8 <I2SEx_RxISR_I2SExt+0x64>
 80050a4:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x94>)
 80050a6:	e001      	b.n	80050ac <I2SEx_RxISR_I2SExt+0x68>
 80050a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ff03 	bl	8004ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40003800 	.word	0x40003800
 80050d8:	40003400 	.word	0x40003400

080050dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e267      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d075      	beq.n	80051e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050fa:	4b88      	ldr	r3, [pc, #544]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b04      	cmp	r3, #4
 8005104:	d00c      	beq.n	8005120 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005106:	4b85      	ldr	r3, [pc, #532]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800510e:	2b08      	cmp	r3, #8
 8005110:	d112      	bne.n	8005138 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005112:	4b82      	ldr	r3, [pc, #520]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800511e:	d10b      	bne.n	8005138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	4b7e      	ldr	r3, [pc, #504]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d05b      	beq.n	80051e4 <HAL_RCC_OscConfig+0x108>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d157      	bne.n	80051e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e242      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005140:	d106      	bne.n	8005150 <HAL_RCC_OscConfig+0x74>
 8005142:	4b76      	ldr	r3, [pc, #472]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a75      	ldr	r2, [pc, #468]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e01d      	b.n	800518c <HAL_RCC_OscConfig+0xb0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005158:	d10c      	bne.n	8005174 <HAL_RCC_OscConfig+0x98>
 800515a:	4b70      	ldr	r3, [pc, #448]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6f      	ldr	r2, [pc, #444]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	4b6d      	ldr	r3, [pc, #436]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6c      	ldr	r2, [pc, #432]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e00b      	b.n	800518c <HAL_RCC_OscConfig+0xb0>
 8005174:	4b69      	ldr	r3, [pc, #420]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a68      	ldr	r2, [pc, #416]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800517a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	4b66      	ldr	r3, [pc, #408]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a65      	ldr	r2, [pc, #404]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800518a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005194:	f7fc f82e 	bl	80011f4 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800519c:	f7fc f82a 	bl	80011f4 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	@ 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e207      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ae:	4b5b      	ldr	r3, [pc, #364]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0xc0>
 80051ba:	e014      	b.n	80051e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fc f81a 	bl	80011f4 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c4:	f7fc f816 	bl	80011f4 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	@ 0x64
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e1f3      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d6:	4b51      	ldr	r3, [pc, #324]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0xe8>
 80051e2:	e000      	b.n	80051e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d063      	beq.n	80052ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051f2:	4b4a      	ldr	r3, [pc, #296]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fe:	4b47      	ldr	r3, [pc, #284]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005206:	2b08      	cmp	r3, #8
 8005208:	d11c      	bne.n	8005244 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520a:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d116      	bne.n	8005244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	4b41      	ldr	r3, [pc, #260]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_RCC_OscConfig+0x152>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e1c7      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522e:	4b3b      	ldr	r3, [pc, #236]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4937      	ldr	r1, [pc, #220]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005242:	e03a      	b.n	80052ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d020      	beq.n	800528e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800524c:	4b34      	ldr	r3, [pc, #208]	@ (8005320 <HAL_RCC_OscConfig+0x244>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fb ffcf 	bl	80011f4 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525a:	f7fb ffcb 	bl	80011f4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e1a8      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526c:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005278:	4b28      	ldr	r3, [pc, #160]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4925      	ldr	r1, [pc, #148]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]
 800528c:	e015      	b.n	80052ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528e:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <HAL_RCC_OscConfig+0x244>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fb ffae 	bl	80011f4 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529c:	f7fb ffaa 	bl	80011f4 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e187      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ae:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d036      	beq.n	8005334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ce:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_RCC_OscConfig+0x248>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fb ff8e 	bl	80011f4 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052dc:	f7fb ff8a 	bl	80011f4 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e167      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ee:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80052f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x200>
 80052fa:	e01b      	b.n	8005334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fc:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_OscConfig+0x248>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005302:	f7fb ff77 	bl	80011f4 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005308:	e00e      	b.n	8005328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530a:	f7fb ff73 	bl	80011f4 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d907      	bls.n	8005328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e150      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
 800531c:	40023800 	.word	0x40023800
 8005320:	42470000 	.word	0x42470000
 8005324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005328:	4b88      	ldr	r3, [pc, #544]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800532a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ea      	bne.n	800530a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8097 	beq.w	8005470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005346:	4b81      	ldr	r3, [pc, #516]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10f      	bne.n	8005372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	4b7d      	ldr	r3, [pc, #500]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	4a7c      	ldr	r2, [pc, #496]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	@ 0x40
 8005362:	4b7a      	ldr	r3, [pc, #488]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005372:	4b77      	ldr	r3, [pc, #476]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d118      	bne.n	80053b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800537e:	4b74      	ldr	r3, [pc, #464]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a73      	ldr	r2, [pc, #460]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538a:	f7fb ff33 	bl	80011f4 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fb ff2f 	bl	80011f4 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e10c      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d106      	bne.n	80053c6 <HAL_RCC_OscConfig+0x2ea>
 80053b8:	4b64      	ldr	r3, [pc, #400]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053bc:	4a63      	ldr	r2, [pc, #396]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c4:	e01c      	b.n	8005400 <HAL_RCC_OscConfig+0x324>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x30c>
 80053ce:	4b5f      	ldr	r3, [pc, #380]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	4a5e      	ldr	r2, [pc, #376]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053da:	4b5c      	ldr	r3, [pc, #368]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	4a5b      	ldr	r2, [pc, #364]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0x324>
 80053e8:	4b58      	ldr	r3, [pc, #352]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a57      	ldr	r2, [pc, #348]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f4:	4b55      	ldr	r3, [pc, #340]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f8:	4a54      	ldr	r2, [pc, #336]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fb fef4 	bl	80011f4 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fb fef0 	bl	80011f4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0cb      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005426:	4b49      	ldr	r3, [pc, #292]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ee      	beq.n	8005410 <HAL_RCC_OscConfig+0x334>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005434:	f7fb fede 	bl	80011f4 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fb feda 	bl	80011f4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0b5      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005452:	4b3e      	ldr	r3, [pc, #248]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ee      	bne.n	800543c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d105      	bne.n	8005470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005464:	4b39      	ldr	r3, [pc, #228]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	4a38      	ldr	r2, [pc, #224]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800546a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800546e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80a1 	beq.w	80055bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547a:	4b34      	ldr	r3, [pc, #208]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b08      	cmp	r3, #8
 8005484:	d05c      	beq.n	8005540 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d141      	bne.n	8005512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548e:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <HAL_RCC_OscConfig+0x478>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fb feae 	bl	80011f4 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fb feaa 	bl	80011f4 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e087      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	4b27      	ldr	r3, [pc, #156]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	491b      	ldr	r1, [pc, #108]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005554 <HAL_RCC_OscConfig+0x478>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ea:	f7fb fe83 	bl	80011f4 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fb fe7f 	bl	80011f4 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e05c      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x416>
 8005510:	e054      	b.n	80055bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <HAL_RCC_OscConfig+0x478>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fb fe6c 	bl	80011f4 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7fb fe68 	bl	80011f4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e045      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005532:	4b06      	ldr	r3, [pc, #24]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x444>
 800553e:	e03d      	b.n	80055bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d107      	bne.n	8005558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e038      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000
 8005554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005558:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <HAL_RCC_OscConfig+0x4ec>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d028      	beq.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d121      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d11a      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800558e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005590:	4293      	cmp	r3, r2
 8005592:	d111      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800

080055cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0cc      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e0:	4b68      	ldr	r3, [pc, #416]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d90c      	bls.n	8005608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b65      	ldr	r3, [pc, #404]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b63      	ldr	r3, [pc, #396]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0b8      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d020      	beq.n	8005656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005620:	4b59      	ldr	r3, [pc, #356]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a58      	ldr	r2, [pc, #352]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800562a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005638:	4b53      	ldr	r3, [pc, #332]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a52      	ldr	r2, [pc, #328]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005644:	4b50      	ldr	r3, [pc, #320]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	494d      	ldr	r1, [pc, #308]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d044      	beq.n	80056ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d107      	bne.n	800567a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566a:	4b47      	ldr	r3, [pc, #284]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d119      	bne.n	80056aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e07f      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d003      	beq.n	800568a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005686:	2b03      	cmp	r3, #3
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568a:	4b3f      	ldr	r3, [pc, #252]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e06f      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569a:	4b3b      	ldr	r3, [pc, #236]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e067      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b37      	ldr	r3, [pc, #220]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4934      	ldr	r1, [pc, #208]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056bc:	f7fb fd9a 	bl	80011f4 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7fb fd96 	bl	80011f4 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e04f      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b2b      	ldr	r3, [pc, #172]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ec:	4b25      	ldr	r3, [pc, #148]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d20c      	bcs.n	8005714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fa:	4b22      	ldr	r3, [pc, #136]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005702:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e032      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005720:	4b19      	ldr	r3, [pc, #100]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4916      	ldr	r1, [pc, #88]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800573e:	4b12      	ldr	r3, [pc, #72]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	490e      	ldr	r1, [pc, #56]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005752:	f000 f889 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8005756:	4602      	mov	r2, r0
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	490a      	ldr	r1, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x1c0>)
 8005764:	5ccb      	ldrb	r3, [r1, r3]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800576e:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fb fcfa 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023c00 	.word	0x40023c00
 8005788:	40023800 	.word	0x40023800
 800578c:	0800b188 	.word	0x0800b188
 8005790:	20000004 	.word	0x20000004
 8005794:	20000008 	.word	0x20000008

08005798 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08c      	sub	sp, #48	@ 0x30
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d129      	bne.n	80057fe <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	4b2b      	ldr	r3, [pc, #172]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	4a2a      	ldr	r2, [pc, #168]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ba:	4b28      	ldr	r3, [pc, #160]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80057c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057cc:	2302      	movs	r3, #2
 80057ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d0:	2303      	movs	r3, #3
 80057d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80057dc:	f107 031c 	add.w	r3, r7, #28
 80057e0:	4619      	mov	r1, r3
 80057e2:	481f      	ldr	r0, [pc, #124]	@ (8005860 <HAL_RCC_MCOConfig+0xc8>)
 80057e4:	f7fc fc1a 	bl	800201c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80057e8:	4b1c      	ldr	r3, [pc, #112]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	4919      	ldr	r1, [pc, #100]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80057fc:	e029      	b.n	8005852 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	4b16      	ldr	r3, [pc, #88]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	4a15      	ldr	r2, [pc, #84]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 8005808:	f043 0304 	orr.w	r3, r3, #4
 800580c:	6313      	str	r3, [r2, #48]	@ 0x30
 800580e:	4b13      	ldr	r3, [pc, #76]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800581a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800581e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005820:	2302      	movs	r3, #2
 8005822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005824:	2303      	movs	r3, #3
 8005826:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005828:	2300      	movs	r3, #0
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800582c:	2300      	movs	r3, #0
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005830:	f107 031c 	add.w	r3, r7, #28
 8005834:	4619      	mov	r1, r3
 8005836:	480b      	ldr	r0, [pc, #44]	@ (8005864 <HAL_RCC_MCOConfig+0xcc>)
 8005838:	f7fc fbf0 	bl	800201c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800583c:	4b07      	ldr	r3, [pc, #28]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	00d9      	lsls	r1, r3, #3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	430b      	orrs	r3, r1
 800584c:	4903      	ldr	r1, [pc, #12]	@ (800585c <HAL_RCC_MCOConfig+0xc4>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
}
 8005852:	bf00      	nop
 8005854:	3730      	adds	r7, #48	@ 0x30
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800
 8005860:	40020000 	.word	0x40020000
 8005864:	40020800 	.word	0x40020800

08005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800586c:	b094      	sub	sp, #80	@ 0x50
 800586e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005880:	4b79      	ldr	r3, [pc, #484]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b08      	cmp	r3, #8
 800588a:	d00d      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x40>
 800588c:	2b08      	cmp	r3, #8
 800588e:	f200 80e1 	bhi.w	8005a54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x34>
 8005896:	2b04      	cmp	r3, #4
 8005898:	d003      	beq.n	80058a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800589a:	e0db      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800589c:	4b73      	ldr	r3, [pc, #460]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x204>)
 800589e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a0:	e0db      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a2:	4b73      	ldr	r3, [pc, #460]	@ (8005a70 <HAL_RCC_GetSysClockFreq+0x208>)
 80058a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a6:	e0d8      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d063      	beq.n	8005986 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058be:	4b6a      	ldr	r3, [pc, #424]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	099b      	lsrs	r3, r3, #6
 80058c4:	2200      	movs	r2, #0
 80058c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d2:	2300      	movs	r3, #0
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058da:	4622      	mov	r2, r4
 80058dc:	462b      	mov	r3, r5
 80058de:	f04f 0000 	mov.w	r0, #0
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	0159      	lsls	r1, r3, #5
 80058e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058ec:	0150      	lsls	r0, r2, #5
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4621      	mov	r1, r4
 80058f4:	1a51      	subs	r1, r2, r1
 80058f6:	6139      	str	r1, [r7, #16]
 80058f8:	4629      	mov	r1, r5
 80058fa:	eb63 0301 	sbc.w	r3, r3, r1
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800590c:	4659      	mov	r1, fp
 800590e:	018b      	lsls	r3, r1, #6
 8005910:	4651      	mov	r1, sl
 8005912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005916:	4651      	mov	r1, sl
 8005918:	018a      	lsls	r2, r1, #6
 800591a:	4651      	mov	r1, sl
 800591c:	ebb2 0801 	subs.w	r8, r2, r1
 8005920:	4659      	mov	r1, fp
 8005922:	eb63 0901 	sbc.w	r9, r3, r1
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800593a:	4690      	mov	r8, r2
 800593c:	4699      	mov	r9, r3
 800593e:	4623      	mov	r3, r4
 8005940:	eb18 0303 	adds.w	r3, r8, r3
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	462b      	mov	r3, r5
 8005948:	eb49 0303 	adc.w	r3, r9, r3
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800595a:	4629      	mov	r1, r5
 800595c:	024b      	lsls	r3, r1, #9
 800595e:	4621      	mov	r1, r4
 8005960:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005964:	4621      	mov	r1, r4
 8005966:	024a      	lsls	r2, r1, #9
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800596e:	2200      	movs	r2, #0
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005978:	f7fa fc82 	bl	8000280 <__aeabi_uldivmod>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4613      	mov	r3, r2
 8005982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005984:	e058      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005986:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	099b      	lsrs	r3, r3, #6
 800598c:	2200      	movs	r2, #0
 800598e:	4618      	mov	r0, r3
 8005990:	4611      	mov	r1, r2
 8005992:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	2300      	movs	r3, #0
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
 800599c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	f04f 0000 	mov.w	r0, #0
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	0159      	lsls	r1, r3, #5
 80059ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b2:	0150      	lsls	r0, r2, #5
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4641      	mov	r1, r8
 80059ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80059be:	4649      	mov	r1, r9
 80059c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059d8:	ebb2 040a 	subs.w	r4, r2, sl
 80059dc:	eb63 050b 	sbc.w	r5, r3, fp
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	00eb      	lsls	r3, r5, #3
 80059ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ee:	00e2      	lsls	r2, r4, #3
 80059f0:	4614      	mov	r4, r2
 80059f2:	461d      	mov	r5, r3
 80059f4:	4643      	mov	r3, r8
 80059f6:	18e3      	adds	r3, r4, r3
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	464b      	mov	r3, r9
 80059fc:	eb45 0303 	adc.w	r3, r5, r3
 8005a00:	607b      	str	r3, [r7, #4]
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a0e:	4629      	mov	r1, r5
 8005a10:	028b      	lsls	r3, r1, #10
 8005a12:	4621      	mov	r1, r4
 8005a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a18:	4621      	mov	r1, r4
 8005a1a:	028a      	lsls	r2, r1, #10
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a22:	2200      	movs	r2, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	61fa      	str	r2, [r7, #28]
 8005a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a2c:	f7fa fc28 	bl	8000280 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4613      	mov	r3, r2
 8005a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a38:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	3301      	adds	r3, #1
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a52:	e002      	b.n	8005a5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a54:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3750      	adds	r7, #80	@ 0x50
 8005a60:	46bd      	mov	sp, r7
 8005a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a66:	bf00      	nop
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	007a1200 	.word	0x007a1200

08005a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a78:	4b03      	ldr	r3, [pc, #12]	@ (8005a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000004 	.word	0x20000004

08005a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a90:	f7ff fff0 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0a9b      	lsrs	r3, r3, #10
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4903      	ldr	r1, [pc, #12]	@ (8005ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	0800b198 	.word	0x0800b198

08005ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ab8:	f7ff ffdc 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4b05      	ldr	r3, [pc, #20]	@ (8005ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	0b5b      	lsrs	r3, r3, #13
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4903      	ldr	r1, [pc, #12]	@ (8005ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aca:	5ccb      	ldrb	r3, [r1, r3]
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	0800b198 	.word	0x0800b198

08005adc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d035      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b04:	4b67      	ldr	r3, [pc, #412]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0a:	f7fb fb73 	bl	80011f4 <HAL_GetTick>
 8005b0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b12:	f7fb fb6f 	bl	80011f4 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e0ba      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b24:	4b60      	ldr	r3, [pc, #384]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	019a      	lsls	r2, r3, #6
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	071b      	lsls	r3, r3, #28
 8005b3c:	495a      	ldr	r1, [pc, #360]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b44:	4b57      	ldr	r3, [pc, #348]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b4a:	f7fb fb53 	bl	80011f4 <HAL_GetTick>
 8005b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b50:	e008      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b52:	f7fb fb4f 	bl	80011f4 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e09a      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b64:	4b50      	ldr	r3, [pc, #320]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8083 	beq.w	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	4b49      	ldr	r3, [pc, #292]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	4a48      	ldr	r2, [pc, #288]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b8e:	4b46      	ldr	r3, [pc, #280]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b9a:	4b44      	ldr	r3, [pc, #272]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a43      	ldr	r2, [pc, #268]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ba4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba6:	f7fb fb25 	bl	80011f4 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bae:	f7fb fb21 	bl	80011f4 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e06c      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0f0      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bcc:	4b36      	ldr	r3, [pc, #216]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d02f      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d028      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bf2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c00:	4a29      	ldr	r2, [pc, #164]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c06:	4b28      	ldr	r3, [pc, #160]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d114      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c12:	f7fb faef 	bl	80011f4 <HAL_GetTick>
 8005c16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c18:	e00a      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fb faeb 	bl	80011f4 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e034      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0ee      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c48:	d10d      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c4a:	4b17      	ldr	r3, [pc, #92]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5e:	4912      	ldr	r1, [pc, #72]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	608b      	str	r3, [r1, #8]
 8005c64:	e005      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c66:	4b10      	ldr	r3, [pc, #64]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c6c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005c70:	6093      	str	r3, [r2, #8]
 8005c72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7e:	490a      	ldr	r1, [pc, #40]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7c1a      	ldrb	r2, [r3, #16]
 8005c94:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c96:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	42470068 	.word	0x42470068
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	40007000 	.word	0x40007000
 8005cb0:	42470e40 	.word	0x42470e40
 8005cb4:	424711e0 	.word	0x424711e0

08005cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d13f      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005cd6:	4b24      	ldr	r3, [pc, #144]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cec:	d12f      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cee:	4b1f      	ldr	r3, [pc, #124]	@ (8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005cf0:	617b      	str	r3, [r7, #20]
          break;
 8005cf2:	e02f      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d00:	d108      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d02:	4b19      	ldr	r3, [pc, #100]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d0a:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e007      	b.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d14:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d1c:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d24:	4b10      	ldr	r3, [pc, #64]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d38:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3e:	0f1b      	lsrs	r3, r3, #28
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	617b      	str	r3, [r7, #20]
          break;
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
          break;
 8005d52:	bf00      	nop
        }
      }
      break;
 8005d54:	e000      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005d56:	bf00      	nop
    }
  }
  return frequency;
 8005d58:	697b      	ldr	r3, [r7, #20]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	00bb8000 	.word	0x00bb8000
 8005d70:	007a1200 	.word	0x007a1200
 8005d74:	00f42400 	.word	0x00f42400

08005d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e042      	b.n	8005e10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fb f838 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2224      	movs	r2, #36	@ 0x24
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f973 	bl	80060a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695a      	ldr	r2, [r3, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	@ 0x28
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d175      	bne.n	8005f24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_UART_Transmit+0x2c>
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e06e      	b.n	8005f26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2221      	movs	r2, #33	@ 0x21
 8005e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e56:	f7fb f9cd 	bl	80011f4 <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	88fa      	ldrh	r2, [r7, #6]
 8005e60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e70:	d108      	bne.n	8005e84 <HAL_UART_Transmit+0x6c>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e003      	b.n	8005e8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e8c:	e02e      	b.n	8005eec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	2180      	movs	r1, #128	@ 0x80
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f848 	bl	8005f2e <UART_WaitOnFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e03a      	b.n	8005f26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e007      	b.n	8005ede <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1cb      	bne.n	8005e8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2140      	movs	r1, #64	@ 0x40
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f814 	bl	8005f2e <UART_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e006      	b.n	8005f26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e000      	b.n	8005f26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f24:	2302      	movs	r3, #2
  }
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3e:	e03b      	b.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d037      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f48:	f7fb f954 	bl	80011f4 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d302      	bcc.n	8005f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e03a      	b.n	8005fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d023      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b80      	cmp	r3, #128	@ 0x80
 8005f74:	d020      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d01d      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d116      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f81d 	bl	8005fe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2208      	movs	r2, #8
 8005faa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e00f      	b.n	8005fd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	bf0c      	ite	eq
 8005fc8:	2301      	moveq	r3, #1
 8005fca:	2300      	movne	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d0b4      	beq.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b095      	sub	sp, #84	@ 0x54
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006008:	643a      	str	r2, [r7, #64]	@ 0x40
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800600e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3314      	adds	r3, #20
 8006022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	61fb      	str	r3, [r7, #28]
   return(result);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006054:	2b01      	cmp	r3, #1
 8006056:	d119      	bne.n	800608c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60bb      	str	r3, [r7, #8]
   return(result);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006078:	61ba      	str	r2, [r7, #24]
 800607a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6979      	ldr	r1, [r7, #20]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	613b      	str	r3, [r7, #16]
   return(result);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800609a:	bf00      	nop
 800609c:	3754      	adds	r7, #84	@ 0x54
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ac:	b0c0      	sub	sp, #256	@ 0x100
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	68d9      	ldr	r1, [r3, #12]
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	ea40 0301 	orr.w	r3, r0, r1
 80060d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	431a      	orrs	r2, r3
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006100:	f021 010c 	bic.w	r1, r1, #12
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800610e:	430b      	orrs	r3, r1
 8006110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	6999      	ldr	r1, [r3, #24]
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	ea40 0301 	orr.w	r3, r0, r1
 800612e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b8f      	ldr	r3, [pc, #572]	@ (8006374 <UART_SetConfig+0x2cc>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d005      	beq.n	8006148 <UART_SetConfig+0xa0>
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b8d      	ldr	r3, [pc, #564]	@ (8006378 <UART_SetConfig+0x2d0>)
 8006144:	429a      	cmp	r2, r3
 8006146:	d104      	bne.n	8006152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7ff fcb4 	bl	8005ab4 <HAL_RCC_GetPCLK2Freq>
 800614c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006150:	e003      	b.n	800615a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006152:	f7ff fc9b 	bl	8005a8c <HAL_RCC_GetPCLK1Freq>
 8006156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006164:	f040 810c 	bne.w	8006380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800616c:	2200      	movs	r2, #0
 800616e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800617a:	4622      	mov	r2, r4
 800617c:	462b      	mov	r3, r5
 800617e:	1891      	adds	r1, r2, r2
 8006180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006182:	415b      	adcs	r3, r3
 8006184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800618a:	4621      	mov	r1, r4
 800618c:	eb12 0801 	adds.w	r8, r2, r1
 8006190:	4629      	mov	r1, r5
 8006192:	eb43 0901 	adc.w	r9, r3, r1
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061aa:	4690      	mov	r8, r2
 80061ac:	4699      	mov	r9, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	eb18 0303 	adds.w	r3, r8, r3
 80061b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061b8:	462b      	mov	r3, r5
 80061ba:	eb49 0303 	adc.w	r3, r9, r3
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061d6:	460b      	mov	r3, r1
 80061d8:	18db      	adds	r3, r3, r3
 80061da:	653b      	str	r3, [r7, #80]	@ 0x50
 80061dc:	4613      	mov	r3, r2
 80061de:	eb42 0303 	adc.w	r3, r2, r3
 80061e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061ec:	f7fa f848 	bl	8000280 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4b61      	ldr	r3, [pc, #388]	@ (800637c <UART_SetConfig+0x2d4>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011c      	lsls	r4, r3, #4
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800620c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006218:	415b      	adcs	r3, r3
 800621a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800621c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006220:	4641      	mov	r1, r8
 8006222:	eb12 0a01 	adds.w	sl, r2, r1
 8006226:	4649      	mov	r1, r9
 8006228:	eb43 0b01 	adc.w	fp, r3, r1
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800623c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006240:	4692      	mov	sl, r2
 8006242:	469b      	mov	fp, r3
 8006244:	4643      	mov	r3, r8
 8006246:	eb1a 0303 	adds.w	r3, sl, r3
 800624a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800624e:	464b      	mov	r3, r9
 8006250:	eb4b 0303 	adc.w	r3, fp, r3
 8006254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800626c:	460b      	mov	r3, r1
 800626e:	18db      	adds	r3, r3, r3
 8006270:	643b      	str	r3, [r7, #64]	@ 0x40
 8006272:	4613      	mov	r3, r2
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
 800627a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800627e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006282:	f7f9 fffd 	bl	8000280 <__aeabi_uldivmod>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4611      	mov	r1, r2
 800628c:	4b3b      	ldr	r3, [pc, #236]	@ (800637c <UART_SetConfig+0x2d4>)
 800628e:	fba3 2301 	umull	r2, r3, r3, r1
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	2264      	movs	r2, #100	@ 0x64
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	1acb      	subs	r3, r1, r3
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062a2:	4b36      	ldr	r3, [pc, #216]	@ (800637c <UART_SetConfig+0x2d4>)
 80062a4:	fba3 2302 	umull	r2, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062b0:	441c      	add	r4, r3
 80062b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	1891      	adds	r1, r2, r2
 80062ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062cc:	415b      	adcs	r3, r3
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062d4:	4641      	mov	r1, r8
 80062d6:	1851      	adds	r1, r2, r1
 80062d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80062da:	4649      	mov	r1, r9
 80062dc:	414b      	adcs	r3, r1
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062ec:	4659      	mov	r1, fp
 80062ee:	00cb      	lsls	r3, r1, #3
 80062f0:	4651      	mov	r1, sl
 80062f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f6:	4651      	mov	r1, sl
 80062f8:	00ca      	lsls	r2, r1, #3
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	4642      	mov	r2, r8
 8006302:	189b      	adds	r3, r3, r2
 8006304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006308:	464b      	mov	r3, r9
 800630a:	460a      	mov	r2, r1
 800630c:	eb42 0303 	adc.w	r3, r2, r3
 8006310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006328:	460b      	mov	r3, r1
 800632a:	18db      	adds	r3, r3, r3
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800632e:	4613      	mov	r3, r2
 8006330:	eb42 0303 	adc.w	r3, r2, r3
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800633a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800633e:	f7f9 ff9f 	bl	8000280 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <UART_SetConfig+0x2d4>)
 8006348:	fba3 1302 	umull	r1, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	2164      	movs	r1, #100	@ 0x64
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	3332      	adds	r3, #50	@ 0x32
 800635a:	4a08      	ldr	r2, [pc, #32]	@ (800637c <UART_SetConfig+0x2d4>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 0207 	and.w	r2, r3, #7
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4422      	add	r2, r4
 800636e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006370:	e106      	b.n	8006580 <UART_SetConfig+0x4d8>
 8006372:	bf00      	nop
 8006374:	40011000 	.word	0x40011000
 8006378:	40011400 	.word	0x40011400
 800637c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800638a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800638e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006392:	4642      	mov	r2, r8
 8006394:	464b      	mov	r3, r9
 8006396:	1891      	adds	r1, r2, r2
 8006398:	6239      	str	r1, [r7, #32]
 800639a:	415b      	adcs	r3, r3
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
 800639e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a2:	4641      	mov	r1, r8
 80063a4:	1854      	adds	r4, r2, r1
 80063a6:	4649      	mov	r1, r9
 80063a8:	eb43 0501 	adc.w	r5, r3, r1
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	00eb      	lsls	r3, r5, #3
 80063b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ba:	00e2      	lsls	r2, r4, #3
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	4643      	mov	r3, r8
 80063c2:	18e3      	adds	r3, r4, r3
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063c8:	464b      	mov	r3, r9
 80063ca:	eb45 0303 	adc.w	r3, r5, r3
 80063ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ee:	4629      	mov	r1, r5
 80063f0:	008b      	lsls	r3, r1, #2
 80063f2:	4621      	mov	r1, r4
 80063f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f8:	4621      	mov	r1, r4
 80063fa:	008a      	lsls	r2, r1, #2
 80063fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006400:	f7f9 ff3e 	bl	8000280 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4b60      	ldr	r3, [pc, #384]	@ (800658c <UART_SetConfig+0x4e4>)
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	011c      	lsls	r4, r3, #4
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800641c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	61b9      	str	r1, [r7, #24]
 800642c:	415b      	adcs	r3, r3
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6139      	str	r1, [r7, #16]
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800647e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800648c:	4649      	mov	r1, r9
 800648e:	008b      	lsls	r3, r1, #2
 8006490:	4641      	mov	r1, r8
 8006492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006496:	4641      	mov	r1, r8
 8006498:	008a      	lsls	r2, r1, #2
 800649a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800649e:	f7f9 feef 	bl	8000280 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	4b38      	ldr	r3, [pc, #224]	@ (800658c <UART_SetConfig+0x4e4>)
 80064aa:	fba3 2301 	umull	r2, r3, r3, r1
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	2264      	movs	r2, #100	@ 0x64
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	1acb      	subs	r3, r1, r3
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	3332      	adds	r3, #50	@ 0x32
 80064bc:	4a33      	ldr	r2, [pc, #204]	@ (800658c <UART_SetConfig+0x4e4>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064c8:	441c      	add	r4, r3
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80064d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	415b      	adcs	r3, r3
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064e8:	4641      	mov	r1, r8
 80064ea:	1851      	adds	r1, r2, r1
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	4649      	mov	r1, r9
 80064f0:	414b      	adcs	r3, r1
 80064f2:	607b      	str	r3, [r7, #4]
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006500:	4659      	mov	r1, fp
 8006502:	00cb      	lsls	r3, r1, #3
 8006504:	4651      	mov	r1, sl
 8006506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650a:	4651      	mov	r1, sl
 800650c:	00ca      	lsls	r2, r1, #3
 800650e:	4610      	mov	r0, r2
 8006510:	4619      	mov	r1, r3
 8006512:	4603      	mov	r3, r0
 8006514:	4642      	mov	r2, r8
 8006516:	189b      	adds	r3, r3, r2
 8006518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800651a:	464b      	mov	r3, r9
 800651c:	460a      	mov	r2, r1
 800651e:	eb42 0303 	adc.w	r3, r2, r3
 8006522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	663b      	str	r3, [r7, #96]	@ 0x60
 800652e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800653c:	4649      	mov	r1, r9
 800653e:	008b      	lsls	r3, r1, #2
 8006540:	4641      	mov	r1, r8
 8006542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006546:	4641      	mov	r1, r8
 8006548:	008a      	lsls	r2, r1, #2
 800654a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800654e:	f7f9 fe97 	bl	8000280 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b0d      	ldr	r3, [pc, #52]	@ (800658c <UART_SetConfig+0x4e4>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	@ 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	3332      	adds	r3, #50	@ 0x32
 800656a:	4a08      	ldr	r2, [pc, #32]	@ (800658c <UART_SetConfig+0x4e4>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4422      	add	r2, r4
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	bf00      	nop
 8006582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006586:	46bd      	mov	sp, r7
 8006588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658c:	51eb851f 	.word	0x51eb851f

08006590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006590:	b084      	sub	sp, #16
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	f107 001c 	add.w	r0, r7, #28
 800659e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d123      	bne.n	80065f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80065be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d105      	bne.n	80065e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f9dc 	bl	80069a4 <USB_CoreReset>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	e01b      	b.n	800662a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9d0 	bl	80069a4 <USB_CoreReset>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006608:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	639a      	str	r2, [r3, #56]	@ 0x38
 800661c:	e005      	b.n	800662a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800662a:	7fbb      	ldrb	r3, [r7, #30]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10b      	bne.n	8006648 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f043 0206 	orr.w	r2, r3, #6
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f043 0220 	orr.w	r2, r3, #32
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006654:	b004      	add	sp, #16
 8006656:	4770      	bx	lr

08006658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f043 0201 	orr.w	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d115      	bne.n	80066ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ca:	200a      	movs	r0, #10
 80066cc:	f7fa fd9e 	bl	800120c <HAL_Delay>
      ms += 10U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	330a      	adds	r3, #10
 80066d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f956 	bl	8006988 <USB_GetMode>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d01e      	beq.n	8006720 <USB_SetCurrentMode+0x84>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80066e6:	d9f0      	bls.n	80066ca <USB_SetCurrentMode+0x2e>
 80066e8:	e01a      	b.n	8006720 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d115      	bne.n	800671c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066fc:	200a      	movs	r0, #10
 80066fe:	f7fa fd85 	bl	800120c <HAL_Delay>
      ms += 10U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	330a      	adds	r3, #10
 8006706:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f93d 	bl	8006988 <USB_GetMode>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <USB_SetCurrentMode+0x84>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2bc7      	cmp	r3, #199	@ 0xc7
 8006718:	d9f0      	bls.n	80066fc <USB_SetCurrentMode+0x60>
 800671a:	e001      	b.n	8006720 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e005      	b.n	800672c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2bc8      	cmp	r3, #200	@ 0xc8
 8006724:	d101      	bne.n	800672a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800674e:	d901      	bls.n	8006754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e01b      	b.n	800678c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	daf2      	bge.n	8006742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	019b      	lsls	r3, r3, #6
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006778:	d901      	bls.n	800677e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e006      	b.n	800678c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b20      	cmp	r3, #32
 8006788:	d0f0      	beq.n	800676c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b0:	d901      	bls.n	80067b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e018      	b.n	80067e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	daf2      	bge.n	80067a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2210      	movs	r2, #16
 80067c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067d4:	d901      	bls.n	80067da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e006      	b.n	80067e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d0f0      	beq.n	80067c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b089      	sub	sp, #36	@ 0x24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4611      	mov	r1, r2
 8006800:	461a      	mov	r2, r3
 8006802:	460b      	mov	r3, r1
 8006804:	71fb      	strb	r3, [r7, #7]
 8006806:	4613      	mov	r3, r2
 8006808:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d123      	bne.n	8006862 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800681a:	88bb      	ldrh	r3, [r7, #4]
 800681c:	3303      	adds	r3, #3
 800681e:	089b      	lsrs	r3, r3, #2
 8006820:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006822:	2300      	movs	r3, #0
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	e018      	b.n	800685a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	031a      	lsls	r2, r3, #12
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006834:	461a      	mov	r2, r3
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	3301      	adds	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	3301      	adds	r3, #1
 800684c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	3301      	adds	r3, #1
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	429a      	cmp	r2, r3
 8006860:	d3e2      	bcc.n	8006828 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3724      	adds	r7, #36	@ 0x24
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006870:	b480      	push	{r7}
 8006872:	b08b      	sub	sp, #44	@ 0x2c
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006886:	88fb      	ldrh	r3, [r7, #6]
 8006888:	089b      	lsrs	r3, r3, #2
 800688a:	b29b      	uxth	r3, r3
 800688c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006896:	2300      	movs	r3, #0
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e014      	b.n	80068c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	3301      	adds	r3, #1
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	3301      	adds	r3, #1
 80068b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	3301      	adds	r3, #1
 80068b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	3301      	adds	r3, #1
 80068be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	3301      	adds	r3, #1
 80068c4:	623b      	str	r3, [r7, #32]
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d3e6      	bcc.n	800689c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068ce:	8bfb      	ldrh	r3, [r7, #30]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01e      	beq.n	8006912 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068de:	461a      	mov	r2, r3
 80068e0:	f107 0310 	add.w	r3, r7, #16
 80068e4:	6812      	ldr	r2, [r2, #0]
 80068e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	701a      	strb	r2, [r3, #0]
      i++;
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	3301      	adds	r3, #1
 80068fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	3301      	adds	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006906:	8bfb      	ldrh	r3, [r7, #30]
 8006908:	3b01      	subs	r3, #1
 800690a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800690c:	8bfb      	ldrh	r3, [r7, #30]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1ea      	bne.n	80068e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006914:	4618      	mov	r0, r3
 8006916:	372c      	adds	r7, #44	@ 0x2c
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4013      	ands	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006938:	68fb      	ldr	r3, [r7, #12]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006946:	b480      	push	{r7}
 8006948:	b085      	sub	sp, #20
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	460b      	mov	r3, r1
 8006950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	4013      	ands	r3, r2
 8006978:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800697a:	68bb      	ldr	r3, [r7, #8]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069bc:	d901      	bls.n	80069c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e01b      	b.n	80069fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	daf2      	bge.n	80069b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f043 0201 	orr.w	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069e6:	d901      	bls.n	80069ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e006      	b.n	80069fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d0f0      	beq.n	80069da <USB_CoreReset+0x36>

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a08:	b084      	sub	sp, #16
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d119      	bne.n	8006a92 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10a      	bne.n	8006a7c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a74:	f043 0304 	orr.w	r3, r3, #4
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	e014      	b.n	8006aa6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a8a:	f023 0304 	bic.w	r3, r3, #4
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	e009      	b.n	8006aa6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aa6:	2110      	movs	r1, #16
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fe43 	bl	8006734 <USB_FlushTxFifo>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff fe6d 	bl	8006798 <USB_FlushRxFifo>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	e015      	b.n	8006afa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ada:	461a      	mov	r2, r3
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aee:	461a      	mov	r2, r3
 8006af0:	2300      	movs	r3, #0
 8006af2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	3301      	adds	r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006afe:	461a      	mov	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d3e3      	bcc.n	8006ace <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b12:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2280      	movs	r2, #128	@ 0x80
 8006b18:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8006b58 <USB_HostInit+0x150>)
 8006b1e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a0e      	ldr	r2, [pc, #56]	@ (8006b5c <USB_HostInit+0x154>)
 8006b24:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	f043 0210 	orr.w	r2, r3, #16
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699a      	ldr	r2, [r3, #24]
 8006b40:	4b07      	ldr	r3, [pc, #28]	@ (8006b60 <USB_HostInit+0x158>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b54:	b004      	add	sp, #16
 8006b56:	4770      	bx	lr
 8006b58:	00600080 	.word	0x00600080
 8006b5c:	004000e0 	.word	0x004000e0
 8006b60:	a3200008 	.word	0xa3200008

08006b64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006b82:	f023 0303 	bic.w	r3, r3, #3
 8006b86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d107      	bne.n	8006bb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bac:	461a      	mov	r2, r3
 8006bae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006bb2:	6053      	str	r3, [r2, #4]
 8006bb4:	e00c      	b.n	8006bd0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d107      	bne.n	8006bcc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	e001      	b.n	8006bd0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006bfe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c0c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c0e:	2064      	movs	r0, #100	@ 0x64
 8006c10:	f7fa fafc 	bl	800120c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c20:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c22:	200a      	movs	r0, #10
 8006c24:	f7fa faf2 	bl	800120c <HAL_Delay>

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006c56:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <USB_DriveVbus+0x44>
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d106      	bne.n	8006c76 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c74:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c80:	d109      	bne.n	8006c96 <USB_DriveVbus+0x64>
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d106      	bne.n	8006c96 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c94:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	0c5b      	lsrs	r3, r3, #17
 8006cc2:	f003 0303 	and.w	r3, r3, #3
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	b29b      	uxth	r3, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	461a      	mov	r2, r3
 8006d02:	4603      	mov	r3, r0
 8006d04:	70fb      	strb	r3, [r7, #3]
 8006d06:	460b      	mov	r3, r1
 8006d08:	70bb      	strb	r3, [r7, #2]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d22:	461a      	mov	r2, r3
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
 8006d28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d867      	bhi.n	8006e02 <USB_HC_Init+0x10e>
 8006d32:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <USB_HC_Init+0x44>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d49 	.word	0x08006d49
 8006d3c:	08006dc5 	.word	0x08006dc5
 8006d40:	08006d49 	.word	0x08006d49
 8006d44:	08006d87 	.word	0x08006d87
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d54:	461a      	mov	r2, r3
 8006d56:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006d5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da51      	bge.n	8006e08 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d82:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006d84:	e040      	b.n	8006e08 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d92:	461a      	mov	r2, r3
 8006d94:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006d98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da34      	bge.n	8006e0c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc0:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006dc2:	e023      	b.n	8006e0c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f240 2325 	movw	r3, #549	@ 0x225
 8006dd6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006dd8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da17      	bge.n	8006e10 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	78fa      	ldrb	r2, [r7, #3]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dfa:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006dfe:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e00:	e006      	b.n	8006e10 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	77fb      	strb	r3, [r7, #31]
      break;
 8006e06:	e004      	b.n	8006e12 <USB_HC_Init+0x11e>
      break;
 8006e08:	bf00      	nop
 8006e0a:	e002      	b.n	8006e12 <USB_HC_Init+0x11e>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e000      	b.n	8006e12 <USB_HC_Init+0x11e>
      break;
 8006e10:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	0151      	lsls	r1, r2, #5
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	440a      	add	r2, r1
 8006e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e3e:	f043 0302 	orr.w	r3, r3, #2
 8006e42:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	2101      	movs	r1, #1
 8006e54:	fa01 f303 	lsl.w	r3, r1, r3
 8006e58:	6939      	ldr	r1, [r7, #16]
 8006e5a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006e6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da03      	bge.n	8006e7e <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	e001      	b.n	8006e82 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff ff0e 	bl	8006ca4 <USB_GetHostSpeed>
 8006e88:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d106      	bne.n	8006ea0 <USB_HC_Init+0x1ac>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d003      	beq.n	8006ea0 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e001      	b.n	8006ea4 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ea4:	787b      	ldrb	r3, [r7, #1]
 8006ea6:	059b      	lsls	r3, r3, #22
 8006ea8:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006eac:	78bb      	ldrb	r3, [r7, #2]
 8006eae:	02db      	lsls	r3, r3, #11
 8006eb0:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006eb4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006eba:	049b      	lsls	r3, r3, #18
 8006ebc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ec0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006ec2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ec8:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ee2:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006ee4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d003      	beq.n	8006ef4 <USB_HC_Init+0x200>
 8006eec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10f      	bne.n	8006f14 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ef4:	78fb      	ldrb	r3, [r7, #3]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f12:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08c      	sub	sp, #48	@ 0x30
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f3c:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	799b      	ldrb	r3, [r3, #6]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d158      	bne.n	8006ff8 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006f46:	2301      	movs	r3, #1
 8006f48:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	78db      	ldrb	r3, [r3, #3]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	8a92      	ldrh	r2, [r2, #20]
 8006f58:	fb03 f202 	mul.w	r2, r3, r2
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	61da      	str	r2, [r3, #28]
 8006f60:	e079      	b.n	8007056 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	7c9b      	ldrb	r3, [r3, #18]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d130      	bne.n	8006fcc <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006f70:	d918      	bls.n	8006fa4 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	8a9b      	ldrh	r3, [r3, #20]
 8006f76:	461a      	mov	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d003      	beq.n	8006f94 <USB_HC_StartXfer+0x74>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d103      	bne.n	8006f9c <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2202      	movs	r2, #2
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	e05c      	b.n	8007056 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e058      	b.n	8007056 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d007      	beq.n	8006fc4 <USB_HC_StartXfer+0xa4>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d003      	beq.n	8006fc4 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	60da      	str	r2, [r3, #12]
 8006fc2:	e048      	b.n	8007056 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	e044      	b.n	8007056 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d10d      	bne.n	8006fee <USB_HC_StartXfer+0xce>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	8a92      	ldrh	r2, [r2, #20]
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d907      	bls.n	8006fee <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006fde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	8a92      	ldrh	r2, [r2, #20]
 8006fe4:	fb03 f202 	mul.w	r2, r3, r2
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	61da      	str	r2, [r3, #28]
 8006fec:	e033      	b.n	8007056 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6a1a      	ldr	r2, [r3, #32]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	61da      	str	r2, [r3, #28]
 8006ff6:	e02e      	b.n	8007056 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d018      	beq.n	8007032 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	8a92      	ldrh	r2, [r2, #20]
 8007008:	4413      	add	r3, r2
 800700a:	3b01      	subs	r3, #1
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	8a92      	ldrh	r2, [r2, #20]
 8007010:	fbb3 f3f2 	udiv	r3, r3, r2
 8007014:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007016:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007018:	8b7b      	ldrh	r3, [r7, #26]
 800701a:	429a      	cmp	r2, r3
 800701c:	d90b      	bls.n	8007036 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 800701e:	8b7b      	ldrh	r3, [r7, #26]
 8007020:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007022:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	8a92      	ldrh	r2, [r2, #20]
 8007028:	fb03 f202 	mul.w	r2, r3, r2
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	61da      	str	r2, [r3, #28]
 8007030:	e001      	b.n	8007036 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8007032:	2301      	movs	r3, #1
 8007034:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	78db      	ldrb	r3, [r3, #3]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800703e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	8a92      	ldrh	r2, [r2, #20]
 8007044:	fb03 f202 	mul.w	r2, r3, r2
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	61da      	str	r2, [r3, #28]
 800704c:	e003      	b.n	8007056 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6a1a      	ldr	r2, [r3, #32]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800705e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007060:	04d9      	lsls	r1, r3, #19
 8007062:	4ba4      	ldr	r3, [pc, #656]	@ (80072f4 <USB_HC_StartXfer+0x3d4>)
 8007064:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007066:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	7d9b      	ldrb	r3, [r3, #22]
 800706c:	075b      	lsls	r3, r3, #29
 800706e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007072:	69f9      	ldr	r1, [r7, #28]
 8007074:	0148      	lsls	r0, r1, #5
 8007076:	6a39      	ldr	r1, [r7, #32]
 8007078:	4401      	add	r1, r0
 800707a:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800707e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007080:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d009      	beq.n	800709c <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6999      	ldr	r1, [r3, #24]
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007098:	460a      	mov	r2, r1
 800709a:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	6a3a      	ldr	r2, [r7, #32]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80070d2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	7e7b      	ldrb	r3, [r7, #25]
 80070e4:	075b      	lsls	r3, r3, #29
 80070e6:	69f9      	ldr	r1, [r7, #28]
 80070e8:	0148      	lsls	r0, r1, #5
 80070ea:	6a39      	ldr	r1, [r7, #32]
 80070ec:	4401      	add	r1, r0
 80070ee:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80070f2:	4313      	orrs	r3, r2
 80070f4:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	799b      	ldrb	r3, [r3, #6]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	f040 80c4 	bne.w	8007288 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	7c5b      	ldrb	r3, [r3, #17]
 8007104:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800710a:	4313      	orrs	r3, r2
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	6a3a      	ldr	r2, [r7, #32]
 8007112:	440a      	add	r2, r1
 8007114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007118:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800711c:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	6a3a      	ldr	r2, [r7, #32]
 8007132:	440a      	add	r2, r1
 8007134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007138:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800713c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	79db      	ldrb	r3, [r3, #7]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d123      	bne.n	800718e <USB_HC_StartXfer+0x26e>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	78db      	ldrb	r3, [r3, #3]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d11f      	bne.n	800718e <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	4413      	add	r3, r2
 8007156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	440a      	add	r2, r1
 8007164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800716c:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	0151      	lsls	r1, r2, #5
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	440a      	add	r2, r1
 8007184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800718c:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7c9b      	ldrb	r3, [r3, #18]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d003      	beq.n	800719e <USB_HC_StartXfer+0x27e>
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	7c9b      	ldrb	r3, [r3, #18]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d117      	bne.n	80071ce <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d113      	bne.n	80071ce <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d10f      	bne.n	80071ce <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	015a      	lsls	r2, r3, #5
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	4413      	add	r3, r2
 80071b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	0151      	lsls	r1, r2, #5
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	440a      	add	r2, r1
 80071c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071cc:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	7c9b      	ldrb	r3, [r3, #18]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d163      	bne.n	800729e <USB_HC_StartXfer+0x37e>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	78db      	ldrb	r3, [r3, #3]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d15f      	bne.n	800729e <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d859      	bhi.n	800729c <USB_HC_StartXfer+0x37c>
 80071e8:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <USB_HC_StartXfer+0x2d0>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	08007201 	.word	0x08007201
 80071f4:	08007223 	.word	0x08007223
 80071f8:	08007245 	.word	0x08007245
 80071fc:	08007267 	.word	0x08007267
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	6a3a      	ldr	r2, [r7, #32]
 8007214:	440a      	add	r2, r1
 8007216:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800721a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800721e:	6053      	str	r3, [r2, #4]
          break;
 8007220:	e03d      	b.n	800729e <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	4413      	add	r3, r2
 800722a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	0151      	lsls	r1, r2, #5
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	440a      	add	r2, r1
 8007238:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800723c:	f043 030e 	orr.w	r3, r3, #14
 8007240:	6053      	str	r3, [r2, #4]
          break;
 8007242:	e02c      	b.n	800729e <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	6a3a      	ldr	r2, [r7, #32]
 8007258:	440a      	add	r2, r1
 800725a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800725e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007262:	6053      	str	r3, [r2, #4]
          break;
 8007264:	e01b      	b.n	800729e <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	4413      	add	r3, r2
 800726e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	440a      	add	r2, r1
 800727c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007284:	6053      	str	r3, [r2, #4]
          break;
 8007286:	e00a      	b.n	800729e <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	4413      	add	r3, r2
 8007290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007294:	461a      	mov	r2, r3
 8007296:	2300      	movs	r3, #0
 8007298:	6053      	str	r3, [r2, #4]
 800729a:	e000      	b.n	800729e <USB_HC_StartXfer+0x37e>
          break;
 800729c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072b4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	78db      	ldrb	r3, [r3, #3]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	e003      	b.n	80072d0 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072ce:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072d6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e4:	461a      	mov	r2, r3
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e055      	b.n	80073a0 <USB_HC_StartXfer+0x480>
 80072f4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	78db      	ldrb	r3, [r3, #3]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d14e      	bne.n	800739e <USB_HC_StartXfer+0x47e>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d04a      	beq.n	800739e <USB_HC_StartXfer+0x47e>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	79db      	ldrb	r3, [r3, #7]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d146      	bne.n	800739e <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	7c9b      	ldrb	r3, [r3, #18]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d831      	bhi.n	800737c <USB_HC_StartXfer+0x45c>
 8007318:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <USB_HC_StartXfer+0x400>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007331 	.word	0x08007331
 8007324:	08007355 	.word	0x08007355
 8007328:	08007331 	.word	0x08007331
 800732c:	08007355 	.word	0x08007355
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	3303      	adds	r3, #3
 8007336:	089b      	lsrs	r3, r3, #2
 8007338:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800733a:	8afa      	ldrh	r2, [r7, #22]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	b29b      	uxth	r3, r3
 8007342:	429a      	cmp	r2, r3
 8007344:	d91c      	bls.n	8007380 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f043 0220 	orr.w	r2, r3, #32
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	619a      	str	r2, [r3, #24]
        }
        break;
 8007352:	e015      	b.n	8007380 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	3303      	adds	r3, #3
 800735a:	089b      	lsrs	r3, r3, #2
 800735c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800735e:	8afa      	ldrh	r2, [r7, #22]
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	b29b      	uxth	r3, r3
 800736a:	429a      	cmp	r2, r3
 800736c:	d90a      	bls.n	8007384 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	619a      	str	r2, [r3, #24]
        }
        break;
 800737a:	e003      	b.n	8007384 <USB_HC_StartXfer+0x464>

      default:
        break;
 800737c:	bf00      	nop
 800737e:	e002      	b.n	8007386 <USB_HC_StartXfer+0x466>
        break;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <USB_HC_StartXfer+0x466>
        break;
 8007384:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6999      	ldr	r1, [r3, #24]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	785a      	ldrb	r2, [r3, #1]
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	b29b      	uxth	r3, r3
 8007394:	2000      	movs	r0, #0
 8007396:	9000      	str	r0, [sp, #0]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f7ff fa2b 	bl	80067f4 <USB_WritePacket>
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3728      	adds	r7, #40	@ 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	b29b      	uxth	r3, r3
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b089      	sub	sp, #36	@ 0x24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	0c9b      	lsrs	r3, r3, #18
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	0fdb      	lsrs	r3, r3, #31
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	0fdb      	lsrs	r3, r3, #31
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b20      	cmp	r3, #32
 800742e:	d10d      	bne.n	800744c <USB_HC_Halt+0x82>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <USB_HC_Halt+0x82>
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d005      	beq.n	8007448 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d002      	beq.n	8007448 <USB_HC_Halt+0x7e>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b03      	cmp	r3, #3
 8007446:	d101      	bne.n	800744c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	e0d8      	b.n	80075fe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <USB_HC_Halt+0x8e>
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b02      	cmp	r3, #2
 8007456:	d173      	bne.n	8007540 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	440a      	add	r2, r1
 800746e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007472:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007476:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d14a      	bne.n	800751a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d133      	bne.n	80074f8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074ae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074ce:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074dc:	d82e      	bhi.n	800753c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074f4:	d0ec      	beq.n	80074d0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80074f6:	e081      	b.n	80075fc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	440a      	add	r2, r1
 800750e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007516:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007518:	e070      	b.n	80075fc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007534:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007538:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800753a:	e05f      	b.n	80075fc <USB_HC_Halt+0x232>
            break;
 800753c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800753e:	e05d      	b.n	80075fc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	0151      	lsls	r1, r2, #5
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	440a      	add	r2, r1
 8007556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800755e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d133      	bne.n	80075d8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	4413      	add	r3, r2
 8007578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	440a      	add	r2, r1
 8007586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800758a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800758e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075bc:	d81d      	bhi.n	80075fa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d4:	d0ec      	beq.n	80075b0 <USB_HC_Halt+0x1e6>
 80075d6:	e011      	b.n	80075fc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	e000      	b.n	80075fc <USB_HC_Halt+0x232>
          break;
 80075fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3724      	adds	r7, #36	@ 0x24
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b088      	sub	sp, #32
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff f82b 	bl	800667a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007624:	2110      	movs	r1, #16
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff f884 	bl	8006734 <USB_FlushTxFifo>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff f8ae 	bl	8006798 <USB_FlushRxFifo>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	e01f      	b.n	800768c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	4413      	add	r3, r2
 8007654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007662:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800766a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007672:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	4413      	add	r3, r2
 800767c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007680:	461a      	mov	r2, r3
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3301      	adds	r3, #1
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2b0f      	cmp	r3, #15
 8007690:	d9dc      	bls.n	800764c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007692:	2300      	movs	r3, #0
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	e034      	b.n	8007702 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076ae:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80076b6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076be:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076cc:	461a      	mov	r2, r3
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076de:	d80c      	bhi.n	80076fa <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076f6:	d0ec      	beq.n	80076d2 <USB_StopHost+0xc8>
 80076f8:	e000      	b.n	80076fc <USB_StopHost+0xf2>
        break;
 80076fa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	3301      	adds	r3, #1
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b0f      	cmp	r3, #15
 8007706:	d9c7      	bls.n	8007698 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800770e:	461a      	mov	r2, r3
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f04f 32ff 	mov.w	r2, #4294967295
 800771c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fe ff9a 	bl	8006658 <USB_EnableGlobalInt>

  return ret;
 8007724:	7ffb      	ldrb	r3, [r7, #31]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 800772e:	b590      	push	{r4, r7, lr}
 8007730:	b089      	sub	sp, #36	@ 0x24
 8007732:	af04      	add	r7, sp, #16
 8007734:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8007736:	2302      	movs	r3, #2
 8007738:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 800773e:	23ff      	movs	r3, #255	@ 0xff
 8007740:	2203      	movs	r2, #3
 8007742:	2101      	movs	r1, #1
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fbf3 	bl	8007f30 <USBH_FindInterface>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	2bff      	cmp	r3, #255	@ 0xff
 8007752:	d102      	bne.n	800775a <USBH_MIDI_InterfaceInit+0x2c>
	{
	  USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.");
	  USBH_DbgLog (phost->pActiveClass->Name);
	  status = USBH_FAIL;
 8007754:	2302      	movs	r3, #2
 8007756:	73fb      	strb	r3, [r7, #15]
 8007758:	e0fc      	b.n	8007954 <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fb8a 	bl	8007e78 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 444c 	ldr.w	r4, [r3, #1100]	@ 0x44c
 800776a:	201c      	movs	r0, #28
 800776c:	f002 fbba 	bl	8009ee4 <malloc>
 8007770:	4603      	mov	r3, r0
 8007772:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 8007784:	2302      	movs	r3, #2
 8007786:	e0e6      	b.n	8007956 <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 8007788:	221c      	movs	r2, #28
 800778a:	2100      	movs	r1, #0
 800778c:	68b8      	ldr	r0, [r7, #8]
 800778e:	f002 fe71 	bl	800a474 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007798:	4619      	mov	r1, r3
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	231a      	movs	r3, #26
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b25b      	sxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	da1c      	bge.n	80077ea <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80077b6:	4619      	mov	r1, r3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	231a      	movs	r3, #26
 80077bc:	fb01 f303 	mul.w	r3, r1, r3
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80077d2:	4619      	mov	r1, r3
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	231a      	movs	r3, #26
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80077e2:	881a      	ldrh	r2, [r3, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	811a      	strh	r2, [r3, #8]
 80077e8:	e01b      	b.n	8007822 <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 80077f0:	4619      	mov	r1, r3
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	231a      	movs	r3, #26
 80077f6:	fb01 f303 	mul.w	r3, r1, r3
 80077fa:	4413      	add	r3, r2
 80077fc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800780c:	4619      	mov	r1, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	231a      	movs	r3, #26
 8007812:	fb01 f303 	mul.w	r3, r1, r3
 8007816:	4413      	add	r3, r2
 8007818:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800781c:	881a      	ldrh	r2, [r3, #0]
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007828:	4619      	mov	r1, r3
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	231a      	movs	r3, #26
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4413      	add	r3, r2
 8007834:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b25b      	sxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	da1c      	bge.n	800787a <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007846:	4619      	mov	r1, r3
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	231a      	movs	r3, #26
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	4413      	add	r3, r2
 8007852:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007862:	4619      	mov	r1, r3
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	231a      	movs	r3, #26
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	4413      	add	r3, r2
 800786e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007872:	881a      	ldrh	r2, [r3, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	811a      	strh	r2, [r3, #8]
 8007878:	e01b      	b.n	80078b2 <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 8007880:	4619      	mov	r1, r3
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	231a      	movs	r3, #26
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	4413      	add	r3, r2
 800788c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800789c:	4619      	mov	r1, r3
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	231a      	movs	r3, #26
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80078ac:	881a      	ldrh	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	78db      	ldrb	r3, [r3, #3]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 ffd4 	bl	8009866 <USBH_AllocPipe>
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 ffca 	bl	8009866 <USBH_AllocPipe>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	7899      	ldrb	r1, [r3, #2]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	78d8      	ldrb	r0, [r3, #3]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	88d2      	ldrh	r2, [r2, #6]
 80078f2:	9202      	str	r2, [sp, #8]
 80078f4:	2202      	movs	r2, #2
 80078f6:	9201      	str	r2, [sp, #4]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	4623      	mov	r3, r4
 80078fc:	4602      	mov	r2, r0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 ff82 	bl	8009808 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	7859      	ldrb	r1, [r3, #1]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	7918      	ldrb	r0, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	8912      	ldrh	r2, [r2, #8]
 800791c:	9202      	str	r2, [sp, #8]
 800791e:	2202      	movs	r2, #2
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4623      	mov	r3, r4
 8007926:	4602      	mov	r2, r0
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 ff6d 	bl	8009808 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2200      	movs	r2, #0
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f002 fa66 	bl	8009e0e <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	789b      	ldrb	r3, [r3, #2]
 8007946:	2200      	movs	r2, #0
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f002 fa5f 	bl	8009e0e <USBH_LL_SetToggle>
		status = USBH_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	bd90      	pop	{r4, r7, pc}

0800795e <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b084      	sub	sp, #16
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	789b      	ldrb	r3, [r3, #2]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00e      	beq.n	8007996 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	789b      	ldrb	r3, [r3, #2]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 ff61 	bl	8009846 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	789b      	ldrb	r3, [r3, #2]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 ff8d 	bl	80098aa <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00e      	beq.n	80079bc <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 ff4e 	bl	8009846 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 ff7a 	bl	80098aa <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f002 fa8f 	bl	8009ef4 <free>
		phost->pActiveClass->pData = 0;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80079dc:	2200      	movs	r2, #0
 80079de:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80079f8:	2102      	movs	r1, #2
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3

	return USBH_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 8007a10:	2301      	movs	r3, #1
 8007a12:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d010      	beq.n	8007a4c <USBH_MIDI_Process+0x44>
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	dc1b      	bgt.n	8007a66 <USBH_MIDI_Process+0x5e>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <USBH_MIDI_Process+0x30>
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d003      	beq.n	8007a3e <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 8007a36:	e016      	b.n	8007a66 <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	73fb      	strb	r3, [r7, #15]
		break;
 8007a3c:	e016      	b.n	8007a6c <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f86b 	bl	8007b1a <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f8d9 	bl	8007bfc <MIDI_ProcessReception>
		break;
 8007a4a:	e00f      	b.n	8007a6c <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f954 	bl	8008cfc <USBH_ClrFeature>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
		break;
 8007a64:	e001      	b.n	8007a6a <USBH_MIDI_Process+0x62>
		break;
 8007a66:	bf00      	nop
 8007a68:	e000      	b.n	8007a6c <USBH_MIDI_Process+0x64>
		break;
 8007a6a:	bf00      	nop

	}

	return status;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBH_MIDI_GetLastReceivedDataSize>:
 * @brief  This function return last recieved data size
 * @param  None
 * @retval None
 */
uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	60fb      	str	r3, [r7, #12]

	if(phost->gState == HOST_CLASS)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	d108      	bne.n	8007aba <USBH_MIDI_GetLastReceivedDataSize+0x2e>
	{
		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f002 f8fa 	bl	8009ca8 <USBH_LL_GetLastXferSize>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	e000      	b.n	8007abc <USBH_MIDI_GetLastReceivedDataSize+0x30>
	}
	else
	{
		return 0;
 8007aba:	2300      	movs	r3, #0
	}
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <USBH_MIDI_Receive+0x2c>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d10d      	bne.n	8007b0c <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	88fa      	ldrh	r2, [r7, #6]
 8007afa:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2203      	movs	r2, #3
 8007b06:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	371c      	adds	r7, #28
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af02      	add	r7, sp, #8
 8007b20:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	7e1b      	ldrb	r3, [r3, #24]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d002      	beq.n	8007b3e <MIDI_ProcessTransmission+0x24>
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d021      	beq.n	8007b80 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8007b3c:	e05a      	b.n	8007bf4 <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8a9a      	ldrh	r2, [r3, #20]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d90b      	bls.n	8007b62 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	68d9      	ldr	r1, [r3, #12]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	88da      	ldrh	r2, [r3, #6]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	789b      	ldrb	r3, [r3, #2]
 8007b56:	2001      	movs	r0, #1
 8007b58:	9000      	str	r0, [sp, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fe11 	bl	8009782 <USBH_BulkSendData>
 8007b60:	e00a      	b.n	8007b78 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68d9      	ldr	r1, [r3, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8a9a      	ldrh	r2, [r3, #20]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	789b      	ldrb	r3, [r3, #2]
 8007b6e:	2001      	movs	r0, #1
 8007b70:	9000      	str	r0, [sp, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fe05 	bl	8009782 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	761a      	strb	r2, [r3, #24]
		break;
 8007b7e:	e039      	b.n	8007bf4 <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	789b      	ldrb	r3, [r3, #2]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f002 f920 	bl	8009dcc <USBH_LL_GetURBState>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d127      	bne.n	8007be6 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8a9a      	ldrh	r2, [r3, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	88db      	ldrh	r3, [r3, #6]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d90f      	bls.n	8007bc2 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8a9a      	ldrh	r2, [r3, #20]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	88d2      	ldrh	r2, [r2, #6]
 8007bba:	441a      	add	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	e002      	b.n	8007bc8 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8a9b      	ldrh	r3, [r3, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	761a      	strb	r2, [r3, #24]
		break;
 8007bd6:	e00c      	b.n	8007bf2 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f866 	bl	8007cb0 <USBH_MIDI_TransmitCallback>
		break;
 8007be4:	e005      	b.n	8007bf2 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d102      	bne.n	8007bf2 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	761a      	strb	r2, [r3, #24]
		break;
 8007bf2:	bf00      	nop
	}
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	7e5b      	ldrb	r3, [r3, #25]
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d002      	beq.n	8007c20 <MIDI_ProcessReception+0x24>
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d00d      	beq.n	8007c3a <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8007c1e:	e043      	b.n	8007ca8 <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6919      	ldr	r1, [r3, #16]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	891a      	ldrh	r2, [r3, #8]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 fdcd 	bl	80097cc <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2204      	movs	r2, #4
 8007c36:	765a      	strb	r2, [r3, #25]
		break;
 8007c38:	e036      	b.n	8007ca8 <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f002 f8c3 	bl	8009dcc <USBH_LL_GetURBState>
 8007c46:	4603      	mov	r3, r0
 8007c48:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d12a      	bne.n	8007ca6 <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f002 f826 	bl	8009ca8 <USBH_LL_GetLastXferSize>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8adb      	ldrh	r3, [r3, #22]
 8007c64:	461a      	mov	r2, r3
 8007c66:	893b      	ldrh	r3, [r7, #8]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	dd15      	ble.n	8007c9a <MIDI_ProcessReception+0x9e>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	891b      	ldrh	r3, [r3, #8]
 8007c72:	893a      	ldrh	r2, [r7, #8]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d910      	bls.n	8007c9a <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8ada      	ldrh	r2, [r3, #22]
 8007c7c:	893b      	ldrh	r3, [r7, #8]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	893b      	ldrh	r3, [r7, #8]
 8007c8c:	441a      	add	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2203      	movs	r2, #3
 8007c96:	765a      	strb	r2, [r3, #25]
		break;
 8007c98:	e005      	b.n	8007ca6 <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7f8 feff 	bl	8000aa4 <USBH_MIDI_ReceiveCallback>
		break;
 8007ca6:	bf00      	nop
	}
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e029      	b.n	8007d30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	79fa      	ldrb	r2, [r7, #7]
 8007ce0:	f883 249c 	strb.w	r2, [r3, #1180]	@ 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
  phost->ClassNumber = 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f81f 	bl	8007d38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	f8c3 24a4 	str.w	r2, [r3, #1188]	@ 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f001 ff09 	bl	8009b40 <USBH_LL_Init>

  return USBH_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e00a      	b.n	8007d60 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	2200      	movs	r2, #0
 8007d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b0f      	cmp	r3, #15
 8007d64:	d9f1      	bls.n	8007d4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e009      	b.n	8007d80 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007d76:	2200      	movs	r2, #0
 8007d78:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d86:	d3f1      	bcc.n	8007d6c <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

  phost->Control.state = CTRL_SETUP;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2240      	movs	r2, #64	@ 0x40
 8007dac:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	331c      	adds	r3, #28
 8007dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4618      	mov	r0, r3
 8007de0:	f002 fb48 	bl	800a474 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dee:	2100      	movs	r1, #0
 8007df0:	4618      	mov	r0, r3
 8007df2:	f002 fb3f 	bl	800a474 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007dfc:	2212      	movs	r2, #18
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4618      	mov	r0, r3
 8007e02:	f002 fb37 	bl	800a474 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e0c:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f002 fb2e 	bl	800a474 <memset>

  return USBH_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d017      	beq.n	8007e66 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10f      	bne.n	8007e60 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8007e46:	1c59      	adds	r1, r3, #1
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	f8c2 1450 	str.w	r1, [r2, #1104]	@ 0x450
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	f503 7389 	add.w	r3, r3, #274	@ 0x112
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
 8007e5e:	e004      	b.n	8007e6a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e60:	2302      	movs	r3, #2
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	e001      	b.n	8007e6a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e66:	2302      	movs	r3, #2
 8007e68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007e8e:	78fa      	ldrb	r2, [r7, #3]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d23c      	bcs.n	8007f0e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	78fa      	ldrb	r2, [r7, #3]
 8007e98:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	481e      	ldr	r0, [pc, #120]	@ (8007f1c <USBH_SelectInterface+0xa4>)
 8007ea2:	f002 f99f 	bl	800a1e4 <iprintf>
 8007ea6:	481e      	ldr	r0, [pc, #120]	@ (8007f20 <USBH_SelectInterface+0xa8>)
 8007ea8:	f002 fa04 	bl	800a2b4 <puts>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	211a      	movs	r1, #26
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4818      	ldr	r0, [pc, #96]	@ (8007f24 <USBH_SelectInterface+0xac>)
 8007ec2:	f002 f98f 	bl	800a1e4 <iprintf>
 8007ec6:	4816      	ldr	r0, [pc, #88]	@ (8007f20 <USBH_SelectInterface+0xa8>)
 8007ec8:	f002 f9f4 	bl	800a2b4 <puts>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	211a      	movs	r1, #26
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4811      	ldr	r0, [pc, #68]	@ (8007f28 <USBH_SelectInterface+0xb0>)
 8007ee2:	f002 f97f 	bl	800a1e4 <iprintf>
 8007ee6:	480e      	ldr	r0, [pc, #56]	@ (8007f20 <USBH_SelectInterface+0xa8>)
 8007ee8:	f002 f9e4 	bl	800a2b4 <puts>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	211a      	movs	r1, #26
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4619      	mov	r1, r3
 8007f00:	480a      	ldr	r0, [pc, #40]	@ (8007f2c <USBH_SelectInterface+0xb4>)
 8007f02:	f002 f96f 	bl	800a1e4 <iprintf>
 8007f06:	4806      	ldr	r0, [pc, #24]	@ (8007f20 <USBH_SelectInterface+0xa8>)
 8007f08:	f002 f9d4 	bl	800a2b4 <puts>
 8007f0c:	e001      	b.n	8007f12 <USBH_SelectInterface+0x9a>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	0800aebc 	.word	0x0800aebc
 8007f20:	0800aedc 	.word	0x0800aedc
 8007f24:	0800aee0 	.word	0x0800aee0
 8007f28:	0800aef0 	.word	0x0800aef0
 8007f2c:	0800af00 	.word	0x0800af00

08007f30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	70fb      	strb	r3, [r7, #3]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70bb      	strb	r3, [r7, #2]
 8007f46:	4613      	mov	r3, r2
 8007f48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f5a:	e025      	b.n	8007fa8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	221a      	movs	r2, #26
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	3308      	adds	r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	795b      	ldrb	r3, [r3, #5]
 8007f72:	78fa      	ldrb	r2, [r7, #3]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d002      	beq.n	8007f7e <USBH_FindInterface+0x4e>
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	2bff      	cmp	r3, #255	@ 0xff
 8007f7c:	d111      	bne.n	8007fa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f82:	78ba      	ldrb	r2, [r7, #2]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d002      	beq.n	8007f8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f88:	78bb      	ldrb	r3, [r7, #2]
 8007f8a:	2bff      	cmp	r3, #255	@ 0xff
 8007f8c:	d109      	bne.n	8007fa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f92:	787a      	ldrb	r2, [r7, #1]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d002      	beq.n	8007f9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f98:	787b      	ldrb	r3, [r7, #1]
 8007f9a:	2bff      	cmp	r3, #255	@ 0xff
 8007f9c:	d101      	bne.n	8007fa2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	e006      	b.n	8007fb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	d9d6      	bls.n	8007f5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fae:	23ff      	movs	r3, #255	@ 0xff
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fdf7 	bl	8009bb8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007fca:	2101      	movs	r1, #1
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 ff10 	bl	8009df2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d102      	bne.n	8007ffe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b0b      	cmp	r3, #11
 8008006:	f200 8229 	bhi.w	800845c <USBH_Process+0x480>
 800800a:	a201      	add	r2, pc, #4	@ (adr r2, 8008010 <USBH_Process+0x34>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008041 	.word	0x08008041
 8008014:	0800807f 	.word	0x0800807f
 8008018:	080080ff 	.word	0x080080ff
 800801c:	080083eb 	.word	0x080083eb
 8008020:	0800845d 	.word	0x0800845d
 8008024:	0800819f 	.word	0x0800819f
 8008028:	08008391 	.word	0x08008391
 800802c:	080081ed 	.word	0x080081ed
 8008030:	0800820d 	.word	0x0800820d
 8008034:	08008237 	.word	0x08008237
 8008038:	08008293 	.word	0x08008293
 800803c:	080083d3 	.word	0x080083d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8209 	beq.w	8008460 <USBH_Process+0x484>
      {
        USBH_UsrLog("USB Device Connected");
 800804e:	48a5      	ldr	r0, [pc, #660]	@ (80082e4 <USBH_Process+0x308>)
 8008050:	f002 f8c8 	bl	800a1e4 <iprintf>
 8008054:	48a4      	ldr	r0, [pc, #656]	@ (80082e8 <USBH_Process+0x30c>)
 8008056:	f002 f92d 	bl	800a2b4 <puts>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008060:	20c8      	movs	r0, #200	@ 0xc8
 8008062:	f001 ff07 	bl	8009e74 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fe03 	bl	8009c72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800807c:	e1f0      	b.n	8008460 <USBH_Process+0x484>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008084:	2b01      	cmp	r3, #1
 8008086:	d10d      	bne.n	80080a4 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8008088:	4898      	ldr	r0, [pc, #608]	@ (80082ec <USBH_Process+0x310>)
 800808a:	f002 f8ab 	bl	800a1e4 <iprintf>
 800808e:	4896      	ldr	r0, [pc, #600]	@ (80082e8 <USBH_Process+0x30c>)
 8008090:	f002 f910 	bl	800a2b4 <puts>
        phost->device.RstCnt = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080a2:	e1ea      	b.n	800847a <USBH_Process+0x49e>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80080aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080ae:	d91a      	bls.n	80080e6 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80080b6:	3301      	adds	r3, #1
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d909      	bls.n	80080de <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 80080ca:	4889      	ldr	r0, [pc, #548]	@ (80082f0 <USBH_Process+0x314>)
 80080cc:	f002 f88a 	bl	800a1e4 <iprintf>
 80080d0:	4885      	ldr	r0, [pc, #532]	@ (80082e8 <USBH_Process+0x30c>)
 80080d2:	f002 f8ef 	bl	800a2b4 <puts>
            phost->gState = HOST_ABORT_STATE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	220d      	movs	r2, #13
 80080da:	701a      	strb	r2, [r3, #0]
      break;
 80080dc:	e1cd      	b.n	800847a <USBH_Process+0x49e>
            phost->gState = HOST_IDLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
      break;
 80080e4:	e1c9      	b.n	800847a <USBH_Process+0x49e>
          phost->Timeout += 10U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80080ec:	f103 020a 	add.w	r2, r3, #10
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
          USBH_Delay(10U);
 80080f6:	200a      	movs	r0, #10
 80080f8:	f001 febc 	bl	8009e74 <USBH_Delay>
      break;
 80080fc:	e1bd      	b.n	800847a <USBH_Process+0x49e>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800810e:	2104      	movs	r1, #4
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008114:	2064      	movs	r0, #100	@ 0x64
 8008116:	f001 fead 	bl	8009e74 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fd82 	bl	8009c24 <USBH_LL_GetSpeed>
 8008120:	4603      	mov	r3, r0
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2205      	movs	r2, #5
 800812e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 fb97 	bl	8009866 <USBH_AllocPipe>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008140:	2180      	movs	r1, #128	@ 0x80
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fb8f 	bl	8009866 <USBH_AllocPipe>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7919      	ldrb	r1, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008164:	9202      	str	r2, [sp, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4603      	mov	r3, r0
 800816e:	2280      	movs	r2, #128	@ 0x80
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fb49 	bl	8009808 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7959      	ldrb	r1, [r3, #5]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800818a:	9202      	str	r2, [sp, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	9201      	str	r2, [sp, #4]
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4603      	mov	r3, r0
 8008194:	2200      	movs	r2, #0
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fb36 	bl	8009808 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800819c:	e16d      	b.n	800847a <USBH_Process+0x49e>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f97a 	bl	8008498 <USBH_HandleEnum>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f040 8159 	bne.w	8008464 <USBH_Process+0x488>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 80081b2:	4850      	ldr	r0, [pc, #320]	@ (80082f4 <USBH_Process+0x318>)
 80081b4:	f002 f816 	bl	800a1e4 <iprintf>
 80081b8:	484b      	ldr	r0, [pc, #300]	@ (80082e8 <USBH_Process+0x30c>)
 80081ba:	f002 f87b 	bl	800a2b4 <puts>

        phost->device.current_interface = 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d109      	bne.n	80081e4 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 80081d0:	4849      	ldr	r0, [pc, #292]	@ (80082f8 <USBH_Process+0x31c>)
 80081d2:	f002 f807 	bl	800a1e4 <iprintf>
 80081d6:	4844      	ldr	r0, [pc, #272]	@ (80082e8 <USBH_Process+0x30c>)
 80081d8:	f002 f86c 	bl	800a2b4 <puts>
          phost->gState = HOST_SET_CONFIGURATION;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2208      	movs	r2, #8
 80081e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081e2:	e13f      	b.n	8008464 <USBH_Process+0x488>
          phost->gState = HOST_INPUT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2207      	movs	r2, #7
 80081e8:	701a      	strb	r2, [r3, #0]
      break;
 80081ea:	e13b      	b.n	8008464 <USBH_Process+0x488>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 8138 	beq.w	8008468 <USBH_Process+0x48c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 80081fe:	2101      	movs	r1, #1
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2208      	movs	r2, #8
 8008208:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800820a:	e12d      	b.n	8008468 <USBH_Process+0x48c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fd2a 	bl	8008c6e <USBH_SetCfg>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8125 	bne.w	800846c <USBH_Process+0x490>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2209      	movs	r2, #9
 8008226:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 8008228:	4834      	ldr	r0, [pc, #208]	@ (80082fc <USBH_Process+0x320>)
 800822a:	f001 ffdb 	bl	800a1e4 <iprintf>
 800822e:	482e      	ldr	r0, [pc, #184]	@ (80082e8 <USBH_Process+0x30c>)
 8008230:	f002 f840 	bl	800a2b4 <puts>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008234:	e11a      	b.n	800846c <USBH_Process+0x490>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d022      	beq.n	800828a <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008244:	2101      	movs	r1, #1
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fd34 	bl	8008cb4 <USBH_SetFeature>
 800824c:	4603      	mov	r3, r0
 800824e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 8008258:	4829      	ldr	r0, [pc, #164]	@ (8008300 <USBH_Process+0x324>)
 800825a:	f001 ffc3 	bl	800a1e4 <iprintf>
 800825e:	4822      	ldr	r0, [pc, #136]	@ (80082e8 <USBH_Process+0x30c>)
 8008260:	f002 f828 	bl	800a2b4 <puts>
          phost->gState = HOST_CHECK_CLASS;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	220a      	movs	r2, #10
 8008268:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800826a:	e101      	b.n	8008470 <USBH_Process+0x494>
        else if (status == USBH_NOT_SUPPORTED)
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b03      	cmp	r3, #3
 8008272:	f040 80fd 	bne.w	8008470 <USBH_Process+0x494>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8008276:	4823      	ldr	r0, [pc, #140]	@ (8008304 <USBH_Process+0x328>)
 8008278:	f001 ffb4 	bl	800a1e4 <iprintf>
 800827c:	481a      	ldr	r0, [pc, #104]	@ (80082e8 <USBH_Process+0x30c>)
 800827e:	f002 f819 	bl	800a2b4 <puts>
          phost->gState = HOST_CHECK_CLASS;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220a      	movs	r2, #10
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e0f2      	b.n	8008470 <USBH_Process+0x494>
        phost->gState = HOST_CHECK_CLASS;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	220a      	movs	r2, #10
 800828e:	701a      	strb	r2, [r3, #0]
      break;
 8008290:	e0ee      	b.n	8008470 <USBH_Process+0x494>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3450 	ldr.w	r3, [r3, #1104]	@ 0x450
 8008298:	2b00      	cmp	r3, #0
 800829a:	d106      	bne.n	80082aa <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800829c:	481a      	ldr	r0, [pc, #104]	@ (8008308 <USBH_Process+0x32c>)
 800829e:	f001 ffa1 	bl	800a1e4 <iprintf>
 80082a2:	4811      	ldr	r0, [pc, #68]	@ (80082e8 <USBH_Process+0x30c>)
 80082a4:	f002 f806 	bl	800a2b4 <puts>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082a8:	e0e7      	b.n	800847a <USBH_Process+0x49e>
        phost->pActiveClass = NULL;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
 80082b6:	e02c      	b.n	8008312 <USBH_Process+0x336>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80082b8:	7bfa      	ldrb	r2, [r7, #15]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 80082c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c4:	791a      	ldrb	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d11d      	bne.n	800830c <USBH_Process+0x330>
            phost->pActiveClass = phost->pClass[idx];
 80082d0:	7bfa      	ldrb	r2, [r7, #15]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f502 7289 	add.w	r2, r2, #274	@ 0x112
 80082d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
            break;
 80082e2:	e019      	b.n	8008318 <USBH_Process+0x33c>
 80082e4:	0800af10 	.word	0x0800af10
 80082e8:	0800aedc 	.word	0x0800aedc
 80082ec:	0800af28 	.word	0x0800af28
 80082f0:	0800af44 	.word	0x0800af44
 80082f4:	0800af70 	.word	0x0800af70
 80082f8:	0800af84 	.word	0x0800af84
 80082fc:	0800afac 	.word	0x0800afac
 8008300:	0800afc8 	.word	0x0800afc8
 8008304:	0800afe8 	.word	0x0800afe8
 8008308:	0800b014 	.word	0x0800b014
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	3301      	adds	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0cf      	beq.n	80082b8 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d02c      	beq.n	800837c <USBH_Process+0x3a0>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d114      	bne.n	800835e <USBH_Process+0x382>
            phost->gState = HOST_CLASS_REQUEST;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2206      	movs	r2, #6
 8008338:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	484f      	ldr	r0, [pc, #316]	@ (8008484 <USBH_Process+0x4a8>)
 8008346:	f001 ff4d 	bl	800a1e4 <iprintf>
 800834a:	484f      	ldr	r0, [pc, #316]	@ (8008488 <USBH_Process+0x4ac>)
 800834c:	f001 ffb2 	bl	800a2b4 <puts>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008356:	2103      	movs	r1, #3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4798      	blx	r3
      break;
 800835c:	e08d      	b.n	800847a <USBH_Process+0x49e>
            phost->gState = HOST_ABORT_STATE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	220d      	movs	r2, #13
 8008362:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4619      	mov	r1, r3
 800836e:	4847      	ldr	r0, [pc, #284]	@ (800848c <USBH_Process+0x4b0>)
 8008370:	f001 ff38 	bl	800a1e4 <iprintf>
 8008374:	4844      	ldr	r0, [pc, #272]	@ (8008488 <USBH_Process+0x4ac>)
 8008376:	f001 ff9d 	bl	800a2b4 <puts>
      break;
 800837a:	e07e      	b.n	800847a <USBH_Process+0x49e>
          phost->gState = HOST_ABORT_STATE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	220d      	movs	r2, #13
 8008380:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8008382:	4843      	ldr	r0, [pc, #268]	@ (8008490 <USBH_Process+0x4b4>)
 8008384:	f001 ff2e 	bl	800a1e4 <iprintf>
 8008388:	483f      	ldr	r0, [pc, #252]	@ (8008488 <USBH_Process+0x4ac>)
 800838a:	f001 ff93 	bl	800a2b4 <puts>
      break;
 800838e:	e074      	b.n	800847a <USBH_Process+0x49e>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d017      	beq.n	80083ca <USBH_Process+0x3ee>
      {
        status = phost->pActiveClass->Requests(phost);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	4798      	blx	r3
 80083a6:	4603      	mov	r3, r0
 80083a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d103      	bne.n	80083ba <USBH_Process+0x3de>
        {
          phost->gState = HOST_CLASS;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	220b      	movs	r2, #11
 80083b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083b8:	e05c      	b.n	8008474 <USBH_Process+0x498>
        else if (status == USBH_FAIL)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d158      	bne.n	8008474 <USBH_Process+0x498>
          phost->gState = HOST_ABORT_STATE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	220d      	movs	r2, #13
 80083c6:	701a      	strb	r2, [r3, #0]
      break;
 80083c8:	e054      	b.n	8008474 <USBH_Process+0x498>
        phost->gState = HOST_ABORT_STATE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220d      	movs	r2, #13
 80083ce:	701a      	strb	r2, [r3, #0]
      break;
 80083d0:	e050      	b.n	8008474 <USBH_Process+0x498>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d04d      	beq.n	8008478 <USBH_Process+0x49c>
      {
        phost->pActiveClass->BgndProcess(phost);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
      }
      break;
 80083e8:	e046      	b.n	8008478 <USBH_Process+0x49c>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fca0 	bl	8007d38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <USBH_Process+0x43a>
      {
        phost->pActiveClass->DeInit(phost);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	f8c3 244c 	str.w	r2, [r3, #1100]	@ 0x44c
      }

      if (phost->pUser != NULL)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d005      	beq.n	800842c <USBH_Process+0x450>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8008426:	2105      	movs	r1, #5
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800842c:	4819      	ldr	r0, [pc, #100]	@ (8008494 <USBH_Process+0x4b8>)
 800842e:	f001 fed9 	bl	800a1e4 <iprintf>
 8008432:	4815      	ldr	r0, [pc, #84]	@ (8008488 <USBH_Process+0x4ac>)
 8008434:	f001 ff3e 	bl	800a2b4 <puts>

      if (phost->device.is_ReEnumerated == 1U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d107      	bne.n	8008454 <USBH_Process+0x478>
      {
        phost->device.is_ReEnumerated = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fdb5 	bl	8007fbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008452:	e012      	b.n	800847a <USBH_Process+0x49e>
        (void)USBH_LL_Start(phost);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 fbaf 	bl	8009bb8 <USBH_LL_Start>
      break;
 800845a:	e00e      	b.n	800847a <USBH_Process+0x49e>

    case HOST_ABORT_STATE:
    default :
      break;
 800845c:	bf00      	nop
 800845e:	e00c      	b.n	800847a <USBH_Process+0x49e>
      break;
 8008460:	bf00      	nop
 8008462:	e00a      	b.n	800847a <USBH_Process+0x49e>
      break;
 8008464:	bf00      	nop
 8008466:	e008      	b.n	800847a <USBH_Process+0x49e>
    break;
 8008468:	bf00      	nop
 800846a:	e006      	b.n	800847a <USBH_Process+0x49e>
      break;
 800846c:	bf00      	nop
 800846e:	e004      	b.n	800847a <USBH_Process+0x49e>
      break;
 8008470:	bf00      	nop
 8008472:	e002      	b.n	800847a <USBH_Process+0x49e>
      break;
 8008474:	bf00      	nop
 8008476:	e000      	b.n	800847a <USBH_Process+0x49e>
      break;
 8008478:	bf00      	nop
  }
  return USBH_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	0800b034 	.word	0x0800b034
 8008488:	0800aedc 	.word	0x0800aedc
 800848c:	0800b048 	.word	0x0800b048
 8008490:	0800b068 	.word	0x0800b068
 8008494:	0800b090 	.word	0x0800b090

08008498 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af04      	add	r7, sp, #16
 800849e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	785b      	ldrb	r3, [r3, #1]
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	f200 8248 	bhi.w	8008942 <USBH_HandleEnum+0x4aa>
 80084b2:	a201      	add	r2, pc, #4	@ (adr r2, 80084b8 <USBH_HandleEnum+0x20>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084d9 	.word	0x080084d9
 80084bc:	0800859f 	.word	0x0800859f
 80084c0:	0800863d 	.word	0x0800863d
 80084c4:	080086e7 	.word	0x080086e7
 80084c8:	0800875d 	.word	0x0800875d
 80084cc:	080087d9 	.word	0x080087d9
 80084d0:	08008865 	.word	0x08008865
 80084d4:	080088d7 	.word	0x080088d7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80084d8:	2108      	movs	r1, #8
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fae4 	bl	8008aa8 <USBH_Get_DevDesc>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d12e      	bne.n	8008548 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7919      	ldrb	r1, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800850e:	9202      	str	r2, [sp, #8]
 8008510:	2200      	movs	r2, #0
 8008512:	9201      	str	r2, [sp, #4]
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4603      	mov	r3, r0
 8008518:	2280      	movs	r2, #128	@ 0x80
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 f974 	bl	8009808 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	7959      	ldrb	r1, [r3, #5]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008534:	9202      	str	r2, [sp, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	9201      	str	r2, [sp, #4]
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	4603      	mov	r3, r0
 800853e:	2200      	movs	r2, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 f961 	bl	8009808 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008546:	e1fe      	b.n	8008946 <USBH_HandleEnum+0x4ae>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	2b03      	cmp	r3, #3
 800854c:	f040 81fb 	bne.w	8008946 <USBH_HandleEnum+0x4ae>
        phost->device.EnumCnt++;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008556:	3301      	adds	r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008566:	2b03      	cmp	r3, #3
 8008568:	d909      	bls.n	800857e <USBH_HandleEnum+0xe6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800856a:	48ac      	ldr	r0, [pc, #688]	@ (800881c <USBH_HandleEnum+0x384>)
 800856c:	f001 fe3a 	bl	800a1e4 <iprintf>
 8008570:	48ab      	ldr	r0, [pc, #684]	@ (8008820 <USBH_HandleEnum+0x388>)
 8008572:	f001 fe9f 	bl	800a2b4 <puts>
          phost->gState = HOST_ABORT_STATE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	220d      	movs	r2, #13
 800857a:	701a      	strb	r2, [r3, #0]
      break;
 800857c:	e1e3      	b.n	8008946 <USBH_HandleEnum+0x4ae>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	795b      	ldrb	r3, [r3, #5]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f990 	bl	80098aa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	791b      	ldrb	r3, [r3, #4]
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f001 f98a 	bl	80098aa <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
      break;
 800859c:	e1d3      	b.n	8008946 <USBH_HandleEnum+0x4ae>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800859e:	2112      	movs	r1, #18
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa81 	bl	8008aa8 <USBH_Get_DevDesc>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d117      	bne.n	80085e0 <USBH_HandleEnum+0x148>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b3 3330 	ldrh.w	r3, [r3, #816]	@ 0x330
 80085b6:	4619      	mov	r1, r3
 80085b8:	489a      	ldr	r0, [pc, #616]	@ (8008824 <USBH_HandleEnum+0x38c>)
 80085ba:	f001 fe13 	bl	800a1e4 <iprintf>
 80085be:	4898      	ldr	r0, [pc, #608]	@ (8008820 <USBH_HandleEnum+0x388>)
 80085c0:	f001 fe78 	bl	800a2b4 <puts>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 80085ca:	4619      	mov	r1, r3
 80085cc:	4896      	ldr	r0, [pc, #600]	@ (8008828 <USBH_HandleEnum+0x390>)
 80085ce:	f001 fe09 	bl	800a1e4 <iprintf>
 80085d2:	4893      	ldr	r0, [pc, #588]	@ (8008820 <USBH_HandleEnum+0x388>)
 80085d4:	f001 fe6e 	bl	800a2b4 <puts>

        phost->EnumState = ENUM_SET_ADDR;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085de:	e1b4      	b.n	800894a <USBH_HandleEnum+0x4b2>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	f040 81b1 	bne.w	800894a <USBH_HandleEnum+0x4b2>
        phost->device.EnumCnt++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085ee:	3301      	adds	r3, #1
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d909      	bls.n	8008616 <USBH_HandleEnum+0x17e>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008602:	4886      	ldr	r0, [pc, #536]	@ (800881c <USBH_HandleEnum+0x384>)
 8008604:	f001 fdee 	bl	800a1e4 <iprintf>
 8008608:	4885      	ldr	r0, [pc, #532]	@ (8008820 <USBH_HandleEnum+0x388>)
 800860a:	f001 fe53 	bl	800a2b4 <puts>
          phost->gState = HOST_ABORT_STATE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	220d      	movs	r2, #13
 8008612:	701a      	strb	r2, [r3, #0]
      break;
 8008614:	e199      	b.n	800894a <USBH_HandleEnum+0x4b2>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	795b      	ldrb	r3, [r3, #5]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f944 	bl	80098aa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	791b      	ldrb	r3, [r3, #4]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f001 f93e 	bl	80098aa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
      break;
 800863a:	e186      	b.n	800894a <USBH_HandleEnum+0x4b2>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800863c:	2101      	movs	r1, #1
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 faf1 	bl	8008c26 <USBH_SetAddress>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d13a      	bne.n	80086c4 <USBH_HandleEnum+0x22c>
      {
        USBH_Delay(2U);
 800864e:	2002      	movs	r0, #2
 8008650:	f001 fc10 	bl	8009e74 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 8008662:	4619      	mov	r1, r3
 8008664:	4871      	ldr	r0, [pc, #452]	@ (800882c <USBH_HandleEnum+0x394>)
 8008666:	f001 fdbd 	bl	800a1e4 <iprintf>
 800866a:	486d      	ldr	r0, [pc, #436]	@ (8008820 <USBH_HandleEnum+0x388>)
 800866c:	f001 fe22 	bl	800a2b4 <puts>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2203      	movs	r2, #3
 8008674:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7919      	ldrb	r1, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800868a:	9202      	str	r2, [sp, #8]
 800868c:	2200      	movs	r2, #0
 800868e:	9201      	str	r2, [sp, #4]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4603      	mov	r3, r0
 8008694:	2280      	movs	r2, #128	@ 0x80
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 f8b6 	bl	8009808 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	7959      	ldrb	r1, [r3, #5]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086b0:	9202      	str	r2, [sp, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	9201      	str	r2, [sp, #4]
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4603      	mov	r3, r0
 80086ba:	2200      	movs	r2, #0
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 f8a3 	bl	8009808 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086c2:	e144      	b.n	800894e <USBH_HandleEnum+0x4b6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	f040 8141 	bne.w	800894e <USBH_HandleEnum+0x4b6>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80086cc:	4853      	ldr	r0, [pc, #332]	@ (800881c <USBH_HandleEnum+0x384>)
 80086ce:	f001 fd89 	bl	800a1e4 <iprintf>
 80086d2:	4853      	ldr	r0, [pc, #332]	@ (8008820 <USBH_HandleEnum+0x388>)
 80086d4:	f001 fdee 	bl	800a2b4 <puts>
        phost->gState = HOST_ABORT_STATE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	220d      	movs	r2, #13
 80086dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	705a      	strb	r2, [r3, #1]
      break;
 80086e4:	e133      	b.n	800894e <USBH_HandleEnum+0x4b6>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80086e6:	2109      	movs	r1, #9
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa09 	bl	8008b00 <USBH_Get_CfgDesc>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d103      	bne.n	8008700 <USBH_HandleEnum+0x268>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2204      	movs	r2, #4
 80086fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086fe:	e128      	b.n	8008952 <USBH_HandleEnum+0x4ba>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b03      	cmp	r3, #3
 8008704:	f040 8125 	bne.w	8008952 <USBH_HandleEnum+0x4ba>
        phost->device.EnumCnt++;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800870e:	3301      	adds	r3, #1
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800871e:	2b03      	cmp	r3, #3
 8008720:	d909      	bls.n	8008736 <USBH_HandleEnum+0x29e>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008722:	483e      	ldr	r0, [pc, #248]	@ (800881c <USBH_HandleEnum+0x384>)
 8008724:	f001 fd5e 	bl	800a1e4 <iprintf>
 8008728:	483d      	ldr	r0, [pc, #244]	@ (8008820 <USBH_HandleEnum+0x388>)
 800872a:	f001 fdc3 	bl	800a2b4 <puts>
          phost->gState = HOST_ABORT_STATE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	220d      	movs	r2, #13
 8008732:	701a      	strb	r2, [r3, #0]
      break;
 8008734:	e10d      	b.n	8008952 <USBH_HandleEnum+0x4ba>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	795b      	ldrb	r3, [r3, #5]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 f8b4 	bl	80098aa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	791b      	ldrb	r3, [r3, #4]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 f8ae 	bl	80098aa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	701a      	strb	r2, [r3, #0]
      break;
 800875a:	e0fa      	b.n	8008952 <USBH_HandleEnum+0x4ba>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f9cb 	bl	8008b00 <USBH_Get_CfgDesc>
 800876a:	4603      	mov	r3, r0
 800876c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <USBH_HandleEnum+0x2e4>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2205      	movs	r2, #5
 8008778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800877a:	e0ec      	b.n	8008956 <USBH_HandleEnum+0x4be>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b03      	cmp	r3, #3
 8008780:	f040 80e9 	bne.w	8008956 <USBH_HandleEnum+0x4be>
        phost->device.EnumCnt++;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800878a:	3301      	adds	r3, #1
 800878c:	b2da      	uxtb	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800879a:	2b03      	cmp	r3, #3
 800879c:	d909      	bls.n	80087b2 <USBH_HandleEnum+0x31a>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800879e:	481f      	ldr	r0, [pc, #124]	@ (800881c <USBH_HandleEnum+0x384>)
 80087a0:	f001 fd20 	bl	800a1e4 <iprintf>
 80087a4:	481e      	ldr	r0, [pc, #120]	@ (8008820 <USBH_HandleEnum+0x388>)
 80087a6:	f001 fd85 	bl	800a2b4 <puts>
          phost->gState = HOST_ABORT_STATE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	220d      	movs	r2, #13
 80087ae:	701a      	strb	r2, [r3, #0]
      break;
 80087b0:	e0d1      	b.n	8008956 <USBH_HandleEnum+0x4be>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	795b      	ldrb	r3, [r3, #5]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f001 f876 	bl	80098aa <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	791b      	ldrb	r3, [r3, #4]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 f870 	bl	80098aa <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
      break;
 80087d6:	e0be      	b.n	8008956 <USBH_HandleEnum+0x4be>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d036      	beq.n	8008850 <USBH_HandleEnum+0x3b8>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80087ee:	23ff      	movs	r3, #255	@ 0xff
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f9af 	bl	8008b54 <USBH_Get_StringDesc>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d119      	bne.n	8008834 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008806:	4619      	mov	r1, r3
 8008808:	4809      	ldr	r0, [pc, #36]	@ (8008830 <USBH_HandleEnum+0x398>)
 800880a:	f001 fceb 	bl	800a1e4 <iprintf>
 800880e:	4804      	ldr	r0, [pc, #16]	@ (8008820 <USBH_HandleEnum+0x388>)
 8008810:	f001 fd50 	bl	800a2b4 <puts>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2206      	movs	r2, #6
 8008818:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800881a:	e09e      	b.n	800895a <USBH_HandleEnum+0x4c2>
 800881c:	0800b0a8 	.word	0x0800b0a8
 8008820:	0800aedc 	.word	0x0800aedc
 8008824:	0800b0e8 	.word	0x0800b0e8
 8008828:	0800b0f4 	.word	0x0800b0f4
 800882c:	0800b100 	.word	0x0800b100
 8008830:	0800b118 	.word	0x0800b118
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	2b03      	cmp	r3, #3
 8008838:	f040 808f 	bne.w	800895a <USBH_HandleEnum+0x4c2>
          USBH_UsrLog("Manufacturer : N/A");
 800883c:	484c      	ldr	r0, [pc, #304]	@ (8008970 <USBH_HandleEnum+0x4d8>)
 800883e:	f001 fcd1 	bl	800a1e4 <iprintf>
 8008842:	484c      	ldr	r0, [pc, #304]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 8008844:	f001 fd36 	bl	800a2b4 <puts>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2206      	movs	r2, #6
 800884c:	705a      	strb	r2, [r3, #1]
      break;
 800884e:	e084      	b.n	800895a <USBH_HandleEnum+0x4c2>
        USBH_UsrLog("Manufacturer : N/A");
 8008850:	4847      	ldr	r0, [pc, #284]	@ (8008970 <USBH_HandleEnum+0x4d8>)
 8008852:	f001 fcc7 	bl	800a1e4 <iprintf>
 8008856:	4847      	ldr	r0, [pc, #284]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 8008858:	f001 fd2c 	bl	800a2b4 <puts>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2206      	movs	r2, #6
 8008860:	705a      	strb	r2, [r3, #1]
      break;
 8008862:	e07a      	b.n	800895a <USBH_HandleEnum+0x4c2>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800886a:	2b00      	cmp	r3, #0
 800886c:	d029      	beq.n	80088c2 <USBH_HandleEnum+0x42a>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800887a:	23ff      	movs	r3, #255	@ 0xff
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f969 	bl	8008b54 <USBH_Get_StringDesc>
 8008882:	4603      	mov	r3, r0
 8008884:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10d      	bne.n	80088a8 <USBH_HandleEnum+0x410>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008892:	4619      	mov	r1, r3
 8008894:	4838      	ldr	r0, [pc, #224]	@ (8008978 <USBH_HandleEnum+0x4e0>)
 8008896:	f001 fca5 	bl	800a1e4 <iprintf>
 800889a:	4836      	ldr	r0, [pc, #216]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 800889c:	f001 fd0a 	bl	800a2b4 <puts>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2207      	movs	r2, #7
 80088a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088a6:	e05a      	b.n	800895e <USBH_HandleEnum+0x4c6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d157      	bne.n	800895e <USBH_HandleEnum+0x4c6>
          USBH_UsrLog("Product : N/A");
 80088ae:	4833      	ldr	r0, [pc, #204]	@ (800897c <USBH_HandleEnum+0x4e4>)
 80088b0:	f001 fc98 	bl	800a1e4 <iprintf>
 80088b4:	482f      	ldr	r0, [pc, #188]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 80088b6:	f001 fcfd 	bl	800a2b4 <puts>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2207      	movs	r2, #7
 80088be:	705a      	strb	r2, [r3, #1]
      break;
 80088c0:	e04d      	b.n	800895e <USBH_HandleEnum+0x4c6>
        USBH_UsrLog("Product : N/A");
 80088c2:	482e      	ldr	r0, [pc, #184]	@ (800897c <USBH_HandleEnum+0x4e4>)
 80088c4:	f001 fc8e 	bl	800a1e4 <iprintf>
 80088c8:	482a      	ldr	r0, [pc, #168]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 80088ca:	f001 fcf3 	bl	800a2b4 <puts>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2207      	movs	r2, #7
 80088d2:	705a      	strb	r2, [r3, #1]
      break;
 80088d4:	e043      	b.n	800895e <USBH_HandleEnum+0x4c6>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d027      	beq.n	8008930 <USBH_HandleEnum+0x498>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80088ec:	23ff      	movs	r3, #255	@ 0xff
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f930 	bl	8008b54 <USBH_Get_StringDesc>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <USBH_HandleEnum+0x480>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008904:	4619      	mov	r1, r3
 8008906:	481e      	ldr	r0, [pc, #120]	@ (8008980 <USBH_HandleEnum+0x4e8>)
 8008908:	f001 fc6c 	bl	800a1e4 <iprintf>
 800890c:	4819      	ldr	r0, [pc, #100]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 800890e:	f001 fcd1 	bl	800a2b4 <puts>
          Status = USBH_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008916:	e024      	b.n	8008962 <USBH_HandleEnum+0x4ca>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008918:	7bbb      	ldrb	r3, [r7, #14]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d121      	bne.n	8008962 <USBH_HandleEnum+0x4ca>
          USBH_UsrLog("Serial Number : N/A");
 800891e:	4819      	ldr	r0, [pc, #100]	@ (8008984 <USBH_HandleEnum+0x4ec>)
 8008920:	f001 fc60 	bl	800a1e4 <iprintf>
 8008924:	4813      	ldr	r0, [pc, #76]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 8008926:	f001 fcc5 	bl	800a2b4 <puts>
          Status = USBH_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
      break;
 800892e:	e018      	b.n	8008962 <USBH_HandleEnum+0x4ca>
        USBH_UsrLog("Serial Number : N/A");
 8008930:	4814      	ldr	r0, [pc, #80]	@ (8008984 <USBH_HandleEnum+0x4ec>)
 8008932:	f001 fc57 	bl	800a1e4 <iprintf>
 8008936:	480f      	ldr	r0, [pc, #60]	@ (8008974 <USBH_HandleEnum+0x4dc>)
 8008938:	f001 fcbc 	bl	800a2b4 <puts>
        Status = USBH_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
      break;
 8008940:	e00f      	b.n	8008962 <USBH_HandleEnum+0x4ca>

    default:
      break;
 8008942:	bf00      	nop
 8008944:	e00e      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 8008946:	bf00      	nop
 8008948:	e00c      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 800894a:	bf00      	nop
 800894c:	e00a      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 800894e:	bf00      	nop
 8008950:	e008      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 8008952:	bf00      	nop
 8008954:	e006      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 8008956:	bf00      	nop
 8008958:	e004      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 800895a:	bf00      	nop
 800895c:	e002      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <USBH_HandleEnum+0x4cc>
      break;
 8008962:	bf00      	nop
  }
  return Status;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	0800b12c 	.word	0x0800b12c
 8008974:	0800aedc 	.word	0x0800aedc
 8008978:	0800b140 	.word	0x0800b140
 800897c:	0800b150 	.word	0x0800b150
 8008980:	0800b160 	.word	0x0800b160
 8008984:	0800b174 	.word	0x0800b174

08008988 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494
  USBH_HandleSof(phost);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f804 	bl	80089ca <USBH_HandleSof>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b0b      	cmp	r3, #11
 80089da:	d10a      	bne.n	80089f2 <USBH_HandleSof+0x28>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	@ 0x44c
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
  }
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008a0a:	bf00      	nop
}
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008a26:	bf00      	nop
}
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 f8b4 	bl	8009bee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	791b      	ldrb	r3, [r3, #4]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 ff0c 	bl	80098aa <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	795b      	ldrb	r3, [r3, #5]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 ff06 	bl	80098aa <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af02      	add	r7, sp, #8
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008ab4:	887b      	ldrh	r3, [r7, #2]
 8008ab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aba:	d901      	bls.n	8008ac0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e01b      	b.n	8008af8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008ac6:	887b      	ldrh	r3, [r7, #2]
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	4613      	mov	r3, r2
 8008acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f872 	bl	8008bbc <USBH_GetDescriptor>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ae8:	887a      	ldrh	r2, [r7, #2]
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f929 	bl	8008d44 <USBH_ParseDevDesc>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	331c      	adds	r3, #28
 8008b10:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008b12:	887b      	ldrh	r3, [r7, #2]
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b18:	d901      	bls.n	8008b1e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e016      	b.n	8008b4c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b1e:	887b      	ldrh	r3, [r7, #2]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b28:	2100      	movs	r1, #0
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f846 	bl	8008bbc <USBH_GetDescriptor>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d107      	bne.n	8008b4a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008b3a:	887b      	ldrh	r3, [r7, #2]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f9af 	bl	8008ea4 <USBH_ParseCfgDesc>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af02      	add	r7, sp, #8
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	607a      	str	r2, [r7, #4]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	460b      	mov	r3, r1
 8008b62:	72fb      	strb	r3, [r7, #11]
 8008b64:	4613      	mov	r3, r2
 8008b66:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008b68:	893b      	ldrh	r3, [r7, #8]
 8008b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b6e:	d802      	bhi.n	8008b76 <USBH_Get_StringDesc+0x22>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e01c      	b.n	8008bb4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008b82:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008b8a:	893b      	ldrh	r3, [r7, #8]
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	2100      	movs	r1, #0
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f812 	bl	8008bbc <USBH_GetDescriptor>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d107      	bne.n	8008bb2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ba8:	893a      	ldrh	r2, [r7, #8]
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fb8d 	bl	80092cc <USBH_ParseStringDesc>
  }

  return status;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	607b      	str	r3, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	72fb      	strb	r3, [r7, #11]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	789b      	ldrb	r3, [r3, #2]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d11c      	bne.n	8008c10 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008bd6:	7afb      	ldrb	r3, [r7, #11]
 8008bd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2206      	movs	r2, #6
 8008be6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	893a      	ldrh	r2, [r7, #8]
 8008bec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008bee:	893b      	ldrh	r3, [r7, #8]
 8008bf0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008bf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bf8:	d104      	bne.n	8008c04 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f240 4209 	movw	r2, #1033	@ 0x409
 8008c00:	829a      	strh	r2, [r3, #20]
 8008c02:	e002      	b.n	8008c0a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8b3a      	ldrh	r2, [r7, #24]
 8008c0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c10:	8b3b      	ldrh	r3, [r7, #24]
 8008c12:	461a      	mov	r2, r3
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 fba5 	bl	8009366 <USBH_CtlReq>
 8008c1c:	4603      	mov	r3, r0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	789b      	ldrb	r3, [r3, #2]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d10f      	bne.n	8008c5a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2205      	movs	r2, #5
 8008c44:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fb81 	bl	8009366 <USBH_CtlReq>
 8008c64:	4603      	mov	r3, r0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	789b      	ldrb	r3, [r3, #2]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d10e      	bne.n	8008ca0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2209      	movs	r2, #9
 8008c8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	887a      	ldrh	r2, [r7, #2]
 8008c92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb5e 	bl	8009366 <USBH_CtlReq>
 8008caa:	4603      	mov	r3, r0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	789b      	ldrb	r3, [r3, #2]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d10f      	bne.n	8008ce8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fb3a 	bl	8009366 <USBH_CtlReq>
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	789b      	ldrb	r3, [r3, #2]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d10f      	bne.n	8008d30 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d30:	2200      	movs	r2, #0
 8008d32:	2100      	movs	r1, #0
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fb16 	bl	8009366 <USBH_CtlReq>
 8008d3a:	4603      	mov	r3, r0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008d58:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008d64:	2302      	movs	r3, #2
 8008d66:	e094      	b.n	8008e92 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	785a      	ldrb	r2, [r3, #1]
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	3303      	adds	r3, #3
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	791a      	ldrb	r2, [r3, #4]
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	795a      	ldrb	r2, [r3, #5]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	799a      	ldrb	r2, [r3, #6]
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	79da      	ldrb	r2, [r3, #7]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d11b      	bne.n	8008dfe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	79db      	ldrb	r3, [r3, #7]
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	dc0f      	bgt.n	8008dee <USBH_ParseDevDesc+0xaa>
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	db0f      	blt.n	8008df2 <USBH_ParseDevDesc+0xae>
 8008dd2:	3b08      	subs	r3, #8
 8008dd4:	4a32      	ldr	r2, [pc, #200]	@ (8008ea0 <USBH_ParseDevDesc+0x15c>)
 8008dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bf14      	ite	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	2300      	moveq	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <USBH_ParseDevDesc+0xb6>
 8008dec:	e001      	b.n	8008df2 <USBH_ParseDevDesc+0xae>
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d003      	beq.n	8008dfa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2208      	movs	r2, #8
 8008df6:	71da      	strb	r2, [r3, #7]
        break;
 8008df8:	e000      	b.n	8008dfc <USBH_ParseDevDesc+0xb8>
        break;
 8008dfa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008dfc:	e00e      	b.n	8008e1c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d107      	bne.n	8008e18 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	79db      	ldrb	r3, [r3, #7]
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d005      	beq.n	8008e1c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2208      	movs	r2, #8
 8008e14:	71da      	strb	r2, [r3, #7]
 8008e16:	e001      	b.n	8008e1c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	d936      	bls.n	8008e90 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	3308      	adds	r3, #8
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	3309      	adds	r3, #9
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	330a      	adds	r3, #10
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	330b      	adds	r3, #11
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	330d      	adds	r3, #13
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	7b9a      	ldrb	r2, [r3, #14]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	7bda      	ldrb	r2, [r3, #15]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	7c1a      	ldrb	r2, [r3, #16]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	7c5a      	ldrb	r2, [r3, #17]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	01000101 	.word	0x01000101

08008ea4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08c      	sub	sp, #48	@ 0x30
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008eb8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e0da      	b.n	800908c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d002      	beq.n	8008ee8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	2209      	movs	r2, #9
 8008ee6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	785a      	ldrb	r2, [r3, #1]
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	3302      	adds	r3, #2
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	3303      	adds	r3, #3
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f12:	bf28      	it	cs
 8008f14:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	791a      	ldrb	r2, [r3, #4]
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	795a      	ldrb	r2, [r3, #5]
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	799a      	ldrb	r2, [r3, #6]
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	79da      	ldrb	r2, [r3, #7]
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	7a1a      	ldrb	r2, [r3, #8]
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	2b09      	cmp	r3, #9
 8008f4a:	f240 809d 	bls.w	8009088 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f4e:	2309      	movs	r3, #9
 8008f50:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f56:	e081      	b.n	800905c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f58:	f107 0316 	add.w	r3, r7, #22
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f60:	f000 f9e7 	bl	8009332 <USBH_GetNextDesc>
 8008f64:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f68:	785b      	ldrb	r3, [r3, #1]
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d176      	bne.n	800905c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b09      	cmp	r3, #9
 8008f74:	d002      	beq.n	8008f7c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f78:	2209      	movs	r2, #9
 8008f7a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f80:	221a      	movs	r2, #26
 8008f82:	fb02 f303 	mul.w	r3, r2, r3
 8008f86:	3308      	adds	r3, #8
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f92:	69f8      	ldr	r0, [r7, #28]
 8008f94:	f000 f87e 	bl	8009094 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008fa2:	e043      	b.n	800902c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fa4:	f107 0316 	add.w	r3, r7, #22
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fac:	f000 f9c1 	bl	8009332 <USBH_GetNextDesc>
 8008fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d138      	bne.n	800902c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	795b      	ldrb	r3, [r3, #5]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d113      	bne.n	8008fea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d003      	beq.n	8008fd2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	799b      	ldrb	r3, [r3, #6]
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d10b      	bne.n	8008fea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	79db      	ldrb	r3, [r3, #7]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10b      	bne.n	8008ff2 <USBH_ParseCfgDesc+0x14e>
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b09      	cmp	r3, #9
 8008fe0:	d007      	beq.n	8008ff2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	2209      	movs	r2, #9
 8008fe6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fe8:	e003      	b.n	8008ff2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	2207      	movs	r2, #7
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e000      	b.n	8008ff4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ff2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ff8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ffc:	3201      	adds	r2, #1
 8008ffe:	00d2      	lsls	r2, r2, #3
 8009000:	211a      	movs	r1, #26
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	4413      	add	r3, r2
 8009008:	3308      	adds	r3, #8
 800900a:	6a3a      	ldr	r2, [r7, #32]
 800900c:	4413      	add	r3, r2
 800900e:	3304      	adds	r3, #4
 8009010:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009014:	69b9      	ldr	r1, [r7, #24]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 f870 	bl	80090fc <USBH_ParseEPDesc>
 800901c:	4603      	mov	r3, r0
 800901e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009022:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009026:	3301      	adds	r3, #1
 8009028:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	791b      	ldrb	r3, [r3, #4]
 8009030:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009034:	429a      	cmp	r2, r3
 8009036:	d204      	bcs.n	8009042 <USBH_ParseCfgDesc+0x19e>
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	885a      	ldrh	r2, [r3, #2]
 800903c:	8afb      	ldrh	r3, [r7, #22]
 800903e:	429a      	cmp	r2, r3
 8009040:	d8b0      	bhi.n	8008fa4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800904a:	429a      	cmp	r2, r3
 800904c:	d201      	bcs.n	8009052 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800904e:	2303      	movs	r3, #3
 8009050:	e01c      	b.n	800908c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009056:	3301      	adds	r3, #1
 8009058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800905c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009060:	2b09      	cmp	r3, #9
 8009062:	d805      	bhi.n	8009070 <USBH_ParseCfgDesc+0x1cc>
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	885a      	ldrh	r2, [r3, #2]
 8009068:	8afb      	ldrh	r3, [r7, #22]
 800906a:	429a      	cmp	r2, r3
 800906c:	f63f af74 	bhi.w	8008f58 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	791b      	ldrb	r3, [r3, #4]
 8009074:	2b0a      	cmp	r3, #10
 8009076:	bf28      	it	cs
 8009078:	230a      	movcs	r3, #10
 800907a:	b2db      	uxtb	r3, r3
 800907c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009080:	429a      	cmp	r2, r3
 8009082:	d201      	bcs.n	8009088 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009084:	2303      	movs	r3, #3
 8009086:	e001      	b.n	800908c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009088:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800908c:	4618      	mov	r0, r3
 800908e:	3730      	adds	r7, #48	@ 0x30
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	785a      	ldrb	r2, [r3, #1]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	789a      	ldrb	r2, [r3, #2]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	78da      	ldrb	r2, [r3, #3]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	3304      	adds	r3, #4
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	bf28      	it	cs
 80090c8:	2302      	movcs	r3, #2
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	795a      	ldrb	r2, [r3, #5]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	799a      	ldrb	r2, [r3, #6]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	79da      	ldrb	r2, [r3, #7]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	7a1a      	ldrb	r2, [r3, #8]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	721a      	strb	r2, [r3, #8]
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	781a      	ldrb	r2, [r3, #0]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	785a      	ldrb	r2, [r3, #1]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	789a      	ldrb	r2, [r3, #2]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	78da      	ldrb	r2, [r3, #3]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3304      	adds	r3, #4
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3305      	adds	r3, #5
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	b29b      	uxth	r3, r3
 800913e:	4313      	orrs	r3, r2
 8009140:	b29a      	uxth	r2, r3
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	799a      	ldrb	r2, [r3, #6]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	889b      	ldrh	r3, [r3, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800915a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800915e:	d804      	bhi.n	800916a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009168:	d901      	bls.n	800916e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800916a:	2303      	movs	r3, #3
 800916c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009174:	2b00      	cmp	r3, #0
 8009176:	d136      	bne.n	80091e6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	78db      	ldrb	r3, [r3, #3]
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d108      	bne.n	8009196 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	889b      	ldrh	r3, [r3, #4]
 8009188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800918c:	f240 8097 	bls.w	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009190:	2303      	movs	r3, #3
 8009192:	75fb      	strb	r3, [r7, #23]
 8009194:	e093      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	78db      	ldrb	r3, [r3, #3]
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d107      	bne.n	80091b2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	889b      	ldrh	r3, [r3, #4]
 80091a6:	2b40      	cmp	r3, #64	@ 0x40
 80091a8:	f240 8089 	bls.w	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80091ac:	2303      	movs	r3, #3
 80091ae:	75fb      	strb	r3, [r7, #23]
 80091b0:	e085      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	78db      	ldrb	r3, [r3, #3]
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d005      	beq.n	80091ca <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	78db      	ldrb	r3, [r3, #3]
 80091c2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d10a      	bne.n	80091e0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	799b      	ldrb	r3, [r3, #6]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <USBH_ParseEPDesc+0xde>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	799b      	ldrb	r3, [r3, #6]
 80091d6:	2b10      	cmp	r3, #16
 80091d8:	d970      	bls.n	80092bc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80091da:	2303      	movs	r3, #3
 80091dc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091de:	e06d      	b.n	80092bc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80091e0:	2303      	movs	r3, #3
 80091e2:	75fb      	strb	r3, [r7, #23]
 80091e4:	e06b      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d13c      	bne.n	800926a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	78db      	ldrb	r3, [r3, #3]
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d005      	beq.n	8009208 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	78db      	ldrb	r3, [r3, #3]
 8009200:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009204:	2b00      	cmp	r3, #0
 8009206:	d106      	bne.n	8009216 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	889b      	ldrh	r3, [r3, #4]
 800920c:	2b40      	cmp	r3, #64	@ 0x40
 800920e:	d956      	bls.n	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009210:	2303      	movs	r3, #3
 8009212:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009214:	e053      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	78db      	ldrb	r3, [r3, #3]
 800921a:	f003 0303 	and.w	r3, r3, #3
 800921e:	2b01      	cmp	r3, #1
 8009220:	d10e      	bne.n	8009240 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	799b      	ldrb	r3, [r3, #6]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d007      	beq.n	800923a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800922e:	2b10      	cmp	r3, #16
 8009230:	d803      	bhi.n	800923a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009236:	2b40      	cmp	r3, #64	@ 0x40
 8009238:	d941      	bls.n	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800923a:	2303      	movs	r3, #3
 800923c:	75fb      	strb	r3, [r7, #23]
 800923e:	e03e      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	78db      	ldrb	r3, [r3, #3]
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	2b03      	cmp	r3, #3
 800924a:	d10b      	bne.n	8009264 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	799b      	ldrb	r3, [r3, #6]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <USBH_ParseEPDesc+0x162>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	889b      	ldrh	r3, [r3, #4]
 8009258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800925c:	d32f      	bcc.n	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800925e:	2303      	movs	r3, #3
 8009260:	75fb      	strb	r3, [r7, #23]
 8009262:	e02c      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009264:	2303      	movs	r3, #3
 8009266:	75fb      	strb	r3, [r7, #23]
 8009268:	e029      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009270:	2b02      	cmp	r3, #2
 8009272:	d120      	bne.n	80092b6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	78db      	ldrb	r3, [r3, #3]
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d106      	bne.n	800928e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	889b      	ldrh	r3, [r3, #4]
 8009284:	2b08      	cmp	r3, #8
 8009286:	d01a      	beq.n	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009288:	2303      	movs	r3, #3
 800928a:	75fb      	strb	r3, [r7, #23]
 800928c:	e017      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	78db      	ldrb	r3, [r3, #3]
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	2b03      	cmp	r3, #3
 8009298:	d10a      	bne.n	80092b0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	799b      	ldrb	r3, [r3, #6]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <USBH_ParseEPDesc+0x1ae>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	889b      	ldrh	r3, [r3, #4]
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	d909      	bls.n	80092be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092aa:	2303      	movs	r3, #3
 80092ac:	75fb      	strb	r3, [r7, #23]
 80092ae:	e006      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80092b0:	2303      	movs	r3, #3
 80092b2:	75fb      	strb	r3, [r7, #23]
 80092b4:	e003      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092b6:	2303      	movs	r3, #3
 80092b8:	75fb      	strb	r3, [r7, #23]
 80092ba:	e000      	b.n	80092be <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80092bc:	bf00      	nop
  }

  return status;
 80092be:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d120      	bne.n	8009326 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	1e9a      	subs	r2, r3, #2
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	4293      	cmp	r3, r2
 80092ee:	bf28      	it	cs
 80092f0:	4613      	movcs	r3, r2
 80092f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3302      	adds	r3, #2
 80092f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80092fa:	2300      	movs	r3, #0
 80092fc:	82fb      	strh	r3, [r7, #22]
 80092fe:	e00b      	b.n	8009318 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009300:	8afb      	ldrh	r3, [r7, #22]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	3301      	adds	r3, #1
 8009310:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009312:	8afb      	ldrh	r3, [r7, #22]
 8009314:	3302      	adds	r3, #2
 8009316:	82fb      	strh	r3, [r7, #22]
 8009318:	8afa      	ldrh	r2, [r7, #22]
 800931a:	8abb      	ldrh	r3, [r7, #20]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3ef      	bcc.n	8009300 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2200      	movs	r2, #0
 8009324:	701a      	strb	r2, [r3, #0]
  }
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009332:	b480      	push	{r7}
 8009334:	b085      	sub	sp, #20
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7812      	ldrb	r2, [r2, #0]
 8009344:	4413      	add	r3, r2
 8009346:	b29a      	uxth	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4413      	add	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009358:	68fb      	ldr	r3, [r7, #12]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	4613      	mov	r3, r2
 8009372:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009374:	2301      	movs	r3, #1
 8009376:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	789b      	ldrb	r3, [r3, #2]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d002      	beq.n	8009386 <USBH_CtlReq+0x20>
 8009380:	2b02      	cmp	r3, #2
 8009382:	d00f      	beq.n	80093a4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009384:	e027      	b.n	80093d6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	88fa      	ldrh	r2, [r7, #6]
 8009390:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2201      	movs	r2, #1
 8009396:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2202      	movs	r2, #2
 800939c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
      break;
 80093a2:	e018      	b.n	80093d6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f81b 	bl	80093e0 <USBH_HandleControl>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <USBH_CtlReq+0x54>
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d106      	bne.n	80093c8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2201      	movs	r2, #1
 80093be:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	761a      	strb	r2, [r3, #24]
      break;
 80093c6:	e005      	b.n	80093d4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d102      	bne.n	80093d4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	709a      	strb	r2, [r3, #2]
      break;
 80093d4:	bf00      	nop
  }
  return status;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7e1b      	ldrb	r3, [r3, #24]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b0a      	cmp	r3, #10
 80093f8:	f200 8156 	bhi.w	80096a8 <USBH_HandleControl+0x2c8>
 80093fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <USBH_HandleControl+0x24>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	08009431 	.word	0x08009431
 8009408:	0800944b 	.word	0x0800944b
 800940c:	080094b5 	.word	0x080094b5
 8009410:	080094db 	.word	0x080094db
 8009414:	08009513 	.word	0x08009513
 8009418:	0800953d 	.word	0x0800953d
 800941c:	0800958f 	.word	0x0800958f
 8009420:	080095b1 	.word	0x080095b1
 8009424:	080095ed 	.word	0x080095ed
 8009428:	08009613 	.word	0x08009613
 800942c:	08009651 	.word	0x08009651
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f103 0110 	add.w	r1, r3, #16
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	795b      	ldrb	r3, [r3, #5]
 800943a:	461a      	mov	r2, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f943 	bl	80096c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2202      	movs	r2, #2
 8009446:	761a      	strb	r2, [r3, #24]
      break;
 8009448:	e139      	b.n	80096be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	795b      	ldrb	r3, [r3, #5]
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fcbb 	bl	8009dcc <USBH_LL_GetURBState>
 8009456:	4603      	mov	r3, r0
 8009458:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d11e      	bne.n	800949e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7c1b      	ldrb	r3, [r3, #16]
 8009464:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009468:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	8adb      	ldrh	r3, [r3, #22]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009472:	7b7b      	ldrb	r3, [r7, #13]
 8009474:	2b80      	cmp	r3, #128	@ 0x80
 8009476:	d103      	bne.n	8009480 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2203      	movs	r2, #3
 800947c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800947e:	e115      	b.n	80096ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2205      	movs	r2, #5
 8009484:	761a      	strb	r2, [r3, #24]
      break;
 8009486:	e111      	b.n	80096ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009488:	7b7b      	ldrb	r3, [r7, #13]
 800948a:	2b80      	cmp	r3, #128	@ 0x80
 800948c:	d103      	bne.n	8009496 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2209      	movs	r2, #9
 8009492:	761a      	strb	r2, [r3, #24]
      break;
 8009494:	e10a      	b.n	80096ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2207      	movs	r2, #7
 800949a:	761a      	strb	r2, [r3, #24]
      break;
 800949c:	e106      	b.n	80096ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d003      	beq.n	80094ac <USBH_HandleControl+0xcc>
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	f040 8100 	bne.w	80096ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	220b      	movs	r2, #11
 80094b0:	761a      	strb	r2, [r3, #24]
      break;
 80094b2:	e0fb      	b.n	80096ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6899      	ldr	r1, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	899a      	ldrh	r2, [r3, #12]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	791b      	ldrb	r3, [r3, #4]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f93a 	bl	8009746 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2204      	movs	r2, #4
 80094d6:	761a      	strb	r2, [r3, #24]
      break;
 80094d8:	e0f1      	b.n	80096be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	791b      	ldrb	r3, [r3, #4]
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc73 	bl	8009dcc <USBH_LL_GetURBState>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d102      	bne.n	80094f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2209      	movs	r2, #9
 80094f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	2b05      	cmp	r3, #5
 80094fa:	d102      	bne.n	8009502 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80094fc:	2303      	movs	r3, #3
 80094fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009500:	e0d6      	b.n	80096b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009502:	7bbb      	ldrb	r3, [r7, #14]
 8009504:	2b04      	cmp	r3, #4
 8009506:	f040 80d3 	bne.w	80096b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	220b      	movs	r2, #11
 800950e:	761a      	strb	r2, [r3, #24]
      break;
 8009510:	e0ce      	b.n	80096b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6899      	ldr	r1, [r3, #8]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	899a      	ldrh	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	795b      	ldrb	r3, [r3, #5]
 800951e:	2001      	movs	r0, #1
 8009520:	9000      	str	r0, [sp, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f8ea 	bl	80096fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800952e:	b29a      	uxth	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2206      	movs	r2, #6
 8009538:	761a      	strb	r2, [r3, #24]
      break;
 800953a:	e0c0      	b.n	80096be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	795b      	ldrb	r3, [r3, #5]
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fc42 	bl	8009dcc <USBH_LL_GetURBState>
 8009548:	4603      	mov	r3, r0
 800954a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d103      	bne.n	800955a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2207      	movs	r2, #7
 8009556:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009558:	e0ac      	b.n	80096b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	2b05      	cmp	r3, #5
 800955e:	d105      	bne.n	800956c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	220c      	movs	r2, #12
 8009564:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009566:	2303      	movs	r3, #3
 8009568:	73fb      	strb	r3, [r7, #15]
      break;
 800956a:	e0a3      	b.n	80096b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d103      	bne.n	800957a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2205      	movs	r2, #5
 8009576:	761a      	strb	r2, [r3, #24]
      break;
 8009578:	e09c      	b.n	80096b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b04      	cmp	r3, #4
 800957e:	f040 8099 	bne.w	80096b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	220b      	movs	r2, #11
 8009586:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009588:	2302      	movs	r3, #2
 800958a:	73fb      	strb	r3, [r7, #15]
      break;
 800958c:	e092      	b.n	80096b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	791b      	ldrb	r3, [r3, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f8d5 	bl	8009746 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2208      	movs	r2, #8
 80095ac:	761a      	strb	r2, [r3, #24]

      break;
 80095ae:	e086      	b.n	80096be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	791b      	ldrb	r3, [r3, #4]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fc08 	bl	8009dcc <USBH_LL_GetURBState>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d105      	bne.n	80095d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	220d      	movs	r2, #13
 80095ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095d0:	e072      	b.n	80096b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d103      	bne.n	80095e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	220b      	movs	r2, #11
 80095dc:	761a      	strb	r2, [r3, #24]
      break;
 80095de:	e06b      	b.n	80096b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	d168      	bne.n	80096b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80095e6:	2303      	movs	r3, #3
 80095e8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ea:	e065      	b.n	80096b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	795b      	ldrb	r3, [r3, #5]
 80095f0:	2201      	movs	r2, #1
 80095f2:	9200      	str	r2, [sp, #0]
 80095f4:	2200      	movs	r2, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f87f 	bl	80096fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 8009604:	b29a      	uxth	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	220a      	movs	r2, #10
 800960e:	761a      	strb	r2, [r3, #24]
      break;
 8009610:	e055      	b.n	80096be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	795b      	ldrb	r3, [r3, #5]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fbd7 	bl	8009dcc <USBH_LL_GetURBState>
 800961e:	4603      	mov	r3, r0
 8009620:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009622:	7bbb      	ldrb	r3, [r7, #14]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d105      	bne.n	8009634 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	220d      	movs	r2, #13
 8009630:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009632:	e043      	b.n	80096bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009634:	7bbb      	ldrb	r3, [r7, #14]
 8009636:	2b02      	cmp	r3, #2
 8009638:	d103      	bne.n	8009642 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2209      	movs	r2, #9
 800963e:	761a      	strb	r2, [r3, #24]
      break;
 8009640:	e03c      	b.n	80096bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	2b04      	cmp	r3, #4
 8009646:	d139      	bne.n	80096bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	220b      	movs	r2, #11
 800964c:	761a      	strb	r2, [r3, #24]
      break;
 800964e:	e035      	b.n	80096bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7e5b      	ldrb	r3, [r3, #25]
 8009654:	3301      	adds	r3, #1
 8009656:	b2da      	uxtb	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	765a      	strb	r2, [r3, #25]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	7e5b      	ldrb	r3, [r3, #25]
 8009660:	2b0f      	cmp	r3, #15
 8009662:	d806      	bhi.n	8009672 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009670:	e025      	b.n	80096be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 8009678:	2106      	movs	r1, #6
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	795b      	ldrb	r3, [r3, #5]
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f90d 	bl	80098aa <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	791b      	ldrb	r3, [r3, #4]
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f907 	bl	80098aa <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80096a2:	2302      	movs	r3, #2
 80096a4:	73fb      	strb	r3, [r7, #15]
      break;
 80096a6:	e00a      	b.n	80096be <USBH_HandleControl+0x2de>

    default:
      break;
 80096a8:	bf00      	nop
 80096aa:	e008      	b.n	80096be <USBH_HandleControl+0x2de>
      break;
 80096ac:	bf00      	nop
 80096ae:	e006      	b.n	80096be <USBH_HandleControl+0x2de>
      break;
 80096b0:	bf00      	nop
 80096b2:	e004      	b.n	80096be <USBH_HandleControl+0x2de>
      break;
 80096b4:	bf00      	nop
 80096b6:	e002      	b.n	80096be <USBH_HandleControl+0x2de>
      break;
 80096b8:	bf00      	nop
 80096ba:	e000      	b.n	80096be <USBH_HandleControl+0x2de>
      break;
 80096bc:	bf00      	nop
  }

  return status;
 80096be:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096d6:	79f9      	ldrb	r1, [r7, #7]
 80096d8:	2300      	movs	r3, #0
 80096da:	9303      	str	r3, [sp, #12]
 80096dc:	2308      	movs	r3, #8
 80096de:	9302      	str	r3, [sp, #8]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	9301      	str	r3, [sp, #4]
 80096e4:	2300      	movs	r3, #0
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2300      	movs	r3, #0
 80096ea:	2200      	movs	r2, #0
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fb3c 	bl	8009d6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af04      	add	r7, sp, #16
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	460b      	mov	r3, r1
 800970c:	80fb      	strh	r3, [r7, #6]
 800970e:	4613      	mov	r3, r2
 8009710:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009720:	7979      	ldrb	r1, [r7, #5]
 8009722:	7e3b      	ldrb	r3, [r7, #24]
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	9302      	str	r3, [sp, #8]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2301      	movs	r3, #1
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 fb17 	bl	8009d6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b088      	sub	sp, #32
 800974a:	af04      	add	r7, sp, #16
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	4611      	mov	r1, r2
 8009752:	461a      	mov	r2, r3
 8009754:	460b      	mov	r3, r1
 8009756:	80fb      	strh	r3, [r7, #6]
 8009758:	4613      	mov	r3, r2
 800975a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800975c:	7979      	ldrb	r1, [r7, #5]
 800975e:	2300      	movs	r3, #0
 8009760:	9303      	str	r3, [sp, #12]
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	9302      	str	r3, [sp, #8]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	2301      	movs	r3, #1
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	2300      	movs	r3, #0
 8009770:	2201      	movs	r2, #1
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 faf9 	bl	8009d6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009778:	2300      	movs	r3, #0

}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b088      	sub	sp, #32
 8009786:	af04      	add	r7, sp, #16
 8009788:	60f8      	str	r0, [r7, #12]
 800978a:	60b9      	str	r1, [r7, #8]
 800978c:	4611      	mov	r1, r2
 800978e:	461a      	mov	r2, r3
 8009790:	460b      	mov	r3, r1
 8009792:	80fb      	strh	r3, [r7, #6]
 8009794:	4613      	mov	r3, r2
 8009796:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097a6:	7979      	ldrb	r1, [r7, #5]
 80097a8:	7e3b      	ldrb	r3, [r7, #24]
 80097aa:	9303      	str	r3, [sp, #12]
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	9302      	str	r3, [sp, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	2301      	movs	r3, #1
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	2302      	movs	r3, #2
 80097ba:	2200      	movs	r2, #0
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f000 fad4 	bl	8009d6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	4611      	mov	r1, r2
 80097d8:	461a      	mov	r2, r3
 80097da:	460b      	mov	r3, r1
 80097dc:	80fb      	strh	r3, [r7, #6]
 80097de:	4613      	mov	r3, r2
 80097e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097e2:	7979      	ldrb	r1, [r7, #5]
 80097e4:	2300      	movs	r3, #0
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	9302      	str	r3, [sp, #8]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	2301      	movs	r3, #1
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	2302      	movs	r3, #2
 80097f6:	2201      	movs	r2, #1
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 fab6 	bl	8009d6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af04      	add	r7, sp, #16
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	461a      	mov	r2, r3
 8009816:	4603      	mov	r3, r0
 8009818:	70fb      	strb	r3, [r7, #3]
 800981a:	460b      	mov	r3, r1
 800981c:	70bb      	strb	r3, [r7, #2]
 800981e:	4613      	mov	r3, r2
 8009820:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009822:	7878      	ldrb	r0, [r7, #1]
 8009824:	78ba      	ldrb	r2, [r7, #2]
 8009826:	78f9      	ldrb	r1, [r7, #3]
 8009828:	8b3b      	ldrh	r3, [r7, #24]
 800982a:	9302      	str	r3, [sp, #8]
 800982c:	7d3b      	ldrb	r3, [r7, #20]
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	7c3b      	ldrb	r3, [r7, #16]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	4603      	mov	r3, r0
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fa49 	bl	8009cce <USBH_LL_OpenPipe>

  return USBH_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	460b      	mov	r3, r1
 8009850:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa68 	bl	8009d2c <USBH_LL_ClosePipe>

  return USBH_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f839 	bl	80098ea <USBH_GetFreePipe>
 8009878:	4603      	mov	r3, r0
 800987a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800987c:	89fb      	ldrh	r3, [r7, #14]
 800987e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009882:	4293      	cmp	r3, r2
 8009884:	d00b      	beq.n	800989e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	f003 030f 	and.w	r3, r3, #15
 800988e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800989e:	89fb      	ldrh	r3, [r7, #14]
 80098a0:	b2db      	uxtb	r3, r3
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80098b6:	78fb      	ldrb	r3, [r7, #3]
 80098b8:	2b0f      	cmp	r3, #15
 80098ba:	d80f      	bhi.n	80098dc <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b085      	sub	sp, #20
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
 80098fa:	e010      	b.n	800991e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d102      	bne.n	8009918 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
 8009914:	b29b      	uxth	r3, r3
 8009916:	e007      	b.n	8009928 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	3301      	adds	r3, #1
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	2b0f      	cmp	r3, #15
 8009922:	d9eb      	bls.n	80098fc <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009938:	2201      	movs	r2, #1
 800993a:	490e      	ldr	r1, [pc, #56]	@ (8009974 <MX_USB_HOST_Init+0x40>)
 800993c:	480e      	ldr	r0, [pc, #56]	@ (8009978 <MX_USB_HOST_Init+0x44>)
 800993e:	f7fe f9c1 	bl	8007cc4 <USBH_Init>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009948:	f7f7 f898 	bl	8000a7c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 800994c:	490b      	ldr	r1, [pc, #44]	@ (800997c <MX_USB_HOST_Init+0x48>)
 800994e:	480a      	ldr	r0, [pc, #40]	@ (8009978 <MX_USB_HOST_Init+0x44>)
 8009950:	f7fe fa67 	bl	8007e22 <USBH_RegisterClass>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800995a:	f7f7 f88f 	bl	8000a7c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800995e:	4806      	ldr	r0, [pc, #24]	@ (8009978 <MX_USB_HOST_Init+0x44>)
 8009960:	f7fe fb2c 	bl	8007fbc <USBH_Start>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800996a:	f7f7 f887 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	08009995 	.word	0x08009995
 8009978:	2000042c 	.word	0x2000042c
 800997c:	20000010 	.word	0x20000010

08009980 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009984:	4802      	ldr	r0, [pc, #8]	@ (8009990 <MX_USB_HOST_Process+0x10>)
 8009986:	f7fe fb29 	bl	8007fdc <USBH_Process>
}
 800998a:	bf00      	nop
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	2000042c 	.word	0x2000042c

08009994 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d819      	bhi.n	80099dc <USBH_UserProcess+0x48>
 80099a8:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <USBH_UserProcess+0x1c>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099dd 	.word	0x080099dd
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099dd 	.word	0x080099dd
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	080099c5 	.word	0x080099c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80099c4:	4b09      	ldr	r3, [pc, #36]	@ (80099ec <USBH_UserProcess+0x58>)
 80099c6:	2203      	movs	r2, #3
 80099c8:	701a      	strb	r2, [r3, #0]
  break;
 80099ca:	e008      	b.n	80099de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80099cc:	4b07      	ldr	r3, [pc, #28]	@ (80099ec <USBH_UserProcess+0x58>)
 80099ce:	2202      	movs	r2, #2
 80099d0:	701a      	strb	r2, [r3, #0]
  break;
 80099d2:	e004      	b.n	80099de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80099d4:	4b05      	ldr	r3, [pc, #20]	@ (80099ec <USBH_UserProcess+0x58>)
 80099d6:	2201      	movs	r2, #1
 80099d8:	701a      	strb	r2, [r3, #0]
  break;
 80099da:	e000      	b.n	80099de <USBH_UserProcess+0x4a>

  default:
  break;
 80099dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	200008d4 	.word	0x200008d4

080099f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08a      	sub	sp, #40	@ 0x28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099f8:	f107 0314 	add.w	r3, r7, #20
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	605a      	str	r2, [r3, #4]
 8009a02:	609a      	str	r2, [r3, #8]
 8009a04:	60da      	str	r2, [r3, #12]
 8009a06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a10:	d13a      	bne.n	8009a88 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a12:	2300      	movs	r3, #0
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	4b1e      	ldr	r3, [pc, #120]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a1c:	f043 0301 	orr.w	r3, r3, #1
 8009a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a22:	4b1b      	ldr	r3, [pc, #108]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a2e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a34:	2302      	movs	r3, #2
 8009a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a40:	230a      	movs	r3, #10
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a44:	f107 0314 	add.w	r3, r7, #20
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4812      	ldr	r0, [pc, #72]	@ (8009a94 <HAL_HCD_MspInit+0xa4>)
 8009a4c:	f7f8 fae6 	bl	800201c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a50:	4b0f      	ldr	r3, [pc, #60]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a54:	4a0e      	ldr	r2, [pc, #56]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60fb      	str	r3, [r7, #12]
 8009a60:	4b0b      	ldr	r3, [pc, #44]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a64:	4a0a      	ldr	r2, [pc, #40]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8009a6c:	4b08      	ldr	r3, [pc, #32]	@ (8009a90 <HAL_HCD_MspInit+0xa0>)
 8009a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a78:	2200      	movs	r2, #0
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	2043      	movs	r0, #67	@ 0x43
 8009a7e:	f7f7 ff26 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a82:	2043      	movs	r0, #67	@ 0x43
 8009a84:	f7f7 ff3f 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a88:	bf00      	nop
 8009a8a:	3728      	adds	r7, #40	@ 0x28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	40023800 	.word	0x40023800
 8009a94:	40020000 	.word	0x40020000

08009a98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe ff7d 	bl	80089a6 <USBH_LL_IncTimer>
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe ffb5 	bl	8008a32 <USBH_LL_Connect>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe ffbe 	bl	8008a60 <USBH_LL_Disconnect>
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
 8009af8:	4613      	mov	r3, r2
 8009afa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe ff6f 	bl	80089fa <USBH_LL_PortEnabled>
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe ff6f 	bl	8008a16 <USBH_LL_PortDisabled>
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 349c 	ldrb.w	r3, [r3, #1180]	@ 0x49c
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d12a      	bne.n	8009ba8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009b52:	4a18      	ldr	r2, [pc, #96]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a15      	ldr	r2, [pc, #84]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b5e:	f8c3 24a0 	str.w	r2, [r3, #1184]	@ 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b62:	4b14      	ldr	r3, [pc, #80]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b64:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009b68:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009b6a:	4b12      	ldr	r3, [pc, #72]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b70:	4b10      	ldr	r3, [pc, #64]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b72:	2201      	movs	r2, #1
 8009b74:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b76:	4b0f      	ldr	r3, [pc, #60]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b7e:	2202      	movs	r2, #2
 8009b80:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b82:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b88:	480a      	ldr	r0, [pc, #40]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b8a:	f7f8 fbe4 	bl	8002356 <HAL_HCD_Init>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009b94:	f7f6 ff72 	bl	8000a7c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009b98:	4806      	ldr	r0, [pc, #24]	@ (8009bb4 <USBH_LL_Init+0x74>)
 8009b9a:	f7f9 f845 	bl	8002c28 <HAL_HCD_GetCurrentFrame>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7fe fef0 	bl	8008988 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	200008d8 	.word	0x200008d8

08009bb8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f8 ffb2 	bl	8002b38 <HAL_HCD_Start>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f956 	bl	8009e8c <USBH_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7f8 ffba 	bl	8002b7e <HAL_HCD_Stop>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f93b 	bl	8009e8c <USBH_Get_USB_Status>
 8009c16:	4603      	mov	r3, r0
 8009c18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f9 f804 	bl	8002c44 <HAL_HCD_GetCurrentSpeed>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d00c      	beq.n	8009c5c <USBH_LL_GetSpeed+0x38>
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d80d      	bhi.n	8009c62 <USBH_LL_GetSpeed+0x3e>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <USBH_LL_GetSpeed+0x2c>
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d003      	beq.n	8009c56 <USBH_LL_GetSpeed+0x32>
 8009c4e:	e008      	b.n	8009c62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]
    break;
 8009c54:	e008      	b.n	8009c68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009c56:	2301      	movs	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]
    break;
 8009c5a:	e005      	b.n	8009c68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c60:	e002      	b.n	8009c68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009c62:	2301      	movs	r3, #1
 8009c64:	73fb      	strb	r3, [r7, #15]
    break;
 8009c66:	bf00      	nop
  }
  return  speed;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7f8 ff95 	bl	8002bb8 <HAL_HCD_ResetPort>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 f8f9 	bl	8009e8c <USBH_Get_USB_Status>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009cba:	78fa      	ldrb	r2, [r7, #3]
 8009cbc:	4611      	mov	r1, r2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f8 ff9d 	bl	8002bfe <HAL_HCD_HC_GetXferCount>
 8009cc4:	4603      	mov	r3, r0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009cce:	b590      	push	{r4, r7, lr}
 8009cd0:	b089      	sub	sp, #36	@ 0x24
 8009cd2:	af04      	add	r7, sp, #16
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	4611      	mov	r1, r2
 8009cda:	461a      	mov	r2, r3
 8009cdc:	4603      	mov	r3, r0
 8009cde:	70fb      	strb	r3, [r7, #3]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70bb      	strb	r3, [r7, #2]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 8009cf6:	787c      	ldrb	r4, [r7, #1]
 8009cf8:	78ba      	ldrb	r2, [r7, #2]
 8009cfa:	78f9      	ldrb	r1, [r7, #3]
 8009cfc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009cfe:	9302      	str	r3, [sp, #8]
 8009d00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	f7f8 fb89 	bl	8002424 <HAL_HCD_HC_Init>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f8b7 	bl	8009e8c <USBH_Get_USB_Status>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}

08009d2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7f8 fc22 	bl	8002594 <HAL_HCD_HC_Halt>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 f898 	bl	8009e8c <USBH_Get_USB_Status>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009d6a:	b590      	push	{r4, r7, lr}
 8009d6c:	b089      	sub	sp, #36	@ 0x24
 8009d6e:	af04      	add	r7, sp, #16
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	4608      	mov	r0, r1
 8009d74:	4611      	mov	r1, r2
 8009d76:	461a      	mov	r2, r3
 8009d78:	4603      	mov	r3, r0
 8009d7a:	70fb      	strb	r3, [r7, #3]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70bb      	strb	r3, [r7, #2]
 8009d80:	4613      	mov	r3, r2
 8009d82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	@ 0x4a0
 8009d92:	787c      	ldrb	r4, [r7, #1]
 8009d94:	78ba      	ldrb	r2, [r7, #2]
 8009d96:	78f9      	ldrb	r1, [r7, #3]
 8009d98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d9c:	9303      	str	r3, [sp, #12]
 8009d9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009da0:	9302      	str	r3, [sp, #8]
 8009da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	4623      	mov	r3, r4
 8009dae:	f7f8 fc15 	bl	80025dc <HAL_HCD_HC_SubmitRequest>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 f867 	bl	8009e8c <USBH_Get_USB_Status>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd90      	pop	{r4, r7, pc}

08009dcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	4611      	mov	r1, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7f8 fef6 	bl	8002bd4 <HAL_HCD_HC_GetURBState>
 8009de8:	4603      	mov	r3, r0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8009dfe:	20c8      	movs	r0, #200	@ 0xc8
 8009e00:	f7f7 fa04 	bl	800120c <HAL_Delay>
  return USBH_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	70fb      	strb	r3, [r7, #3]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 8009e24:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009e26:	78fa      	ldrb	r2, [r7, #3]
 8009e28:	68f9      	ldr	r1, [r7, #12]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	3317      	adds	r3, #23
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009e3c:	78fa      	ldrb	r2, [r7, #3]
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	4613      	mov	r3, r2
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	1a9b      	subs	r3, r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	333c      	adds	r3, #60	@ 0x3c
 8009e4c:	78ba      	ldrb	r2, [r7, #2]
 8009e4e:	701a      	strb	r2, [r3, #0]
 8009e50:	e009      	b.n	8009e66 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	68f9      	ldr	r1, [r7, #12]
 8009e56:	4613      	mov	r3, r2
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	333d      	adds	r3, #61	@ 0x3d
 8009e62:	78ba      	ldrb	r2, [r7, #2]
 8009e64:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7f7 f9c5 	bl	800120c <HAL_Delay>
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d817      	bhi.n	8009ed0 <USBH_Get_USB_Status+0x44>
 8009ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <USBH_Get_USB_Status+0x1c>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009eb9 	.word	0x08009eb9
 8009eac:	08009ebf 	.word	0x08009ebf
 8009eb0:	08009ec5 	.word	0x08009ec5
 8009eb4:	08009ecb 	.word	0x08009ecb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	e00b      	b.n	8009ed6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec2:	e008      	b.n	8009ed6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec8:	e005      	b.n	8009ed6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009eca:	2302      	movs	r3, #2
 8009ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ece:	e002      	b.n	8009ed6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ed0:	2302      	movs	r3, #2
 8009ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed4:	bf00      	nop
  }
  return usb_status;
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <malloc>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	@ (8009ef0 <malloc+0xc>)
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	f000 b82d 	b.w	8009f48 <_malloc_r>
 8009eee:	bf00      	nop
 8009ef0:	2000003c 	.word	0x2000003c

08009ef4 <free>:
 8009ef4:	4b02      	ldr	r3, [pc, #8]	@ (8009f00 <free+0xc>)
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	f000 bb47 	b.w	800a58c <_free_r>
 8009efe:	bf00      	nop
 8009f00:	2000003c 	.word	0x2000003c

08009f04 <sbrk_aligned>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	4e0f      	ldr	r6, [pc, #60]	@ (8009f44 <sbrk_aligned+0x40>)
 8009f08:	460c      	mov	r4, r1
 8009f0a:	6831      	ldr	r1, [r6, #0]
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	b911      	cbnz	r1, 8009f16 <sbrk_aligned+0x12>
 8009f10:	f000 faec 	bl	800a4ec <_sbrk_r>
 8009f14:	6030      	str	r0, [r6, #0]
 8009f16:	4621      	mov	r1, r4
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f000 fae7 	bl	800a4ec <_sbrk_r>
 8009f1e:	1c43      	adds	r3, r0, #1
 8009f20:	d103      	bne.n	8009f2a <sbrk_aligned+0x26>
 8009f22:	f04f 34ff 	mov.w	r4, #4294967295
 8009f26:	4620      	mov	r0, r4
 8009f28:	bd70      	pop	{r4, r5, r6, pc}
 8009f2a:	1cc4      	adds	r4, r0, #3
 8009f2c:	f024 0403 	bic.w	r4, r4, #3
 8009f30:	42a0      	cmp	r0, r4
 8009f32:	d0f8      	beq.n	8009f26 <sbrk_aligned+0x22>
 8009f34:	1a21      	subs	r1, r4, r0
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 fad8 	bl	800a4ec <_sbrk_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d1f2      	bne.n	8009f26 <sbrk_aligned+0x22>
 8009f40:	e7ef      	b.n	8009f22 <sbrk_aligned+0x1e>
 8009f42:	bf00      	nop
 8009f44:	20000cb8 	.word	0x20000cb8

08009f48 <_malloc_r>:
 8009f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f4c:	1ccd      	adds	r5, r1, #3
 8009f4e:	f025 0503 	bic.w	r5, r5, #3
 8009f52:	3508      	adds	r5, #8
 8009f54:	2d0c      	cmp	r5, #12
 8009f56:	bf38      	it	cc
 8009f58:	250c      	movcc	r5, #12
 8009f5a:	2d00      	cmp	r5, #0
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	db01      	blt.n	8009f64 <_malloc_r+0x1c>
 8009f60:	42a9      	cmp	r1, r5
 8009f62:	d904      	bls.n	8009f6e <_malloc_r+0x26>
 8009f64:	230c      	movs	r3, #12
 8009f66:	6033      	str	r3, [r6, #0]
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a044 <_malloc_r+0xfc>
 8009f72:	f000 f869 	bl	800a048 <__malloc_lock>
 8009f76:	f8d8 3000 	ldr.w	r3, [r8]
 8009f7a:	461c      	mov	r4, r3
 8009f7c:	bb44      	cbnz	r4, 8009fd0 <_malloc_r+0x88>
 8009f7e:	4629      	mov	r1, r5
 8009f80:	4630      	mov	r0, r6
 8009f82:	f7ff ffbf 	bl	8009f04 <sbrk_aligned>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	4604      	mov	r4, r0
 8009f8a:	d158      	bne.n	800a03e <_malloc_r+0xf6>
 8009f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8009f90:	4627      	mov	r7, r4
 8009f92:	2f00      	cmp	r7, #0
 8009f94:	d143      	bne.n	800a01e <_malloc_r+0xd6>
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	d04b      	beq.n	800a032 <_malloc_r+0xea>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	eb04 0903 	add.w	r9, r4, r3
 8009fa4:	f000 faa2 	bl	800a4ec <_sbrk_r>
 8009fa8:	4581      	cmp	r9, r0
 8009faa:	d142      	bne.n	800a032 <_malloc_r+0xea>
 8009fac:	6821      	ldr	r1, [r4, #0]
 8009fae:	1a6d      	subs	r5, r5, r1
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff ffa6 	bl	8009f04 <sbrk_aligned>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d03a      	beq.n	800a032 <_malloc_r+0xea>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	442b      	add	r3, r5
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	bb62      	cbnz	r2, 800a024 <_malloc_r+0xdc>
 8009fca:	f8c8 7000 	str.w	r7, [r8]
 8009fce:	e00f      	b.n	8009ff0 <_malloc_r+0xa8>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	1b52      	subs	r2, r2, r5
 8009fd4:	d420      	bmi.n	800a018 <_malloc_r+0xd0>
 8009fd6:	2a0b      	cmp	r2, #11
 8009fd8:	d917      	bls.n	800a00a <_malloc_r+0xc2>
 8009fda:	1961      	adds	r1, r4, r5
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	6025      	str	r5, [r4, #0]
 8009fe0:	bf18      	it	ne
 8009fe2:	6059      	strne	r1, [r3, #4]
 8009fe4:	6863      	ldr	r3, [r4, #4]
 8009fe6:	bf08      	it	eq
 8009fe8:	f8c8 1000 	streq.w	r1, [r8]
 8009fec:	5162      	str	r2, [r4, r5]
 8009fee:	604b      	str	r3, [r1, #4]
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f000 f82f 	bl	800a054 <__malloc_unlock>
 8009ff6:	f104 000b 	add.w	r0, r4, #11
 8009ffa:	1d23      	adds	r3, r4, #4
 8009ffc:	f020 0007 	bic.w	r0, r0, #7
 800a000:	1ac2      	subs	r2, r0, r3
 800a002:	bf1c      	itt	ne
 800a004:	1a1b      	subne	r3, r3, r0
 800a006:	50a3      	strne	r3, [r4, r2]
 800a008:	e7af      	b.n	8009f6a <_malloc_r+0x22>
 800a00a:	6862      	ldr	r2, [r4, #4]
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	bf0c      	ite	eq
 800a010:	f8c8 2000 	streq.w	r2, [r8]
 800a014:	605a      	strne	r2, [r3, #4]
 800a016:	e7eb      	b.n	8009ff0 <_malloc_r+0xa8>
 800a018:	4623      	mov	r3, r4
 800a01a:	6864      	ldr	r4, [r4, #4]
 800a01c:	e7ae      	b.n	8009f7c <_malloc_r+0x34>
 800a01e:	463c      	mov	r4, r7
 800a020:	687f      	ldr	r7, [r7, #4]
 800a022:	e7b6      	b.n	8009f92 <_malloc_r+0x4a>
 800a024:	461a      	mov	r2, r3
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	42a3      	cmp	r3, r4
 800a02a:	d1fb      	bne.n	800a024 <_malloc_r+0xdc>
 800a02c:	2300      	movs	r3, #0
 800a02e:	6053      	str	r3, [r2, #4]
 800a030:	e7de      	b.n	8009ff0 <_malloc_r+0xa8>
 800a032:	230c      	movs	r3, #12
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	4630      	mov	r0, r6
 800a038:	f000 f80c 	bl	800a054 <__malloc_unlock>
 800a03c:	e794      	b.n	8009f68 <_malloc_r+0x20>
 800a03e:	6005      	str	r5, [r0, #0]
 800a040:	e7d6      	b.n	8009ff0 <_malloc_r+0xa8>
 800a042:	bf00      	nop
 800a044:	20000cbc 	.word	0x20000cbc

0800a048 <__malloc_lock>:
 800a048:	4801      	ldr	r0, [pc, #4]	@ (800a050 <__malloc_lock+0x8>)
 800a04a:	f000 ba9c 	b.w	800a586 <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	20000e00 	.word	0x20000e00

0800a054 <__malloc_unlock>:
 800a054:	4801      	ldr	r0, [pc, #4]	@ (800a05c <__malloc_unlock+0x8>)
 800a056:	f000 ba97 	b.w	800a588 <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	20000e00 	.word	0x20000e00

0800a060 <std>:
 800a060:	2300      	movs	r3, #0
 800a062:	b510      	push	{r4, lr}
 800a064:	4604      	mov	r4, r0
 800a066:	e9c0 3300 	strd	r3, r3, [r0]
 800a06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a06e:	6083      	str	r3, [r0, #8]
 800a070:	8181      	strh	r1, [r0, #12]
 800a072:	6643      	str	r3, [r0, #100]	@ 0x64
 800a074:	81c2      	strh	r2, [r0, #14]
 800a076:	6183      	str	r3, [r0, #24]
 800a078:	4619      	mov	r1, r3
 800a07a:	2208      	movs	r2, #8
 800a07c:	305c      	adds	r0, #92	@ 0x5c
 800a07e:	f000 f9f9 	bl	800a474 <memset>
 800a082:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <std+0x58>)
 800a084:	6263      	str	r3, [r4, #36]	@ 0x24
 800a086:	4b0d      	ldr	r3, [pc, #52]	@ (800a0bc <std+0x5c>)
 800a088:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a08a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c0 <std+0x60>)
 800a08c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a08e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c4 <std+0x64>)
 800a090:	6323      	str	r3, [r4, #48]	@ 0x30
 800a092:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c8 <std+0x68>)
 800a094:	6224      	str	r4, [r4, #32]
 800a096:	429c      	cmp	r4, r3
 800a098:	d006      	beq.n	800a0a8 <std+0x48>
 800a09a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a09e:	4294      	cmp	r4, r2
 800a0a0:	d002      	beq.n	800a0a8 <std+0x48>
 800a0a2:	33d0      	adds	r3, #208	@ 0xd0
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	d105      	bne.n	800a0b4 <std+0x54>
 800a0a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b0:	f000 ba68 	b.w	800a584 <__retarget_lock_init_recursive>
 800a0b4:	bd10      	pop	{r4, pc}
 800a0b6:	bf00      	nop
 800a0b8:	0800a2c5 	.word	0x0800a2c5
 800a0bc:	0800a2e7 	.word	0x0800a2e7
 800a0c0:	0800a31f 	.word	0x0800a31f
 800a0c4:	0800a343 	.word	0x0800a343
 800a0c8:	20000cc0 	.word	0x20000cc0

0800a0cc <stdio_exit_handler>:
 800a0cc:	4a02      	ldr	r2, [pc, #8]	@ (800a0d8 <stdio_exit_handler+0xc>)
 800a0ce:	4903      	ldr	r1, [pc, #12]	@ (800a0dc <stdio_exit_handler+0x10>)
 800a0d0:	4803      	ldr	r0, [pc, #12]	@ (800a0e0 <stdio_exit_handler+0x14>)
 800a0d2:	f000 b869 	b.w	800a1a8 <_fwalk_sglue>
 800a0d6:	bf00      	nop
 800a0d8:	20000030 	.word	0x20000030
 800a0dc:	0800acc9 	.word	0x0800acc9
 800a0e0:	20000040 	.word	0x20000040

0800a0e4 <cleanup_stdio>:
 800a0e4:	6841      	ldr	r1, [r0, #4]
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a118 <cleanup_stdio+0x34>)
 800a0e8:	4299      	cmp	r1, r3
 800a0ea:	b510      	push	{r4, lr}
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	d001      	beq.n	800a0f4 <cleanup_stdio+0x10>
 800a0f0:	f000 fdea 	bl	800acc8 <_fflush_r>
 800a0f4:	68a1      	ldr	r1, [r4, #8]
 800a0f6:	4b09      	ldr	r3, [pc, #36]	@ (800a11c <cleanup_stdio+0x38>)
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	d002      	beq.n	800a102 <cleanup_stdio+0x1e>
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fde3 	bl	800acc8 <_fflush_r>
 800a102:	68e1      	ldr	r1, [r4, #12]
 800a104:	4b06      	ldr	r3, [pc, #24]	@ (800a120 <cleanup_stdio+0x3c>)
 800a106:	4299      	cmp	r1, r3
 800a108:	d004      	beq.n	800a114 <cleanup_stdio+0x30>
 800a10a:	4620      	mov	r0, r4
 800a10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a110:	f000 bdda 	b.w	800acc8 <_fflush_r>
 800a114:	bd10      	pop	{r4, pc}
 800a116:	bf00      	nop
 800a118:	20000cc0 	.word	0x20000cc0
 800a11c:	20000d28 	.word	0x20000d28
 800a120:	20000d90 	.word	0x20000d90

0800a124 <global_stdio_init.part.0>:
 800a124:	b510      	push	{r4, lr}
 800a126:	4b0b      	ldr	r3, [pc, #44]	@ (800a154 <global_stdio_init.part.0+0x30>)
 800a128:	4c0b      	ldr	r4, [pc, #44]	@ (800a158 <global_stdio_init.part.0+0x34>)
 800a12a:	4a0c      	ldr	r2, [pc, #48]	@ (800a15c <global_stdio_init.part.0+0x38>)
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	4620      	mov	r0, r4
 800a130:	2200      	movs	r2, #0
 800a132:	2104      	movs	r1, #4
 800a134:	f7ff ff94 	bl	800a060 <std>
 800a138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a13c:	2201      	movs	r2, #1
 800a13e:	2109      	movs	r1, #9
 800a140:	f7ff ff8e 	bl	800a060 <std>
 800a144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a148:	2202      	movs	r2, #2
 800a14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a14e:	2112      	movs	r1, #18
 800a150:	f7ff bf86 	b.w	800a060 <std>
 800a154:	20000df8 	.word	0x20000df8
 800a158:	20000cc0 	.word	0x20000cc0
 800a15c:	0800a0cd 	.word	0x0800a0cd

0800a160 <__sfp_lock_acquire>:
 800a160:	4801      	ldr	r0, [pc, #4]	@ (800a168 <__sfp_lock_acquire+0x8>)
 800a162:	f000 ba10 	b.w	800a586 <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20000e01 	.word	0x20000e01

0800a16c <__sfp_lock_release>:
 800a16c:	4801      	ldr	r0, [pc, #4]	@ (800a174 <__sfp_lock_release+0x8>)
 800a16e:	f000 ba0b 	b.w	800a588 <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20000e01 	.word	0x20000e01

0800a178 <__sinit>:
 800a178:	b510      	push	{r4, lr}
 800a17a:	4604      	mov	r4, r0
 800a17c:	f7ff fff0 	bl	800a160 <__sfp_lock_acquire>
 800a180:	6a23      	ldr	r3, [r4, #32]
 800a182:	b11b      	cbz	r3, 800a18c <__sinit+0x14>
 800a184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a188:	f7ff bff0 	b.w	800a16c <__sfp_lock_release>
 800a18c:	4b04      	ldr	r3, [pc, #16]	@ (800a1a0 <__sinit+0x28>)
 800a18e:	6223      	str	r3, [r4, #32]
 800a190:	4b04      	ldr	r3, [pc, #16]	@ (800a1a4 <__sinit+0x2c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1f5      	bne.n	800a184 <__sinit+0xc>
 800a198:	f7ff ffc4 	bl	800a124 <global_stdio_init.part.0>
 800a19c:	e7f2      	b.n	800a184 <__sinit+0xc>
 800a19e:	bf00      	nop
 800a1a0:	0800a0e5 	.word	0x0800a0e5
 800a1a4:	20000df8 	.word	0x20000df8

0800a1a8 <_fwalk_sglue>:
 800a1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	4688      	mov	r8, r1
 800a1b0:	4614      	mov	r4, r2
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1bc:	d505      	bpl.n	800a1ca <_fwalk_sglue+0x22>
 800a1be:	6824      	ldr	r4, [r4, #0]
 800a1c0:	2c00      	cmp	r4, #0
 800a1c2:	d1f7      	bne.n	800a1b4 <_fwalk_sglue+0xc>
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ca:	89ab      	ldrh	r3, [r5, #12]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d907      	bls.n	800a1e0 <_fwalk_sglue+0x38>
 800a1d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	d003      	beq.n	800a1e0 <_fwalk_sglue+0x38>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4638      	mov	r0, r7
 800a1dc:	47c0      	blx	r8
 800a1de:	4306      	orrs	r6, r0
 800a1e0:	3568      	adds	r5, #104	@ 0x68
 800a1e2:	e7e9      	b.n	800a1b8 <_fwalk_sglue+0x10>

0800a1e4 <iprintf>:
 800a1e4:	b40f      	push	{r0, r1, r2, r3}
 800a1e6:	b507      	push	{r0, r1, r2, lr}
 800a1e8:	4906      	ldr	r1, [pc, #24]	@ (800a204 <iprintf+0x20>)
 800a1ea:	ab04      	add	r3, sp, #16
 800a1ec:	6808      	ldr	r0, [r1, #0]
 800a1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f2:	6881      	ldr	r1, [r0, #8]
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	f000 fa3d 	bl	800a674 <_vfiprintf_r>
 800a1fa:	b003      	add	sp, #12
 800a1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a200:	b004      	add	sp, #16
 800a202:	4770      	bx	lr
 800a204:	2000003c 	.word	0x2000003c

0800a208 <_puts_r>:
 800a208:	6a03      	ldr	r3, [r0, #32]
 800a20a:	b570      	push	{r4, r5, r6, lr}
 800a20c:	6884      	ldr	r4, [r0, #8]
 800a20e:	4605      	mov	r5, r0
 800a210:	460e      	mov	r6, r1
 800a212:	b90b      	cbnz	r3, 800a218 <_puts_r+0x10>
 800a214:	f7ff ffb0 	bl	800a178 <__sinit>
 800a218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a21a:	07db      	lsls	r3, r3, #31
 800a21c:	d405      	bmi.n	800a22a <_puts_r+0x22>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	0598      	lsls	r0, r3, #22
 800a222:	d402      	bmi.n	800a22a <_puts_r+0x22>
 800a224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a226:	f000 f9ae 	bl	800a586 <__retarget_lock_acquire_recursive>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	0719      	lsls	r1, r3, #28
 800a22e:	d502      	bpl.n	800a236 <_puts_r+0x2e>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d135      	bne.n	800a2a2 <_puts_r+0x9a>
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 f8c5 	bl	800a3c8 <__swsetup_r>
 800a23e:	b380      	cbz	r0, 800a2a2 <_puts_r+0x9a>
 800a240:	f04f 35ff 	mov.w	r5, #4294967295
 800a244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a246:	07da      	lsls	r2, r3, #31
 800a248:	d405      	bmi.n	800a256 <_puts_r+0x4e>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	059b      	lsls	r3, r3, #22
 800a24e:	d402      	bmi.n	800a256 <_puts_r+0x4e>
 800a250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a252:	f000 f999 	bl	800a588 <__retarget_lock_release_recursive>
 800a256:	4628      	mov	r0, r5
 800a258:	bd70      	pop	{r4, r5, r6, pc}
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	da04      	bge.n	800a268 <_puts_r+0x60>
 800a25e:	69a2      	ldr	r2, [r4, #24]
 800a260:	429a      	cmp	r2, r3
 800a262:	dc17      	bgt.n	800a294 <_puts_r+0x8c>
 800a264:	290a      	cmp	r1, #10
 800a266:	d015      	beq.n	800a294 <_puts_r+0x8c>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	7019      	strb	r1, [r3, #0]
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a276:	3b01      	subs	r3, #1
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	2900      	cmp	r1, #0
 800a27c:	d1ed      	bne.n	800a25a <_puts_r+0x52>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	da11      	bge.n	800a2a6 <_puts_r+0x9e>
 800a282:	4622      	mov	r2, r4
 800a284:	210a      	movs	r1, #10
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f85f 	bl	800a34a <__swbuf_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	d0d7      	beq.n	800a240 <_puts_r+0x38>
 800a290:	250a      	movs	r5, #10
 800a292:	e7d7      	b.n	800a244 <_puts_r+0x3c>
 800a294:	4622      	mov	r2, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f857 	bl	800a34a <__swbuf_r>
 800a29c:	3001      	adds	r0, #1
 800a29e:	d1e7      	bne.n	800a270 <_puts_r+0x68>
 800a2a0:	e7ce      	b.n	800a240 <_puts_r+0x38>
 800a2a2:	3e01      	subs	r6, #1
 800a2a4:	e7e4      	b.n	800a270 <_puts_r+0x68>
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	6022      	str	r2, [r4, #0]
 800a2ac:	220a      	movs	r2, #10
 800a2ae:	701a      	strb	r2, [r3, #0]
 800a2b0:	e7ee      	b.n	800a290 <_puts_r+0x88>
	...

0800a2b4 <puts>:
 800a2b4:	4b02      	ldr	r3, [pc, #8]	@ (800a2c0 <puts+0xc>)
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f7ff bfa5 	b.w	800a208 <_puts_r>
 800a2be:	bf00      	nop
 800a2c0:	2000003c 	.word	0x2000003c

0800a2c4 <__sread>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2cc:	f000 f8fc 	bl	800a4c8 <_read_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	bfab      	itete	ge
 800a2d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2d8:	181b      	addge	r3, r3, r0
 800a2da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2de:	bfac      	ite	ge
 800a2e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2e2:	81a3      	strhlt	r3, [r4, #12]
 800a2e4:	bd10      	pop	{r4, pc}

0800a2e6 <__swrite>:
 800a2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	898b      	ldrh	r3, [r1, #12]
 800a2ee:	05db      	lsls	r3, r3, #23
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	4616      	mov	r6, r2
 800a2f6:	d505      	bpl.n	800a304 <__swrite+0x1e>
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	2200      	movs	r2, #0
 800a300:	f000 f8d0 	bl	800a4a4 <_lseek_r>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	4628      	mov	r0, r5
 800a316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	f000 b8f7 	b.w	800a50c <_write_r>

0800a31e <__sseek>:
 800a31e:	b510      	push	{r4, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a326:	f000 f8bd 	bl	800a4a4 <_lseek_r>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	bf15      	itete	ne
 800a330:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a33a:	81a3      	strheq	r3, [r4, #12]
 800a33c:	bf18      	it	ne
 800a33e:	81a3      	strhne	r3, [r4, #12]
 800a340:	bd10      	pop	{r4, pc}

0800a342 <__sclose>:
 800a342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a346:	f000 b89d 	b.w	800a484 <_close_r>

0800a34a <__swbuf_r>:
 800a34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34c:	460e      	mov	r6, r1
 800a34e:	4614      	mov	r4, r2
 800a350:	4605      	mov	r5, r0
 800a352:	b118      	cbz	r0, 800a35c <__swbuf_r+0x12>
 800a354:	6a03      	ldr	r3, [r0, #32]
 800a356:	b90b      	cbnz	r3, 800a35c <__swbuf_r+0x12>
 800a358:	f7ff ff0e 	bl	800a178 <__sinit>
 800a35c:	69a3      	ldr	r3, [r4, #24]
 800a35e:	60a3      	str	r3, [r4, #8]
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	071a      	lsls	r2, r3, #28
 800a364:	d501      	bpl.n	800a36a <__swbuf_r+0x20>
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	b943      	cbnz	r3, 800a37c <__swbuf_r+0x32>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f000 f82b 	bl	800a3c8 <__swsetup_r>
 800a372:	b118      	cbz	r0, 800a37c <__swbuf_r+0x32>
 800a374:	f04f 37ff 	mov.w	r7, #4294967295
 800a378:	4638      	mov	r0, r7
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	6922      	ldr	r2, [r4, #16]
 800a380:	1a98      	subs	r0, r3, r2
 800a382:	6963      	ldr	r3, [r4, #20]
 800a384:	b2f6      	uxtb	r6, r6
 800a386:	4283      	cmp	r3, r0
 800a388:	4637      	mov	r7, r6
 800a38a:	dc05      	bgt.n	800a398 <__swbuf_r+0x4e>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 fc9a 	bl	800acc8 <_fflush_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d1ed      	bne.n	800a374 <__swbuf_r+0x2a>
 800a398:	68a3      	ldr	r3, [r4, #8]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	60a3      	str	r3, [r4, #8]
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	701e      	strb	r6, [r3, #0]
 800a3a6:	6962      	ldr	r2, [r4, #20]
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d004      	beq.n	800a3b8 <__swbuf_r+0x6e>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	07db      	lsls	r3, r3, #31
 800a3b2:	d5e1      	bpl.n	800a378 <__swbuf_r+0x2e>
 800a3b4:	2e0a      	cmp	r6, #10
 800a3b6:	d1df      	bne.n	800a378 <__swbuf_r+0x2e>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f000 fc84 	bl	800acc8 <_fflush_r>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0d9      	beq.n	800a378 <__swbuf_r+0x2e>
 800a3c4:	e7d6      	b.n	800a374 <__swbuf_r+0x2a>
	...

0800a3c8 <__swsetup_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4b29      	ldr	r3, [pc, #164]	@ (800a470 <__swsetup_r+0xa8>)
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	6818      	ldr	r0, [r3, #0]
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	b118      	cbz	r0, 800a3dc <__swsetup_r+0x14>
 800a3d4:	6a03      	ldr	r3, [r0, #32]
 800a3d6:	b90b      	cbnz	r3, 800a3dc <__swsetup_r+0x14>
 800a3d8:	f7ff fece 	bl	800a178 <__sinit>
 800a3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e0:	0719      	lsls	r1, r3, #28
 800a3e2:	d422      	bmi.n	800a42a <__swsetup_r+0x62>
 800a3e4:	06da      	lsls	r2, r3, #27
 800a3e6:	d407      	bmi.n	800a3f8 <__swsetup_r+0x30>
 800a3e8:	2209      	movs	r2, #9
 800a3ea:	602a      	str	r2, [r5, #0]
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f6:	e033      	b.n	800a460 <__swsetup_r+0x98>
 800a3f8:	0758      	lsls	r0, r3, #29
 800a3fa:	d512      	bpl.n	800a422 <__swsetup_r+0x5a>
 800a3fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3fe:	b141      	cbz	r1, 800a412 <__swsetup_r+0x4a>
 800a400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <__swsetup_r+0x46>
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 f8bf 	bl	800a58c <_free_r>
 800a40e:	2300      	movs	r3, #0
 800a410:	6363      	str	r3, [r4, #52]	@ 0x34
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	2300      	movs	r3, #0
 800a41c:	6063      	str	r3, [r4, #4]
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	f043 0308 	orr.w	r3, r3, #8
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	b94b      	cbnz	r3, 800a442 <__swsetup_r+0x7a>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a438:	d003      	beq.n	800a442 <__swsetup_r+0x7a>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 fc91 	bl	800ad64 <__smakebuf_r>
 800a442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a446:	f013 0201 	ands.w	r2, r3, #1
 800a44a:	d00a      	beq.n	800a462 <__swsetup_r+0x9a>
 800a44c:	2200      	movs	r2, #0
 800a44e:	60a2      	str	r2, [r4, #8]
 800a450:	6962      	ldr	r2, [r4, #20]
 800a452:	4252      	negs	r2, r2
 800a454:	61a2      	str	r2, [r4, #24]
 800a456:	6922      	ldr	r2, [r4, #16]
 800a458:	b942      	cbnz	r2, 800a46c <__swsetup_r+0xa4>
 800a45a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a45e:	d1c5      	bne.n	800a3ec <__swsetup_r+0x24>
 800a460:	bd38      	pop	{r3, r4, r5, pc}
 800a462:	0799      	lsls	r1, r3, #30
 800a464:	bf58      	it	pl
 800a466:	6962      	ldrpl	r2, [r4, #20]
 800a468:	60a2      	str	r2, [r4, #8]
 800a46a:	e7f4      	b.n	800a456 <__swsetup_r+0x8e>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e7f7      	b.n	800a460 <__swsetup_r+0x98>
 800a470:	2000003c 	.word	0x2000003c

0800a474 <memset>:
 800a474:	4402      	add	r2, r0
 800a476:	4603      	mov	r3, r0
 800a478:	4293      	cmp	r3, r2
 800a47a:	d100      	bne.n	800a47e <memset+0xa>
 800a47c:	4770      	bx	lr
 800a47e:	f803 1b01 	strb.w	r1, [r3], #1
 800a482:	e7f9      	b.n	800a478 <memset+0x4>

0800a484 <_close_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d06      	ldr	r5, [pc, #24]	@ (800a4a0 <_close_r+0x1c>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	602b      	str	r3, [r5, #0]
 800a490:	f7f6 fda3 	bl	8000fda <_close>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_close_r+0x1a>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_close_r+0x1a>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	20000dfc 	.word	0x20000dfc

0800a4a4 <_lseek_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d07      	ldr	r5, [pc, #28]	@ (800a4c4 <_lseek_r+0x20>)
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	4611      	mov	r1, r2
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	602a      	str	r2, [r5, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f7f6 fdb8 	bl	8001028 <_lseek>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_lseek_r+0x1e>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_lseek_r+0x1e>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	20000dfc 	.word	0x20000dfc

0800a4c8 <_read_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	@ (800a4e8 <_read_r+0x20>)
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f6 fd46 	bl	8000f68 <_read>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_read_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_read_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	20000dfc 	.word	0x20000dfc

0800a4ec <_sbrk_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d06      	ldr	r5, [pc, #24]	@ (800a508 <_sbrk_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	f7f6 fda4 	bl	8001044 <_sbrk>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_sbrk_r+0x1a>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_sbrk_r+0x1a>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	20000dfc 	.word	0x20000dfc

0800a50c <_write_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	@ (800a52c <_write_r+0x20>)
 800a510:	4604      	mov	r4, r0
 800a512:	4608      	mov	r0, r1
 800a514:	4611      	mov	r1, r2
 800a516:	2200      	movs	r2, #0
 800a518:	602a      	str	r2, [r5, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f7f6 fd41 	bl	8000fa2 <_write>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_write_r+0x1e>
 800a524:	682b      	ldr	r3, [r5, #0]
 800a526:	b103      	cbz	r3, 800a52a <_write_r+0x1e>
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20000dfc 	.word	0x20000dfc

0800a530 <__errno>:
 800a530:	4b01      	ldr	r3, [pc, #4]	@ (800a538 <__errno+0x8>)
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	2000003c 	.word	0x2000003c

0800a53c <__libc_init_array>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4d0d      	ldr	r5, [pc, #52]	@ (800a574 <__libc_init_array+0x38>)
 800a540:	4c0d      	ldr	r4, [pc, #52]	@ (800a578 <__libc_init_array+0x3c>)
 800a542:	1b64      	subs	r4, r4, r5
 800a544:	10a4      	asrs	r4, r4, #2
 800a546:	2600      	movs	r6, #0
 800a548:	42a6      	cmp	r6, r4
 800a54a:	d109      	bne.n	800a560 <__libc_init_array+0x24>
 800a54c:	4d0b      	ldr	r5, [pc, #44]	@ (800a57c <__libc_init_array+0x40>)
 800a54e:	4c0c      	ldr	r4, [pc, #48]	@ (800a580 <__libc_init_array+0x44>)
 800a550:	f000 fc66 	bl	800ae20 <_init>
 800a554:	1b64      	subs	r4, r4, r5
 800a556:	10a4      	asrs	r4, r4, #2
 800a558:	2600      	movs	r6, #0
 800a55a:	42a6      	cmp	r6, r4
 800a55c:	d105      	bne.n	800a56a <__libc_init_array+0x2e>
 800a55e:	bd70      	pop	{r4, r5, r6, pc}
 800a560:	f855 3b04 	ldr.w	r3, [r5], #4
 800a564:	4798      	blx	r3
 800a566:	3601      	adds	r6, #1
 800a568:	e7ee      	b.n	800a548 <__libc_init_array+0xc>
 800a56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a56e:	4798      	blx	r3
 800a570:	3601      	adds	r6, #1
 800a572:	e7f2      	b.n	800a55a <__libc_init_array+0x1e>
 800a574:	0800b1e4 	.word	0x0800b1e4
 800a578:	0800b1e4 	.word	0x0800b1e4
 800a57c:	0800b1e4 	.word	0x0800b1e4
 800a580:	0800b1e8 	.word	0x0800b1e8

0800a584 <__retarget_lock_init_recursive>:
 800a584:	4770      	bx	lr

0800a586 <__retarget_lock_acquire_recursive>:
 800a586:	4770      	bx	lr

0800a588 <__retarget_lock_release_recursive>:
 800a588:	4770      	bx	lr
	...

0800a58c <_free_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4605      	mov	r5, r0
 800a590:	2900      	cmp	r1, #0
 800a592:	d041      	beq.n	800a618 <_free_r+0x8c>
 800a594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a598:	1f0c      	subs	r4, r1, #4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfb8      	it	lt
 800a59e:	18e4      	addlt	r4, r4, r3
 800a5a0:	f7ff fd52 	bl	800a048 <__malloc_lock>
 800a5a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a61c <_free_r+0x90>)
 800a5a6:	6813      	ldr	r3, [r2, #0]
 800a5a8:	b933      	cbnz	r3, 800a5b8 <_free_r+0x2c>
 800a5aa:	6063      	str	r3, [r4, #4]
 800a5ac:	6014      	str	r4, [r2, #0]
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5b4:	f7ff bd4e 	b.w	800a054 <__malloc_unlock>
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	d908      	bls.n	800a5ce <_free_r+0x42>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	1821      	adds	r1, r4, r0
 800a5c0:	428b      	cmp	r3, r1
 800a5c2:	bf01      	itttt	eq
 800a5c4:	6819      	ldreq	r1, [r3, #0]
 800a5c6:	685b      	ldreq	r3, [r3, #4]
 800a5c8:	1809      	addeq	r1, r1, r0
 800a5ca:	6021      	streq	r1, [r4, #0]
 800a5cc:	e7ed      	b.n	800a5aa <_free_r+0x1e>
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	b10b      	cbz	r3, 800a5d8 <_free_r+0x4c>
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d9fa      	bls.n	800a5ce <_free_r+0x42>
 800a5d8:	6811      	ldr	r1, [r2, #0]
 800a5da:	1850      	adds	r0, r2, r1
 800a5dc:	42a0      	cmp	r0, r4
 800a5de:	d10b      	bne.n	800a5f8 <_free_r+0x6c>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	4401      	add	r1, r0
 800a5e4:	1850      	adds	r0, r2, r1
 800a5e6:	4283      	cmp	r3, r0
 800a5e8:	6011      	str	r1, [r2, #0]
 800a5ea:	d1e0      	bne.n	800a5ae <_free_r+0x22>
 800a5ec:	6818      	ldr	r0, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	6053      	str	r3, [r2, #4]
 800a5f2:	4408      	add	r0, r1
 800a5f4:	6010      	str	r0, [r2, #0]
 800a5f6:	e7da      	b.n	800a5ae <_free_r+0x22>
 800a5f8:	d902      	bls.n	800a600 <_free_r+0x74>
 800a5fa:	230c      	movs	r3, #12
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	e7d6      	b.n	800a5ae <_free_r+0x22>
 800a600:	6820      	ldr	r0, [r4, #0]
 800a602:	1821      	adds	r1, r4, r0
 800a604:	428b      	cmp	r3, r1
 800a606:	bf04      	itt	eq
 800a608:	6819      	ldreq	r1, [r3, #0]
 800a60a:	685b      	ldreq	r3, [r3, #4]
 800a60c:	6063      	str	r3, [r4, #4]
 800a60e:	bf04      	itt	eq
 800a610:	1809      	addeq	r1, r1, r0
 800a612:	6021      	streq	r1, [r4, #0]
 800a614:	6054      	str	r4, [r2, #4]
 800a616:	e7ca      	b.n	800a5ae <_free_r+0x22>
 800a618:	bd38      	pop	{r3, r4, r5, pc}
 800a61a:	bf00      	nop
 800a61c:	20000cbc 	.word	0x20000cbc

0800a620 <__sfputc_r>:
 800a620:	6893      	ldr	r3, [r2, #8]
 800a622:	3b01      	subs	r3, #1
 800a624:	2b00      	cmp	r3, #0
 800a626:	b410      	push	{r4}
 800a628:	6093      	str	r3, [r2, #8]
 800a62a:	da08      	bge.n	800a63e <__sfputc_r+0x1e>
 800a62c:	6994      	ldr	r4, [r2, #24]
 800a62e:	42a3      	cmp	r3, r4
 800a630:	db01      	blt.n	800a636 <__sfputc_r+0x16>
 800a632:	290a      	cmp	r1, #10
 800a634:	d103      	bne.n	800a63e <__sfputc_r+0x1e>
 800a636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63a:	f7ff be86 	b.w	800a34a <__swbuf_r>
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	1c58      	adds	r0, r3, #1
 800a642:	6010      	str	r0, [r2, #0]
 800a644:	7019      	strb	r1, [r3, #0]
 800a646:	4608      	mov	r0, r1
 800a648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <__sfputs_r>:
 800a64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	4614      	mov	r4, r2
 800a656:	18d5      	adds	r5, r2, r3
 800a658:	42ac      	cmp	r4, r5
 800a65a:	d101      	bne.n	800a660 <__sfputs_r+0x12>
 800a65c:	2000      	movs	r0, #0
 800a65e:	e007      	b.n	800a670 <__sfputs_r+0x22>
 800a660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a664:	463a      	mov	r2, r7
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ffda 	bl	800a620 <__sfputc_r>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d1f3      	bne.n	800a658 <__sfputs_r+0xa>
 800a670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a674 <_vfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	460d      	mov	r5, r1
 800a67a:	b09d      	sub	sp, #116	@ 0x74
 800a67c:	4614      	mov	r4, r2
 800a67e:	4698      	mov	r8, r3
 800a680:	4606      	mov	r6, r0
 800a682:	b118      	cbz	r0, 800a68c <_vfiprintf_r+0x18>
 800a684:	6a03      	ldr	r3, [r0, #32]
 800a686:	b90b      	cbnz	r3, 800a68c <_vfiprintf_r+0x18>
 800a688:	f7ff fd76 	bl	800a178 <__sinit>
 800a68c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a68e:	07d9      	lsls	r1, r3, #31
 800a690:	d405      	bmi.n	800a69e <_vfiprintf_r+0x2a>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	059a      	lsls	r2, r3, #22
 800a696:	d402      	bmi.n	800a69e <_vfiprintf_r+0x2a>
 800a698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a69a:	f7ff ff74 	bl	800a586 <__retarget_lock_acquire_recursive>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	071b      	lsls	r3, r3, #28
 800a6a2:	d501      	bpl.n	800a6a8 <_vfiprintf_r+0x34>
 800a6a4:	692b      	ldr	r3, [r5, #16]
 800a6a6:	b99b      	cbnz	r3, 800a6d0 <_vfiprintf_r+0x5c>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff fe8c 	bl	800a3c8 <__swsetup_r>
 800a6b0:	b170      	cbz	r0, 800a6d0 <_vfiprintf_r+0x5c>
 800a6b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6b4:	07dc      	lsls	r4, r3, #31
 800a6b6:	d504      	bpl.n	800a6c2 <_vfiprintf_r+0x4e>
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	b01d      	add	sp, #116	@ 0x74
 800a6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	0598      	lsls	r0, r3, #22
 800a6c6:	d4f7      	bmi.n	800a6b8 <_vfiprintf_r+0x44>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ca:	f7ff ff5d 	bl	800a588 <__retarget_lock_release_recursive>
 800a6ce:	e7f3      	b.n	800a6b8 <_vfiprintf_r+0x44>
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6d4:	2320      	movs	r3, #32
 800a6d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6de:	2330      	movs	r3, #48	@ 0x30
 800a6e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a890 <_vfiprintf_r+0x21c>
 800a6e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6e8:	f04f 0901 	mov.w	r9, #1
 800a6ec:	4623      	mov	r3, r4
 800a6ee:	469a      	mov	sl, r3
 800a6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6f4:	b10a      	cbz	r2, 800a6fa <_vfiprintf_r+0x86>
 800a6f6:	2a25      	cmp	r2, #37	@ 0x25
 800a6f8:	d1f9      	bne.n	800a6ee <_vfiprintf_r+0x7a>
 800a6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a6fe:	d00b      	beq.n	800a718 <_vfiprintf_r+0xa4>
 800a700:	465b      	mov	r3, fp
 800a702:	4622      	mov	r2, r4
 800a704:	4629      	mov	r1, r5
 800a706:	4630      	mov	r0, r6
 800a708:	f7ff ffa1 	bl	800a64e <__sfputs_r>
 800a70c:	3001      	adds	r0, #1
 800a70e:	f000 80a7 	beq.w	800a860 <_vfiprintf_r+0x1ec>
 800a712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a714:	445a      	add	r2, fp
 800a716:	9209      	str	r2, [sp, #36]	@ 0x24
 800a718:	f89a 3000 	ldrb.w	r3, [sl]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 809f 	beq.w	800a860 <_vfiprintf_r+0x1ec>
 800a722:	2300      	movs	r3, #0
 800a724:	f04f 32ff 	mov.w	r2, #4294967295
 800a728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a72c:	f10a 0a01 	add.w	sl, sl, #1
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	9307      	str	r3, [sp, #28]
 800a734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a738:	931a      	str	r3, [sp, #104]	@ 0x68
 800a73a:	4654      	mov	r4, sl
 800a73c:	2205      	movs	r2, #5
 800a73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a742:	4853      	ldr	r0, [pc, #332]	@ (800a890 <_vfiprintf_r+0x21c>)
 800a744:	f7f5 fd4c 	bl	80001e0 <memchr>
 800a748:	9a04      	ldr	r2, [sp, #16]
 800a74a:	b9d8      	cbnz	r0, 800a784 <_vfiprintf_r+0x110>
 800a74c:	06d1      	lsls	r1, r2, #27
 800a74e:	bf44      	itt	mi
 800a750:	2320      	movmi	r3, #32
 800a752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a756:	0713      	lsls	r3, r2, #28
 800a758:	bf44      	itt	mi
 800a75a:	232b      	movmi	r3, #43	@ 0x2b
 800a75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a760:	f89a 3000 	ldrb.w	r3, [sl]
 800a764:	2b2a      	cmp	r3, #42	@ 0x2a
 800a766:	d015      	beq.n	800a794 <_vfiprintf_r+0x120>
 800a768:	9a07      	ldr	r2, [sp, #28]
 800a76a:	4654      	mov	r4, sl
 800a76c:	2000      	movs	r0, #0
 800a76e:	f04f 0c0a 	mov.w	ip, #10
 800a772:	4621      	mov	r1, r4
 800a774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a778:	3b30      	subs	r3, #48	@ 0x30
 800a77a:	2b09      	cmp	r3, #9
 800a77c:	d94b      	bls.n	800a816 <_vfiprintf_r+0x1a2>
 800a77e:	b1b0      	cbz	r0, 800a7ae <_vfiprintf_r+0x13a>
 800a780:	9207      	str	r2, [sp, #28]
 800a782:	e014      	b.n	800a7ae <_vfiprintf_r+0x13a>
 800a784:	eba0 0308 	sub.w	r3, r0, r8
 800a788:	fa09 f303 	lsl.w	r3, r9, r3
 800a78c:	4313      	orrs	r3, r2
 800a78e:	9304      	str	r3, [sp, #16]
 800a790:	46a2      	mov	sl, r4
 800a792:	e7d2      	b.n	800a73a <_vfiprintf_r+0xc6>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	1d19      	adds	r1, r3, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	9103      	str	r1, [sp, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bfbb      	ittet	lt
 800a7a0:	425b      	neglt	r3, r3
 800a7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7a6:	9307      	strge	r3, [sp, #28]
 800a7a8:	9307      	strlt	r3, [sp, #28]
 800a7aa:	bfb8      	it	lt
 800a7ac:	9204      	strlt	r2, [sp, #16]
 800a7ae:	7823      	ldrb	r3, [r4, #0]
 800a7b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7b2:	d10a      	bne.n	800a7ca <_vfiprintf_r+0x156>
 800a7b4:	7863      	ldrb	r3, [r4, #1]
 800a7b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7b8:	d132      	bne.n	800a820 <_vfiprintf_r+0x1ac>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	1d1a      	adds	r2, r3, #4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	9203      	str	r2, [sp, #12]
 800a7c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7c6:	3402      	adds	r4, #2
 800a7c8:	9305      	str	r3, [sp, #20]
 800a7ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8a0 <_vfiprintf_r+0x22c>
 800a7ce:	7821      	ldrb	r1, [r4, #0]
 800a7d0:	2203      	movs	r2, #3
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	f7f5 fd04 	bl	80001e0 <memchr>
 800a7d8:	b138      	cbz	r0, 800a7ea <_vfiprintf_r+0x176>
 800a7da:	9b04      	ldr	r3, [sp, #16]
 800a7dc:	eba0 000a 	sub.w	r0, r0, sl
 800a7e0:	2240      	movs	r2, #64	@ 0x40
 800a7e2:	4082      	lsls	r2, r0
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	3401      	adds	r4, #1
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ee:	4829      	ldr	r0, [pc, #164]	@ (800a894 <_vfiprintf_r+0x220>)
 800a7f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7f4:	2206      	movs	r2, #6
 800a7f6:	f7f5 fcf3 	bl	80001e0 <memchr>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d03f      	beq.n	800a87e <_vfiprintf_r+0x20a>
 800a7fe:	4b26      	ldr	r3, [pc, #152]	@ (800a898 <_vfiprintf_r+0x224>)
 800a800:	bb1b      	cbnz	r3, 800a84a <_vfiprintf_r+0x1d6>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	3307      	adds	r3, #7
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	3308      	adds	r3, #8
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a810:	443b      	add	r3, r7
 800a812:	9309      	str	r3, [sp, #36]	@ 0x24
 800a814:	e76a      	b.n	800a6ec <_vfiprintf_r+0x78>
 800a816:	fb0c 3202 	mla	r2, ip, r2, r3
 800a81a:	460c      	mov	r4, r1
 800a81c:	2001      	movs	r0, #1
 800a81e:	e7a8      	b.n	800a772 <_vfiprintf_r+0xfe>
 800a820:	2300      	movs	r3, #0
 800a822:	3401      	adds	r4, #1
 800a824:	9305      	str	r3, [sp, #20]
 800a826:	4619      	mov	r1, r3
 800a828:	f04f 0c0a 	mov.w	ip, #10
 800a82c:	4620      	mov	r0, r4
 800a82e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a832:	3a30      	subs	r2, #48	@ 0x30
 800a834:	2a09      	cmp	r2, #9
 800a836:	d903      	bls.n	800a840 <_vfiprintf_r+0x1cc>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d0c6      	beq.n	800a7ca <_vfiprintf_r+0x156>
 800a83c:	9105      	str	r1, [sp, #20]
 800a83e:	e7c4      	b.n	800a7ca <_vfiprintf_r+0x156>
 800a840:	fb0c 2101 	mla	r1, ip, r1, r2
 800a844:	4604      	mov	r4, r0
 800a846:	2301      	movs	r3, #1
 800a848:	e7f0      	b.n	800a82c <_vfiprintf_r+0x1b8>
 800a84a:	ab03      	add	r3, sp, #12
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	462a      	mov	r2, r5
 800a850:	4b12      	ldr	r3, [pc, #72]	@ (800a89c <_vfiprintf_r+0x228>)
 800a852:	a904      	add	r1, sp, #16
 800a854:	4630      	mov	r0, r6
 800a856:	f3af 8000 	nop.w
 800a85a:	4607      	mov	r7, r0
 800a85c:	1c78      	adds	r0, r7, #1
 800a85e:	d1d6      	bne.n	800a80e <_vfiprintf_r+0x19a>
 800a860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a862:	07d9      	lsls	r1, r3, #31
 800a864:	d405      	bmi.n	800a872 <_vfiprintf_r+0x1fe>
 800a866:	89ab      	ldrh	r3, [r5, #12]
 800a868:	059a      	lsls	r2, r3, #22
 800a86a:	d402      	bmi.n	800a872 <_vfiprintf_r+0x1fe>
 800a86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a86e:	f7ff fe8b 	bl	800a588 <__retarget_lock_release_recursive>
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	065b      	lsls	r3, r3, #25
 800a876:	f53f af1f 	bmi.w	800a6b8 <_vfiprintf_r+0x44>
 800a87a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a87c:	e71e      	b.n	800a6bc <_vfiprintf_r+0x48>
 800a87e:	ab03      	add	r3, sp, #12
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	462a      	mov	r2, r5
 800a884:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <_vfiprintf_r+0x228>)
 800a886:	a904      	add	r1, sp, #16
 800a888:	4630      	mov	r0, r6
 800a88a:	f000 f879 	bl	800a980 <_printf_i>
 800a88e:	e7e4      	b.n	800a85a <_vfiprintf_r+0x1e6>
 800a890:	0800b1a8 	.word	0x0800b1a8
 800a894:	0800b1b2 	.word	0x0800b1b2
 800a898:	00000000 	.word	0x00000000
 800a89c:	0800a64f 	.word	0x0800a64f
 800a8a0:	0800b1ae 	.word	0x0800b1ae

0800a8a4 <_printf_common>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	4698      	mov	r8, r3
 800a8ac:	688a      	ldr	r2, [r1, #8]
 800a8ae:	690b      	ldr	r3, [r1, #16]
 800a8b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	bfb8      	it	lt
 800a8b8:	4613      	movlt	r3, r2
 800a8ba:	6033      	str	r3, [r6, #0]
 800a8bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b10a      	cbz	r2, 800a8ca <_printf_common+0x26>
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	6033      	str	r3, [r6, #0]
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	0699      	lsls	r1, r3, #26
 800a8ce:	bf42      	ittt	mi
 800a8d0:	6833      	ldrmi	r3, [r6, #0]
 800a8d2:	3302      	addmi	r3, #2
 800a8d4:	6033      	strmi	r3, [r6, #0]
 800a8d6:	6825      	ldr	r5, [r4, #0]
 800a8d8:	f015 0506 	ands.w	r5, r5, #6
 800a8dc:	d106      	bne.n	800a8ec <_printf_common+0x48>
 800a8de:	f104 0a19 	add.w	sl, r4, #25
 800a8e2:	68e3      	ldr	r3, [r4, #12]
 800a8e4:	6832      	ldr	r2, [r6, #0]
 800a8e6:	1a9b      	subs	r3, r3, r2
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	dc26      	bgt.n	800a93a <_printf_common+0x96>
 800a8ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8f0:	6822      	ldr	r2, [r4, #0]
 800a8f2:	3b00      	subs	r3, #0
 800a8f4:	bf18      	it	ne
 800a8f6:	2301      	movne	r3, #1
 800a8f8:	0692      	lsls	r2, r2, #26
 800a8fa:	d42b      	bmi.n	800a954 <_printf_common+0xb0>
 800a8fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a900:	4641      	mov	r1, r8
 800a902:	4638      	mov	r0, r7
 800a904:	47c8      	blx	r9
 800a906:	3001      	adds	r0, #1
 800a908:	d01e      	beq.n	800a948 <_printf_common+0xa4>
 800a90a:	6823      	ldr	r3, [r4, #0]
 800a90c:	6922      	ldr	r2, [r4, #16]
 800a90e:	f003 0306 	and.w	r3, r3, #6
 800a912:	2b04      	cmp	r3, #4
 800a914:	bf02      	ittt	eq
 800a916:	68e5      	ldreq	r5, [r4, #12]
 800a918:	6833      	ldreq	r3, [r6, #0]
 800a91a:	1aed      	subeq	r5, r5, r3
 800a91c:	68a3      	ldr	r3, [r4, #8]
 800a91e:	bf0c      	ite	eq
 800a920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a924:	2500      	movne	r5, #0
 800a926:	4293      	cmp	r3, r2
 800a928:	bfc4      	itt	gt
 800a92a:	1a9b      	subgt	r3, r3, r2
 800a92c:	18ed      	addgt	r5, r5, r3
 800a92e:	2600      	movs	r6, #0
 800a930:	341a      	adds	r4, #26
 800a932:	42b5      	cmp	r5, r6
 800a934:	d11a      	bne.n	800a96c <_printf_common+0xc8>
 800a936:	2000      	movs	r0, #0
 800a938:	e008      	b.n	800a94c <_printf_common+0xa8>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4652      	mov	r2, sl
 800a93e:	4641      	mov	r1, r8
 800a940:	4638      	mov	r0, r7
 800a942:	47c8      	blx	r9
 800a944:	3001      	adds	r0, #1
 800a946:	d103      	bne.n	800a950 <_printf_common+0xac>
 800a948:	f04f 30ff 	mov.w	r0, #4294967295
 800a94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a950:	3501      	adds	r5, #1
 800a952:	e7c6      	b.n	800a8e2 <_printf_common+0x3e>
 800a954:	18e1      	adds	r1, r4, r3
 800a956:	1c5a      	adds	r2, r3, #1
 800a958:	2030      	movs	r0, #48	@ 0x30
 800a95a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a95e:	4422      	add	r2, r4
 800a960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a968:	3302      	adds	r3, #2
 800a96a:	e7c7      	b.n	800a8fc <_printf_common+0x58>
 800a96c:	2301      	movs	r3, #1
 800a96e:	4622      	mov	r2, r4
 800a970:	4641      	mov	r1, r8
 800a972:	4638      	mov	r0, r7
 800a974:	47c8      	blx	r9
 800a976:	3001      	adds	r0, #1
 800a978:	d0e6      	beq.n	800a948 <_printf_common+0xa4>
 800a97a:	3601      	adds	r6, #1
 800a97c:	e7d9      	b.n	800a932 <_printf_common+0x8e>
	...

0800a980 <_printf_i>:
 800a980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a984:	7e0f      	ldrb	r7, [r1, #24]
 800a986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a988:	2f78      	cmp	r7, #120	@ 0x78
 800a98a:	4691      	mov	r9, r2
 800a98c:	4680      	mov	r8, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	469a      	mov	sl, r3
 800a992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a996:	d807      	bhi.n	800a9a8 <_printf_i+0x28>
 800a998:	2f62      	cmp	r7, #98	@ 0x62
 800a99a:	d80a      	bhi.n	800a9b2 <_printf_i+0x32>
 800a99c:	2f00      	cmp	r7, #0
 800a99e:	f000 80d2 	beq.w	800ab46 <_printf_i+0x1c6>
 800a9a2:	2f58      	cmp	r7, #88	@ 0x58
 800a9a4:	f000 80b9 	beq.w	800ab1a <_printf_i+0x19a>
 800a9a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9b0:	e03a      	b.n	800aa28 <_printf_i+0xa8>
 800a9b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9b6:	2b15      	cmp	r3, #21
 800a9b8:	d8f6      	bhi.n	800a9a8 <_printf_i+0x28>
 800a9ba:	a101      	add	r1, pc, #4	@ (adr r1, 800a9c0 <_printf_i+0x40>)
 800a9bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9c0:	0800aa19 	.word	0x0800aa19
 800a9c4:	0800aa2d 	.word	0x0800aa2d
 800a9c8:	0800a9a9 	.word	0x0800a9a9
 800a9cc:	0800a9a9 	.word	0x0800a9a9
 800a9d0:	0800a9a9 	.word	0x0800a9a9
 800a9d4:	0800a9a9 	.word	0x0800a9a9
 800a9d8:	0800aa2d 	.word	0x0800aa2d
 800a9dc:	0800a9a9 	.word	0x0800a9a9
 800a9e0:	0800a9a9 	.word	0x0800a9a9
 800a9e4:	0800a9a9 	.word	0x0800a9a9
 800a9e8:	0800a9a9 	.word	0x0800a9a9
 800a9ec:	0800ab2d 	.word	0x0800ab2d
 800a9f0:	0800aa57 	.word	0x0800aa57
 800a9f4:	0800aae7 	.word	0x0800aae7
 800a9f8:	0800a9a9 	.word	0x0800a9a9
 800a9fc:	0800a9a9 	.word	0x0800a9a9
 800aa00:	0800ab4f 	.word	0x0800ab4f
 800aa04:	0800a9a9 	.word	0x0800a9a9
 800aa08:	0800aa57 	.word	0x0800aa57
 800aa0c:	0800a9a9 	.word	0x0800a9a9
 800aa10:	0800a9a9 	.word	0x0800a9a9
 800aa14:	0800aaef 	.word	0x0800aaef
 800aa18:	6833      	ldr	r3, [r6, #0]
 800aa1a:	1d1a      	adds	r2, r3, #4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6032      	str	r2, [r6, #0]
 800aa20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e09d      	b.n	800ab68 <_printf_i+0x1e8>
 800aa2c:	6833      	ldr	r3, [r6, #0]
 800aa2e:	6820      	ldr	r0, [r4, #0]
 800aa30:	1d19      	adds	r1, r3, #4
 800aa32:	6031      	str	r1, [r6, #0]
 800aa34:	0606      	lsls	r6, r0, #24
 800aa36:	d501      	bpl.n	800aa3c <_printf_i+0xbc>
 800aa38:	681d      	ldr	r5, [r3, #0]
 800aa3a:	e003      	b.n	800aa44 <_printf_i+0xc4>
 800aa3c:	0645      	lsls	r5, r0, #25
 800aa3e:	d5fb      	bpl.n	800aa38 <_printf_i+0xb8>
 800aa40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa44:	2d00      	cmp	r5, #0
 800aa46:	da03      	bge.n	800aa50 <_printf_i+0xd0>
 800aa48:	232d      	movs	r3, #45	@ 0x2d
 800aa4a:	426d      	negs	r5, r5
 800aa4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa50:	4859      	ldr	r0, [pc, #356]	@ (800abb8 <_printf_i+0x238>)
 800aa52:	230a      	movs	r3, #10
 800aa54:	e011      	b.n	800aa7a <_printf_i+0xfa>
 800aa56:	6821      	ldr	r1, [r4, #0]
 800aa58:	6833      	ldr	r3, [r6, #0]
 800aa5a:	0608      	lsls	r0, r1, #24
 800aa5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa60:	d402      	bmi.n	800aa68 <_printf_i+0xe8>
 800aa62:	0649      	lsls	r1, r1, #25
 800aa64:	bf48      	it	mi
 800aa66:	b2ad      	uxthmi	r5, r5
 800aa68:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa6a:	4853      	ldr	r0, [pc, #332]	@ (800abb8 <_printf_i+0x238>)
 800aa6c:	6033      	str	r3, [r6, #0]
 800aa6e:	bf14      	ite	ne
 800aa70:	230a      	movne	r3, #10
 800aa72:	2308      	moveq	r3, #8
 800aa74:	2100      	movs	r1, #0
 800aa76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa7a:	6866      	ldr	r6, [r4, #4]
 800aa7c:	60a6      	str	r6, [r4, #8]
 800aa7e:	2e00      	cmp	r6, #0
 800aa80:	bfa2      	ittt	ge
 800aa82:	6821      	ldrge	r1, [r4, #0]
 800aa84:	f021 0104 	bicge.w	r1, r1, #4
 800aa88:	6021      	strge	r1, [r4, #0]
 800aa8a:	b90d      	cbnz	r5, 800aa90 <_printf_i+0x110>
 800aa8c:	2e00      	cmp	r6, #0
 800aa8e:	d04b      	beq.n	800ab28 <_printf_i+0x1a8>
 800aa90:	4616      	mov	r6, r2
 800aa92:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa96:	fb03 5711 	mls	r7, r3, r1, r5
 800aa9a:	5dc7      	ldrb	r7, [r0, r7]
 800aa9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aaa0:	462f      	mov	r7, r5
 800aaa2:	42bb      	cmp	r3, r7
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	d9f4      	bls.n	800aa92 <_printf_i+0x112>
 800aaa8:	2b08      	cmp	r3, #8
 800aaaa:	d10b      	bne.n	800aac4 <_printf_i+0x144>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	07df      	lsls	r7, r3, #31
 800aab0:	d508      	bpl.n	800aac4 <_printf_i+0x144>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	6861      	ldr	r1, [r4, #4]
 800aab6:	4299      	cmp	r1, r3
 800aab8:	bfde      	ittt	le
 800aaba:	2330      	movle	r3, #48	@ 0x30
 800aabc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aac4:	1b92      	subs	r2, r2, r6
 800aac6:	6122      	str	r2, [r4, #16]
 800aac8:	f8cd a000 	str.w	sl, [sp]
 800aacc:	464b      	mov	r3, r9
 800aace:	aa03      	add	r2, sp, #12
 800aad0:	4621      	mov	r1, r4
 800aad2:	4640      	mov	r0, r8
 800aad4:	f7ff fee6 	bl	800a8a4 <_printf_common>
 800aad8:	3001      	adds	r0, #1
 800aada:	d14a      	bne.n	800ab72 <_printf_i+0x1f2>
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	b004      	add	sp, #16
 800aae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	f043 0320 	orr.w	r3, r3, #32
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	4833      	ldr	r0, [pc, #204]	@ (800abbc <_printf_i+0x23c>)
 800aaf0:	2778      	movs	r7, #120	@ 0x78
 800aaf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	6831      	ldr	r1, [r6, #0]
 800aafa:	061f      	lsls	r7, r3, #24
 800aafc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab00:	d402      	bmi.n	800ab08 <_printf_i+0x188>
 800ab02:	065f      	lsls	r7, r3, #25
 800ab04:	bf48      	it	mi
 800ab06:	b2ad      	uxthmi	r5, r5
 800ab08:	6031      	str	r1, [r6, #0]
 800ab0a:	07d9      	lsls	r1, r3, #31
 800ab0c:	bf44      	itt	mi
 800ab0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab12:	6023      	strmi	r3, [r4, #0]
 800ab14:	b11d      	cbz	r5, 800ab1e <_printf_i+0x19e>
 800ab16:	2310      	movs	r3, #16
 800ab18:	e7ac      	b.n	800aa74 <_printf_i+0xf4>
 800ab1a:	4827      	ldr	r0, [pc, #156]	@ (800abb8 <_printf_i+0x238>)
 800ab1c:	e7e9      	b.n	800aaf2 <_printf_i+0x172>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	f023 0320 	bic.w	r3, r3, #32
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	e7f6      	b.n	800ab16 <_printf_i+0x196>
 800ab28:	4616      	mov	r6, r2
 800ab2a:	e7bd      	b.n	800aaa8 <_printf_i+0x128>
 800ab2c:	6833      	ldr	r3, [r6, #0]
 800ab2e:	6825      	ldr	r5, [r4, #0]
 800ab30:	6961      	ldr	r1, [r4, #20]
 800ab32:	1d18      	adds	r0, r3, #4
 800ab34:	6030      	str	r0, [r6, #0]
 800ab36:	062e      	lsls	r6, r5, #24
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	d501      	bpl.n	800ab40 <_printf_i+0x1c0>
 800ab3c:	6019      	str	r1, [r3, #0]
 800ab3e:	e002      	b.n	800ab46 <_printf_i+0x1c6>
 800ab40:	0668      	lsls	r0, r5, #25
 800ab42:	d5fb      	bpl.n	800ab3c <_printf_i+0x1bc>
 800ab44:	8019      	strh	r1, [r3, #0]
 800ab46:	2300      	movs	r3, #0
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	4616      	mov	r6, r2
 800ab4c:	e7bc      	b.n	800aac8 <_printf_i+0x148>
 800ab4e:	6833      	ldr	r3, [r6, #0]
 800ab50:	1d1a      	adds	r2, r3, #4
 800ab52:	6032      	str	r2, [r6, #0]
 800ab54:	681e      	ldr	r6, [r3, #0]
 800ab56:	6862      	ldr	r2, [r4, #4]
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7f5 fb40 	bl	80001e0 <memchr>
 800ab60:	b108      	cbz	r0, 800ab66 <_printf_i+0x1e6>
 800ab62:	1b80      	subs	r0, r0, r6
 800ab64:	6060      	str	r0, [r4, #4]
 800ab66:	6863      	ldr	r3, [r4, #4]
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab70:	e7aa      	b.n	800aac8 <_printf_i+0x148>
 800ab72:	6923      	ldr	r3, [r4, #16]
 800ab74:	4632      	mov	r2, r6
 800ab76:	4649      	mov	r1, r9
 800ab78:	4640      	mov	r0, r8
 800ab7a:	47d0      	blx	sl
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d0ad      	beq.n	800aadc <_printf_i+0x15c>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	079b      	lsls	r3, r3, #30
 800ab84:	d413      	bmi.n	800abae <_printf_i+0x22e>
 800ab86:	68e0      	ldr	r0, [r4, #12]
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	4298      	cmp	r0, r3
 800ab8c:	bfb8      	it	lt
 800ab8e:	4618      	movlt	r0, r3
 800ab90:	e7a6      	b.n	800aae0 <_printf_i+0x160>
 800ab92:	2301      	movs	r3, #1
 800ab94:	4632      	mov	r2, r6
 800ab96:	4649      	mov	r1, r9
 800ab98:	4640      	mov	r0, r8
 800ab9a:	47d0      	blx	sl
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	d09d      	beq.n	800aadc <_printf_i+0x15c>
 800aba0:	3501      	adds	r5, #1
 800aba2:	68e3      	ldr	r3, [r4, #12]
 800aba4:	9903      	ldr	r1, [sp, #12]
 800aba6:	1a5b      	subs	r3, r3, r1
 800aba8:	42ab      	cmp	r3, r5
 800abaa:	dcf2      	bgt.n	800ab92 <_printf_i+0x212>
 800abac:	e7eb      	b.n	800ab86 <_printf_i+0x206>
 800abae:	2500      	movs	r5, #0
 800abb0:	f104 0619 	add.w	r6, r4, #25
 800abb4:	e7f5      	b.n	800aba2 <_printf_i+0x222>
 800abb6:	bf00      	nop
 800abb8:	0800b1b9 	.word	0x0800b1b9
 800abbc:	0800b1ca 	.word	0x0800b1ca

0800abc0 <__sflush_r>:
 800abc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc8:	0716      	lsls	r6, r2, #28
 800abca:	4605      	mov	r5, r0
 800abcc:	460c      	mov	r4, r1
 800abce:	d454      	bmi.n	800ac7a <__sflush_r+0xba>
 800abd0:	684b      	ldr	r3, [r1, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dc02      	bgt.n	800abdc <__sflush_r+0x1c>
 800abd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	dd48      	ble.n	800ac6e <__sflush_r+0xae>
 800abdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abde:	2e00      	cmp	r6, #0
 800abe0:	d045      	beq.n	800ac6e <__sflush_r+0xae>
 800abe2:	2300      	movs	r3, #0
 800abe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800abe8:	682f      	ldr	r7, [r5, #0]
 800abea:	6a21      	ldr	r1, [r4, #32]
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	d030      	beq.n	800ac52 <__sflush_r+0x92>
 800abf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	0759      	lsls	r1, r3, #29
 800abf6:	d505      	bpl.n	800ac04 <__sflush_r+0x44>
 800abf8:	6863      	ldr	r3, [r4, #4]
 800abfa:	1ad2      	subs	r2, r2, r3
 800abfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abfe:	b10b      	cbz	r3, 800ac04 <__sflush_r+0x44>
 800ac00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac02:	1ad2      	subs	r2, r2, r3
 800ac04:	2300      	movs	r3, #0
 800ac06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac08:	6a21      	ldr	r1, [r4, #32]
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	47b0      	blx	r6
 800ac0e:	1c43      	adds	r3, r0, #1
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	d106      	bne.n	800ac22 <__sflush_r+0x62>
 800ac14:	6829      	ldr	r1, [r5, #0]
 800ac16:	291d      	cmp	r1, #29
 800ac18:	d82b      	bhi.n	800ac72 <__sflush_r+0xb2>
 800ac1a:	4a2a      	ldr	r2, [pc, #168]	@ (800acc4 <__sflush_r+0x104>)
 800ac1c:	410a      	asrs	r2, r1
 800ac1e:	07d6      	lsls	r6, r2, #31
 800ac20:	d427      	bmi.n	800ac72 <__sflush_r+0xb2>
 800ac22:	2200      	movs	r2, #0
 800ac24:	6062      	str	r2, [r4, #4]
 800ac26:	04d9      	lsls	r1, r3, #19
 800ac28:	6922      	ldr	r2, [r4, #16]
 800ac2a:	6022      	str	r2, [r4, #0]
 800ac2c:	d504      	bpl.n	800ac38 <__sflush_r+0x78>
 800ac2e:	1c42      	adds	r2, r0, #1
 800ac30:	d101      	bne.n	800ac36 <__sflush_r+0x76>
 800ac32:	682b      	ldr	r3, [r5, #0]
 800ac34:	b903      	cbnz	r3, 800ac38 <__sflush_r+0x78>
 800ac36:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac3a:	602f      	str	r7, [r5, #0]
 800ac3c:	b1b9      	cbz	r1, 800ac6e <__sflush_r+0xae>
 800ac3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac42:	4299      	cmp	r1, r3
 800ac44:	d002      	beq.n	800ac4c <__sflush_r+0x8c>
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7ff fca0 	bl	800a58c <_free_r>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac50:	e00d      	b.n	800ac6e <__sflush_r+0xae>
 800ac52:	2301      	movs	r3, #1
 800ac54:	4628      	mov	r0, r5
 800ac56:	47b0      	blx	r6
 800ac58:	4602      	mov	r2, r0
 800ac5a:	1c50      	adds	r0, r2, #1
 800ac5c:	d1c9      	bne.n	800abf2 <__sflush_r+0x32>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0c6      	beq.n	800abf2 <__sflush_r+0x32>
 800ac64:	2b1d      	cmp	r3, #29
 800ac66:	d001      	beq.n	800ac6c <__sflush_r+0xac>
 800ac68:	2b16      	cmp	r3, #22
 800ac6a:	d11e      	bne.n	800acaa <__sflush_r+0xea>
 800ac6c:	602f      	str	r7, [r5, #0]
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e022      	b.n	800acb8 <__sflush_r+0xf8>
 800ac72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac76:	b21b      	sxth	r3, r3
 800ac78:	e01b      	b.n	800acb2 <__sflush_r+0xf2>
 800ac7a:	690f      	ldr	r7, [r1, #16]
 800ac7c:	2f00      	cmp	r7, #0
 800ac7e:	d0f6      	beq.n	800ac6e <__sflush_r+0xae>
 800ac80:	0793      	lsls	r3, r2, #30
 800ac82:	680e      	ldr	r6, [r1, #0]
 800ac84:	bf08      	it	eq
 800ac86:	694b      	ldreq	r3, [r1, #20]
 800ac88:	600f      	str	r7, [r1, #0]
 800ac8a:	bf18      	it	ne
 800ac8c:	2300      	movne	r3, #0
 800ac8e:	eba6 0807 	sub.w	r8, r6, r7
 800ac92:	608b      	str	r3, [r1, #8]
 800ac94:	f1b8 0f00 	cmp.w	r8, #0
 800ac98:	dde9      	ble.n	800ac6e <__sflush_r+0xae>
 800ac9a:	6a21      	ldr	r1, [r4, #32]
 800ac9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac9e:	4643      	mov	r3, r8
 800aca0:	463a      	mov	r2, r7
 800aca2:	4628      	mov	r0, r5
 800aca4:	47b0      	blx	r6
 800aca6:	2800      	cmp	r0, #0
 800aca8:	dc08      	bgt.n	800acbc <__sflush_r+0xfc>
 800acaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acbc:	4407      	add	r7, r0
 800acbe:	eba8 0800 	sub.w	r8, r8, r0
 800acc2:	e7e7      	b.n	800ac94 <__sflush_r+0xd4>
 800acc4:	dfbffffe 	.word	0xdfbffffe

0800acc8 <_fflush_r>:
 800acc8:	b538      	push	{r3, r4, r5, lr}
 800acca:	690b      	ldr	r3, [r1, #16]
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	b913      	cbnz	r3, 800acd8 <_fflush_r+0x10>
 800acd2:	2500      	movs	r5, #0
 800acd4:	4628      	mov	r0, r5
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	b118      	cbz	r0, 800ace2 <_fflush_r+0x1a>
 800acda:	6a03      	ldr	r3, [r0, #32]
 800acdc:	b90b      	cbnz	r3, 800ace2 <_fflush_r+0x1a>
 800acde:	f7ff fa4b 	bl	800a178 <__sinit>
 800ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0f3      	beq.n	800acd2 <_fflush_r+0xa>
 800acea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acec:	07d0      	lsls	r0, r2, #31
 800acee:	d404      	bmi.n	800acfa <_fflush_r+0x32>
 800acf0:	0599      	lsls	r1, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_fflush_r+0x32>
 800acf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acf6:	f7ff fc46 	bl	800a586 <__retarget_lock_acquire_recursive>
 800acfa:	4628      	mov	r0, r5
 800acfc:	4621      	mov	r1, r4
 800acfe:	f7ff ff5f 	bl	800abc0 <__sflush_r>
 800ad02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad04:	07da      	lsls	r2, r3, #31
 800ad06:	4605      	mov	r5, r0
 800ad08:	d4e4      	bmi.n	800acd4 <_fflush_r+0xc>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	059b      	lsls	r3, r3, #22
 800ad0e:	d4e1      	bmi.n	800acd4 <_fflush_r+0xc>
 800ad10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad12:	f7ff fc39 	bl	800a588 <__retarget_lock_release_recursive>
 800ad16:	e7dd      	b.n	800acd4 <_fflush_r+0xc>

0800ad18 <__swhatbuf_r>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad20:	2900      	cmp	r1, #0
 800ad22:	b096      	sub	sp, #88	@ 0x58
 800ad24:	4615      	mov	r5, r2
 800ad26:	461e      	mov	r6, r3
 800ad28:	da0d      	bge.n	800ad46 <__swhatbuf_r+0x2e>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad30:	f04f 0100 	mov.w	r1, #0
 800ad34:	bf14      	ite	ne
 800ad36:	2340      	movne	r3, #64	@ 0x40
 800ad38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	6031      	str	r1, [r6, #0]
 800ad40:	602b      	str	r3, [r5, #0]
 800ad42:	b016      	add	sp, #88	@ 0x58
 800ad44:	bd70      	pop	{r4, r5, r6, pc}
 800ad46:	466a      	mov	r2, sp
 800ad48:	f000 f848 	bl	800addc <_fstat_r>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	dbec      	blt.n	800ad2a <__swhatbuf_r+0x12>
 800ad50:	9901      	ldr	r1, [sp, #4]
 800ad52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad5a:	4259      	negs	r1, r3
 800ad5c:	4159      	adcs	r1, r3
 800ad5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad62:	e7eb      	b.n	800ad3c <__swhatbuf_r+0x24>

0800ad64 <__smakebuf_r>:
 800ad64:	898b      	ldrh	r3, [r1, #12]
 800ad66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad68:	079d      	lsls	r5, r3, #30
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	d507      	bpl.n	800ad80 <__smakebuf_r+0x1c>
 800ad70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	6123      	str	r3, [r4, #16]
 800ad78:	2301      	movs	r3, #1
 800ad7a:	6163      	str	r3, [r4, #20]
 800ad7c:	b003      	add	sp, #12
 800ad7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad80:	ab01      	add	r3, sp, #4
 800ad82:	466a      	mov	r2, sp
 800ad84:	f7ff ffc8 	bl	800ad18 <__swhatbuf_r>
 800ad88:	9f00      	ldr	r7, [sp, #0]
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff f8da 	bl	8009f48 <_malloc_r>
 800ad94:	b948      	cbnz	r0, 800adaa <__smakebuf_r+0x46>
 800ad96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9a:	059a      	lsls	r2, r3, #22
 800ad9c:	d4ee      	bmi.n	800ad7c <__smakebuf_r+0x18>
 800ad9e:	f023 0303 	bic.w	r3, r3, #3
 800ada2:	f043 0302 	orr.w	r3, r3, #2
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	e7e2      	b.n	800ad70 <__smakebuf_r+0xc>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	6020      	str	r0, [r4, #0]
 800adae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adb2:	81a3      	strh	r3, [r4, #12]
 800adb4:	9b01      	ldr	r3, [sp, #4]
 800adb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adba:	b15b      	cbz	r3, 800add4 <__smakebuf_r+0x70>
 800adbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc0:	4630      	mov	r0, r6
 800adc2:	f000 f81d 	bl	800ae00 <_isatty_r>
 800adc6:	b128      	cbz	r0, 800add4 <__smakebuf_r+0x70>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f023 0303 	bic.w	r3, r3, #3
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	431d      	orrs	r5, r3
 800add8:	81a5      	strh	r5, [r4, #12]
 800adda:	e7cf      	b.n	800ad7c <__smakebuf_r+0x18>

0800addc <_fstat_r>:
 800addc:	b538      	push	{r3, r4, r5, lr}
 800adde:	4d07      	ldr	r5, [pc, #28]	@ (800adfc <_fstat_r+0x20>)
 800ade0:	2300      	movs	r3, #0
 800ade2:	4604      	mov	r4, r0
 800ade4:	4608      	mov	r0, r1
 800ade6:	4611      	mov	r1, r2
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	f7f6 f902 	bl	8000ff2 <_fstat>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	d102      	bne.n	800adf8 <_fstat_r+0x1c>
 800adf2:	682b      	ldr	r3, [r5, #0]
 800adf4:	b103      	cbz	r3, 800adf8 <_fstat_r+0x1c>
 800adf6:	6023      	str	r3, [r4, #0]
 800adf8:	bd38      	pop	{r3, r4, r5, pc}
 800adfa:	bf00      	nop
 800adfc:	20000dfc 	.word	0x20000dfc

0800ae00 <_isatty_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d06      	ldr	r5, [pc, #24]	@ (800ae1c <_isatty_r+0x1c>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	f7f6 f901 	bl	8001012 <_isatty>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_isatty_r+0x1a>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_isatty_r+0x1a>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20000dfc 	.word	0x20000dfc

0800ae20 <_init>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	bf00      	nop
 800ae24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae26:	bc08      	pop	{r3}
 800ae28:	469e      	mov	lr, r3
 800ae2a:	4770      	bx	lr

0800ae2c <_fini>:
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	bf00      	nop
 800ae30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae32:	bc08      	pop	{r3}
 800ae34:	469e      	mov	lr, r3
 800ae36:	4770      	bx	lr
